/*
 Navicat Premium Data Transfer

 Source Server         : 个人
 Source Server Type    : MySQL
 Source Server Version : 80025
 Source Host           : 120.77.145.59:3306
 Source Schema         : halodb

 Target Server Type    : MySQL
 Target Server Version : 80025
 File Encoding         : 65001

 Date: 09/09/2021 16:07:11
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for attachments
-- ----------------------------
DROP TABLE IF EXISTS `attachments`;
CREATE TABLE `attachments`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `file_key` varchar(2047) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `height` int(0) NULL DEFAULT 0,
  `media_type` varchar(127) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `path` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `size` bigint(0) NOT NULL,
  `suffix` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `thumb_path` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `type` int(0) NULL DEFAULT 0,
  `width` int(0) NULL DEFAULT 0,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `attachments_media_type`(`media_type`) USING BTREE,
  INDEX `attachments_create_time`(`create_time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 67 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of attachments
-- ----------------------------
INSERT INTO `attachments` VALUES (1, '2021-07-10 17:13:10.734000', '2021-07-10 17:13:10.734000', 'upload/2021/07/0baef6d9880511ebb6edd017c2d2eca2-76a13b2fe0624568950b668f1866095f.png', 1080, 'image/png', '0baef6d9880511ebb6edd017c2d2eca2', 'upload/2021/07/0baef6d9880511ebb6edd017c2d2eca2-76a13b2fe0624568950b668f1866095f.png', 29185, 'png', 'upload/2021/07/0baef6d9880511ebb6edd017c2d2eca2-76a13b2fe0624568950b668f1866095f-thumbnail.png', 0, 1920);
INSERT INTO `attachments` VALUES (2, '2021-07-10 17:13:12.428000', '2021-07-10 17:13:12.428000', 'upload/2021/07/9a9c447af8294a8d834fd648f5873c1b-dde407a595bc4824996c77265f055de4.jpg', 1200, 'image/jpeg', '9a9c447af8294a8d834fd648f5873c1b', 'upload/2021/07/9a9c447af8294a8d834fd648f5873c1b-dde407a595bc4824996c77265f055de4.jpg', 343507, 'jpg', 'upload/2021/07/9a9c447af8294a8d834fd648f5873c1b-dde407a595bc4824996c77265f055de4-thumbnail.jpg', 0, 1920);
INSERT INTO `attachments` VALUES (3, '2021-07-10 17:13:12.637000', '2021-07-10 17:13:12.637000', 'upload/2021/07/0c7c95c93e45457abc68c3dbdbca2076-ab653f2afc2748feaf06cf074d3b6bc9.jpg', 1200, 'image/jpeg', '0c7c95c93e45457abc68c3dbdbca2076', 'upload/2021/07/0c7c95c93e45457abc68c3dbdbca2076-ab653f2afc2748feaf06cf074d3b6bc9.jpg', 2313784, 'jpg', 'upload/2021/07/0c7c95c93e45457abc68c3dbdbca2076-ab653f2afc2748feaf06cf074d3b6bc9-thumbnail.jpg', 0, 1920);
INSERT INTO `attachments` VALUES (4, '2021-07-10 17:13:13.021000', '2021-07-10 17:13:13.021000', 'upload/2021/07/3a884ab2d57d41229faaa74aee5554a9-ad9051c394bb4bceb9d498a9680457b9.jpg', 3648, 'image/jpeg', '3a884ab2d57d41229faaa74aee5554a9', 'upload/2021/07/3a884ab2d57d41229faaa74aee5554a9-ad9051c394bb4bceb9d498a9680457b9.jpg', 2730389, 'jpg', 'upload/2021/07/3a884ab2d57d41229faaa74aee5554a9-ad9051c394bb4bceb9d498a9680457b9-thumbnail.jpg', 0, 5472);
INSERT INTO `attachments` VALUES (5, '2021-07-10 17:13:15.610000', '2021-07-10 17:13:15.610000', 'upload/2021/07/64eb5fc0880f11ebb6edd017c2d2eca2-eb753181da454f1499455bc8a19e146a.jpg', 2880, 'image/jpeg', '64eb5fc0880f11ebb6edd017c2d2eca2', 'upload/2021/07/64eb5fc0880f11ebb6edd017c2d2eca2-eb753181da454f1499455bc8a19e146a.jpg', 658615, 'jpg', 'upload/2021/07/64eb5fc0880f11ebb6edd017c2d2eca2-eb753181da454f1499455bc8a19e146a-thumbnail.jpg', 0, 5120);
INSERT INTO `attachments` VALUES (6, '2021-07-10 17:13:17.128000', '2021-07-10 17:13:17.128000', 'upload/2021/07/9ebe50feeb884a8b8d1ff8258a59721f-601cceb8ce4f4523b047d1cca2374c57.jpg', 2346, 'image/jpeg', '9ebe50feeb884a8b8d1ff8258a59721f', 'upload/2021/07/9ebe50feeb884a8b8d1ff8258a59721f-601cceb8ce4f4523b047d1cca2374c57.jpg', 1586638, 'jpg', 'upload/2021/07/9ebe50feeb884a8b8d1ff8258a59721f-601cceb8ce4f4523b047d1cca2374c57-thumbnail.jpg', 0, 4171);
INSERT INTO `attachments` VALUES (7, '2021-07-10 17:13:17.247000', '2021-07-10 17:13:17.247000', 'upload/2021/07/90a8f07a039d4adf959f025622713841-db1f6f4b6e7e4a9495e1d84694d250d3.jpg', 1333, 'image/jpeg', '90a8f07a039d4adf959f025622713841', 'upload/2021/07/90a8f07a039d4adf959f025622713841-db1f6f4b6e7e4a9495e1d84694d250d3.jpg', 207537, 'jpg', 'upload/2021/07/90a8f07a039d4adf959f025622713841-db1f6f4b6e7e4a9495e1d84694d250d3-thumbnail.jpg', 0, 2000);
INSERT INTO `attachments` VALUES (8, '2021-07-10 17:13:17.642000', '2021-07-10 17:13:17.642000', 'upload/2021/07/158d36c5fca94fcbabb8e615cac3b577-357ace85595443199acfb9fdd461e311.jpg', 1280, 'image/jpeg', '158d36c5fca94fcbabb8e615cac3b577', 'upload/2021/07/158d36c5fca94fcbabb8e615cac3b577-357ace85595443199acfb9fdd461e311.jpg', 892661, 'jpg', 'upload/2021/07/158d36c5fca94fcbabb8e615cac3b577-357ace85595443199acfb9fdd461e311-thumbnail.jpg', 0, 1920);
INSERT INTO `attachments` VALUES (9, '2021-07-10 17:13:22.193000', '2021-07-10 17:13:22.193000', 'upload/2021/07/389c0d6bb2fa419b8bd55edb29bf2f07-e8896c955a27443ba3d7ab9735261f29.jpg', 3240, 'image/jpeg', '389c0d6bb2fa419b8bd55edb29bf2f07', 'upload/2021/07/389c0d6bb2fa419b8bd55edb29bf2f07-e8896c955a27443ba3d7ab9735261f29.jpg', 2169896, 'jpg', 'upload/2021/07/389c0d6bb2fa419b8bd55edb29bf2f07-e8896c955a27443ba3d7ab9735261f29-thumbnail.jpg', 0, 5760);
INSERT INTO `attachments` VALUES (10, '2021-07-10 17:13:22.251000', '2021-07-10 17:13:22.251000', 'upload/2021/07/590e67809b6a484da7ed8448ef856918-08cff30122354fe694091e75a65ac412.jpg', 1387, 'image/jpeg', '590e67809b6a484da7ed8448ef856918', 'upload/2021/07/590e67809b6a484da7ed8448ef856918-08cff30122354fe694091e75a65ac412.jpg', 799760, 'jpg', 'upload/2021/07/590e67809b6a484da7ed8448ef856918-08cff30122354fe694091e75a65ac412-thumbnail.jpg', 0, 2048);
INSERT INTO `attachments` VALUES (11, '2021-07-10 17:13:23.706000', '2021-07-10 17:13:23.706000', 'upload/2021/07/8332cc10912c4e61b067900beaed5944-ab01b457ecf14a2196236b8f14e1cd25.jpg', 1080, 'image/jpeg', '8332cc10912c4e61b067900beaed5944', 'upload/2021/07/8332cc10912c4e61b067900beaed5944-ab01b457ecf14a2196236b8f14e1cd25.jpg', 349481, 'jpg', 'upload/2021/07/8332cc10912c4e61b067900beaed5944-ab01b457ecf14a2196236b8f14e1cd25-thumbnail.jpg', 0, 1920);
INSERT INTO `attachments` VALUES (12, '2021-07-10 17:13:24.905000', '2021-07-10 17:13:24.905000', 'upload/2021/07/5268d877a2a04864b36b4961ab793f4f-56aaefa743f049ae9fdcabe97c69f2f7.jpg', 1440, 'image/jpeg', '5268d877a2a04864b36b4961ab793f4f', 'upload/2021/07/5268d877a2a04864b36b4961ab793f4f-56aaefa743f049ae9fdcabe97c69f2f7.jpg', 1383522, 'jpg', 'upload/2021/07/5268d877a2a04864b36b4961ab793f4f-56aaefa743f049ae9fdcabe97c69f2f7-thumbnail.jpg', 0, 2560);
INSERT INTO `attachments` VALUES (13, '2021-07-10 17:13:25.047000', '2021-07-10 17:13:25.047000', 'upload/2021/07/0769f35296304ad99da32d89d50802fa-d1fb6bbff64e486eaeca21e7061639de.jpg', 3375, 'image/jpeg', '0769f35296304ad99da32d89d50802fa', 'upload/2021/07/0769f35296304ad99da32d89d50802fa-d1fb6bbff64e486eaeca21e7061639de.jpg', 8036764, 'jpg', 'upload/2021/07/0769f35296304ad99da32d89d50802fa-d1fb6bbff64e486eaeca21e7061639de-thumbnail.jpg', 0, 6000);
INSERT INTO `attachments` VALUES (14, '2021-07-10 17:13:27.606000', '2021-07-10 17:13:27.606000', 'upload/2021/07/b0fced9bf8864e88bb35b437b72f0c14-0ac2f3339ccf47849cfe34960859c7a5.jpg', 2183, 'image/jpeg', 'b0fced9bf8864e88bb35b437b72f0c14', 'upload/2021/07/b0fced9bf8864e88bb35b437b72f0c14-0ac2f3339ccf47849cfe34960859c7a5.jpg', 1928187, 'jpg', 'upload/2021/07/b0fced9bf8864e88bb35b437b72f0c14-0ac2f3339ccf47849cfe34960859c7a5-thumbnail.jpg', 0, 3840);
INSERT INTO `attachments` VALUES (15, '2021-07-10 17:13:31.669000', '2021-07-10 17:13:31.669000', 'upload/2021/07/533732a35f3e4629a88652c86f27ae69-fd7c29e27947451f88586851aaa063b8.jpg', 3069, 'image/jpeg', '533732a35f3e4629a88652c86f27ae69', 'upload/2021/07/533732a35f3e4629a88652c86f27ae69-fd7c29e27947451f88586851aaa063b8.jpg', 7331092, 'jpg', 'upload/2021/07/533732a35f3e4629a88652c86f27ae69-fd7c29e27947451f88586851aaa063b8-thumbnail.jpg', 0, 5456);
INSERT INTO `attachments` VALUES (16, '2021-07-10 17:13:33.400000', '2021-07-10 17:13:33.400000', 'upload/2021/07/b67b9cdf160d44cda3ff56d838b71a09-03164d0ce4ef4bfdac4f77c2ca0f5ef8.jpg', 1080, 'image/jpeg', 'b67b9cdf160d44cda3ff56d838b71a09', 'upload/2021/07/b67b9cdf160d44cda3ff56d838b71a09-03164d0ce4ef4bfdac4f77c2ca0f5ef8.jpg', 622042, 'jpg', 'upload/2021/07/b67b9cdf160d44cda3ff56d838b71a09-03164d0ce4ef4bfdac4f77c2ca0f5ef8-thumbnail.jpg', 0, 1920);
INSERT INTO `attachments` VALUES (18, '2021-07-10 17:13:38.767000', '2021-07-10 17:13:38.767000', 'upload/2021/07/9278fb72880e11ebb6edd017c2d2eca2-13fb15f48f0a4cc983a966294b1fdeb0.jpg', 2304, 'image/jpeg', '9278fb72880e11ebb6edd017c2d2eca2', 'upload/2021/07/9278fb72880e11ebb6edd017c2d2eca2-13fb15f48f0a4cc983a966294b1fdeb0.jpg', 7384828, 'jpg', 'upload/2021/07/9278fb72880e11ebb6edd017c2d2eca2-13fb15f48f0a4cc983a966294b1fdeb0-thumbnail.jpg', 0, 4096);
INSERT INTO `attachments` VALUES (19, '2021-07-10 17:14:07.725000', '2021-07-10 17:14:07.725000', 'upload/2021/07/bbc58c3d998d4f389fdae649334873f7-a17b4af7bb0e4e619704cff886003012.jpg', 2160, 'image/jpeg', 'bbc58c3d998d4f389fdae649334873f7', 'upload/2021/07/bbc58c3d998d4f389fdae649334873f7-a17b4af7bb0e4e619704cff886003012.jpg', 3362922, 'jpg', 'upload/2021/07/bbc58c3d998d4f389fdae649334873f7-a17b4af7bb0e4e619704cff886003012-thumbnail.jpg', 0, 3840);
INSERT INTO `attachments` VALUES (20, '2021-07-10 17:37:24.328000', '2021-07-10 17:37:24.328000', 'upload/2021/07/uugai.com_1625888011717-adbd519507674a7188a3539d1e6f284f.png', 180, 'image/png', 'uugai.com_1625888011717', 'upload/2021/07/uugai.com_1625888011717-adbd519507674a7188a3539d1e6f284f.png', 13965, 'png', 'upload/2021/07/uugai.com_1625888011717-adbd519507674a7188a3539d1e6f284f-thumbnail.png', 0, 609);
INSERT INTO `attachments` VALUES (21, '2021-07-10 17:58:22.237000', '2021-07-10 17:58:22.237000', 'upload/2021/07/uugai.com_1625911034567-6d56a9e0f58349aa9fb9f926f31294e4.png', 180, 'image/png', 'uugai.com_1625911034567', 'upload/2021/07/uugai.com_1625911034567-6d56a9e0f58349aa9fb9f926f31294e4.png', 19388, 'png', 'upload/2021/07/uugai.com_1625911034567-6d56a9e0f58349aa9fb9f926f31294e4-thumbnail.png', 0, 501);
INSERT INTO `attachments` VALUES (22, '2021-07-15 15:26:04.769000', '2021-07-15 15:26:04.769000', 'upload/2021/07/微信图片_20210715152541-a5767c56743c43de9c451a74bbe9f7a1.jpg', 430, 'image/jpeg', '微信图片_20210715152541', 'upload/2021/07/微信图片_20210715152541-a5767c56743c43de9c451a74bbe9f7a1.jpg', 39566, 'jpg', 'upload/2021/07/微信图片_20210715152541-a5767c56743c43de9c451a74bbe9f7a1-thumbnail.jpg', 0, 430);
INSERT INTO `attachments` VALUES (23, '2021-07-15 16:00:28.132000', '2021-07-15 16:00:28.132000', 'upload/2021/07/Mysql-dc32d268c2ed4b7d889952d728e32afd.jpg', 462, 'image/jpeg', 'Mysql', 'upload/2021/07/Mysql-dc32d268c2ed4b7d889952d728e32afd.jpg', 40296, 'jpg', 'upload/2021/07/Mysql-dc32d268c2ed4b7d889952d728e32afd-thumbnail.jpg', 0, 581);
INSERT INTO `attachments` VALUES (24, '2021-07-15 16:03:22.453000', '2021-07-15 16:03:22.453000', 'upload/2021/07/java-1f2896102e6442cfb99251d934549f1d.jpg', 417, 'image/jpeg', 'java', 'upload/2021/07/java-1f2896102e6442cfb99251d934549f1d.jpg', 10608, 'jpg', 'upload/2021/07/java-1f2896102e6442cfb99251d934549f1d-thumbnail.jpg', 0, 500);
INSERT INTO `attachments` VALUES (25, '2021-07-15 16:03:22.495000', '2021-07-15 16:03:22.495000', 'upload/2021/07/nginx-9066434aaf9b49b3a145046f629fcb30.jpg', 274, 'image/jpeg', 'nginx', 'upload/2021/07/nginx-9066434aaf9b49b3a145046f629fcb30.jpg', 11222, 'jpg', 'upload/2021/07/nginx-9066434aaf9b49b3a145046f629fcb30-thumbnail.jpg', 0, 577);
INSERT INTO `attachments` VALUES (26, '2021-07-15 16:03:22.602000', '2021-07-15 16:03:22.602000', 'upload/2021/07/spring-aecaa0c1b72d4933903d2f701ce13ad4.jpg', 446, 'image/jpeg', 'spring', 'upload/2021/07/spring-aecaa0c1b72d4933903d2f701ce13ad4.jpg', 80188, 'jpg', 'upload/2021/07/spring-aecaa0c1b72d4933903d2f701ce13ad4-thumbnail.jpg', 0, 851);
INSERT INTO `attachments` VALUES (27, '2021-07-15 16:03:24.995000', '2021-07-15 16:03:24.995000', 'upload/2021/07/springBoot-3a65ef63fda14d8f8012ce0463eb117e.jpg', 356, 'image/jpeg', 'springBoot', 'upload/2021/07/springBoot-3a65ef63fda14d8f8012ce0463eb117e.jpg', 14989, 'jpg', 'upload/2021/07/springBoot-3a65ef63fda14d8f8012ce0463eb117e-thumbnail.jpg', 0, 640);
INSERT INTO `attachments` VALUES (28, '2021-07-15 16:03:25.074000', '2021-07-15 16:03:25.074000', 'upload/2021/07/springCloud-4efab36f82e54168b2888913392a3a42.jpg', 350, 'image/jpeg', 'springCloud', 'upload/2021/07/springCloud-4efab36f82e54168b2888913392a3a42.jpg', 59662, 'jpg', 'upload/2021/07/springCloud-4efab36f82e54168b2888913392a3a42-thumbnail.jpg', 0, 1200);
INSERT INTO `attachments` VALUES (29, '2021-07-15 16:06:16.466000', '2021-07-15 16:06:16.466000', 'upload/2021/07/book-5676a0551f0346ba88e913f70056e1eb.jpg', 616, 'image/jpeg', 'book', 'upload/2021/07/book-5676a0551f0346ba88e913f70056e1eb.jpg', 87753, 'jpg', 'upload/2021/07/book-5676a0551f0346ba88e913f70056e1eb-thumbnail.jpg', 0, 1000);
INSERT INTO `attachments` VALUES (30, '2021-07-15 16:07:47.153000', '2021-07-15 16:07:47.153000', 'upload/2021/07/think-04141e3bf2cd4c46ad8e841acab4d5e2.jpg', 800, 'image/jpeg', 'think', 'upload/2021/07/think-04141e3bf2cd4c46ad8e841acab4d5e2.jpg', 395448, 'jpg', 'upload/2021/07/think-04141e3bf2cd4c46ad8e841acab4d5e2-thumbnail.jpg', 0, 800);
INSERT INTO `attachments` VALUES (31, '2021-07-15 16:10:08.335000', '2021-07-15 16:10:08.335000', 'upload/2021/07/分布式-eec3406c6d3f4665852b53b3073ee1a3.jpg', 630, 'image/jpeg', '分布式', 'upload/2021/07/分布式-eec3406c6d3f4665852b53b3073ee1a3.jpg', 112593, 'jpg', 'upload/2021/07/分布式-eec3406c6d3f4665852b53b3073ee1a3-thumbnail.jpg', 0, 1120);
INSERT INTO `attachments` VALUES (32, '2021-07-15 16:12:07.116000', '2021-07-15 16:12:07.116000', 'upload/2021/07/redis-4543abe43a284f36844d7398b09bfd8d.jpg', 320, 'image/jpeg', 'redis', 'upload/2021/07/redis-4543abe43a284f36844d7398b09bfd8d.jpg', 10561, 'jpg', 'upload/2021/07/redis-4543abe43a284f36844d7398b09bfd8d-thumbnail.jpg', 0, 800);
INSERT INTO `attachments` VALUES (33, '2021-07-15 16:12:07.131000', '2021-07-15 16:12:07.131000', 'upload/2021/07/elk-70f7f08255d54718a6ab330b78bee8cd.jpg', 320, 'image/jpeg', 'elk', 'upload/2021/07/elk-70f7f08255d54718a6ab330b78bee8cd.jpg', 26609, 'jpg', 'upload/2021/07/elk-70f7f08255d54718a6ab330b78bee8cd-thumbnail.jpg', 0, 833);
INSERT INTO `attachments` VALUES (34, '2021-07-15 16:12:07.169000', '2021-07-15 16:12:07.169000', 'upload/2021/07/mongodb-bf55564b2ac143e497c30556a003cf22.jpg', 189, 'image/jpeg', 'mongodb', 'upload/2021/07/mongodb-bf55564b2ac143e497c30556a003cf22.jpg', 13948, 'jpg', 'upload/2021/07/mongodb-bf55564b2ac143e497c30556a003cf22-thumbnail.jpg', 0, 614);
INSERT INTO `attachments` VALUES (35, '2021-07-15 16:14:31.402000', '2021-07-15 16:14:31.402000', 'upload/2021/07/network-d947f3deeb894422b99f786479c763a1.jpg', 691, 'image/jpeg', 'network', 'upload/2021/07/network-d947f3deeb894422b99f786479c763a1.jpg', 156420, 'jpg', 'upload/2021/07/network-d947f3deeb894422b99f786479c763a1-thumbnail.jpg', 0, 1022);
INSERT INTO `attachments` VALUES (36, '2021-07-15 16:16:05.099000', '2021-07-15 16:16:05.099000', 'upload/2021/07/jvm-a140ee38d28b44b2b1165c911cc7a973.jpg', 431, 'image/jpeg', 'jvm', 'upload/2021/07/jvm-a140ee38d28b44b2b1165c911cc7a973.jpg', 45504, 'jpg', 'upload/2021/07/jvm-a140ee38d28b44b2b1165c911cc7a973-thumbnail.jpg', 0, 650);
INSERT INTO `attachments` VALUES (37, '2021-07-15 16:17:09.999000', '2021-07-15 16:17:09.999000', 'upload/2021/07/algorithm-c8d6d2987a624ad697c522281b58206f.jpg', 1235, 'image/jpeg', 'algorithm', 'upload/2021/07/algorithm-c8d6d2987a624ad697c522281b58206f.jpg', 75332, 'jpg', 'upload/2021/07/algorithm-c8d6d2987a624ad697c522281b58206f-thumbnail.jpg', 0, 800);
INSERT INTO `attachments` VALUES (38, '2021-07-15 16:33:23.691000', '2021-07-15 16:33:23.691000', 'upload/2021/07/zfb-36a87f89460c4a358916c0455096af16.jpg', 1540, 'image/jpeg', 'zfb', 'upload/2021/07/zfb-36a87f89460c4a358916c0455096af16.jpg', 115960, 'jpg', 'upload/2021/07/zfb-36a87f89460c4a358916c0455096af16-thumbnail.jpg', 0, 990);
INSERT INTO `attachments` VALUES (39, '2021-07-15 16:33:33.363000', '2021-07-15 16:33:33.363000', 'upload/2021/07/wx-3823066061164580a921b2b580b0490b.jpg', 1481, 'image/jpeg', 'wx', 'upload/2021/07/wx-3823066061164580a921b2b580b0490b.jpg', 97222, 'jpg', 'upload/2021/07/wx-3823066061164580a921b2b580b0490b-thumbnail.jpg', 0, 1080);
INSERT INTO `attachments` VALUES (40, '2021-07-15 16:44:48.067000', '2021-07-15 16:44:48.067000', 'upload/2021/07/1233-c7ec4b3c0f35426d946522d107991663.jpg', 960, 'image/jpeg', '1233', 'upload/2021/07/1233-c7ec4b3c0f35426d946522d107991663.jpg', 34848, 'jpg', 'upload/2021/07/1233-c7ec4b3c0f35426d946522d107991663-thumbnail.jpg', 0, 640);
INSERT INTO `attachments` VALUES (41, '2021-07-15 16:44:48.131000', '2021-07-15 16:44:48.131000', 'upload/2021/07/1232-5bd23b397b60410e80caf0e263dcab32.jpg', 960, 'image/jpeg', '1232', 'upload/2021/07/1232-5bd23b397b60410e80caf0e263dcab32.jpg', 48485, 'jpg', 'upload/2021/07/1232-5bd23b397b60410e80caf0e263dcab32-thumbnail.jpg', 0, 640);
INSERT INTO `attachments` VALUES (42, '2021-07-15 16:44:48.329000', '2021-07-15 16:44:48.329000', 'upload/2021/07/1231-2dd8dff6a4de4d4ca60e3ef872426079.jpg', 960, 'image/jpeg', '1231', 'upload/2021/07/1231-2dd8dff6a4de4d4ca60e3ef872426079.jpg', 78475, 'jpg', 'upload/2021/07/1231-2dd8dff6a4de4d4ca60e3ef872426079-thumbnail.jpg', 0, 640);
INSERT INTO `attachments` VALUES (43, '2021-07-16 14:28:43.868000', '2021-07-16 14:28:43.868000', 'upload/2021/07/诫子书-1d1360fff3db444298b7c7deb52eb45a.jpg', 249, 'image/jpeg', '诫子书', 'upload/2021/07/诫子书-1d1360fff3db444298b7c7deb52eb45a.jpg', 30239, 'jpg', 'upload/2021/07/诫子书-1d1360fff3db444298b7c7deb52eb45a-thumbnail.jpg', 0, 640);
INSERT INTO `attachments` VALUES (44, '2021-07-16 14:39:03.567000', '2021-07-16 14:39:03.567000', 'upload/2021/07/333-1d5db3024f8a4c64ad370798c29981ce.jpg', 545, 'image/jpeg', '333', 'upload/2021/07/333-1d5db3024f8a4c64ad370798c29981ce.jpg', 87137, 'jpg', 'upload/2021/07/333-1d5db3024f8a4c64ad370798c29981ce-thumbnail.jpg', 0, 1024);
INSERT INTO `attachments` VALUES (45, '2021-07-16 17:21:11.574000', '2021-07-16 17:21:11.574000', 'upload/2021/07/Redis命令参考手册完整版-bb1d23a370114428b8ffee3feccfa0b4.pdf', 0, 'application/pdf', 'Redis命令参考手册完整版', 'upload/2021/07/Redis命令参考手册完整版-bb1d23a370114428b8ffee3feccfa0b4.pdf', 988310, 'pdf', 'upload/2021/07/Redis命令参考手册完整版-bb1d23a370114428b8ffee3feccfa0b4.pdf', 0, 0);
INSERT INTO `attachments` VALUES (46, '2021-07-18 11:14:22.589000', '2021-07-18 11:14:22.589000', 'upload/2021/07/java反射汇总-ae50a6f868d24a4b933d64208bf52cc0.md', 0, 'application/octet-stream', 'java反射汇总', 'upload/2021/07/java反射汇总-ae50a6f868d24a4b933d64208bf52cc0.md', 23861, 'md', 'upload/2021/07/java反射汇总-ae50a6f868d24a4b933d64208bf52cc0.md', 0, 0);
INSERT INTO `attachments` VALUES (47, '2021-07-18 22:06:14.980000', '2021-07-18 22:06:14.980000', 'upload/2021/07/满招损谦受益-1eecddd8749647f786fce2cfecb16fb2.jpg', 550, 'image/jpeg', '满招损谦受益', 'upload/2021/07/满招损谦受益-1eecddd8749647f786fce2cfecb16fb2.jpg', 47731, 'jpg', 'upload/2021/07/满招损谦受益-1eecddd8749647f786fce2cfecb16fb2-thumbnail.jpg', 0, 917);
INSERT INTO `attachments` VALUES (48, '2021-07-20 17:38:53.310000', '2021-07-20 17:38:53.310000', 'upload/2021/07/io-66cee29b43684e91b78f9552b13728c5.jpg', 354, 'image/jpeg', 'io', 'upload/2021/07/io-66cee29b43684e91b78f9552b13728c5.jpg', 8931, 'jpg', 'upload/2021/07/io-66cee29b43684e91b78f9552b13728c5-thumbnail.jpg', 0, 600);
INSERT INTO `attachments` VALUES (49, '2021-07-26 16:29:43.761000', '2021-07-26 16:29:43.761000', 'upload/2021/07/method-086361107cad48d29f91b38fda660691.png', 557, 'image/png', 'method', 'upload/2021/07/method-086361107cad48d29f91b38fda660691.png', 73905, 'png', 'upload/2021/07/method-086361107cad48d29f91b38fda660691-thumbnail.png', 0, 1296);
INSERT INTO `attachments` VALUES (50, '2021-07-26 16:29:43.841000', '2021-07-26 16:29:43.841000', 'upload/2021/07/simple-d8e257769191469196280ab8af913ac6.png', 450, 'image/png', 'simple', 'upload/2021/07/simple-d8e257769191469196280ab8af913ac6.png', 41099, 'png', 'upload/2021/07/simple-d8e257769191469196280ab8af913ac6-thumbnail.png', 0, 891);
INSERT INTO `attachments` VALUES (51, '2021-07-26 16:29:44.455000', '2021-07-26 16:29:44.455000', 'upload/2021/07/abstarct-d3884259a2fb47c5b2c37a06885be0a0.png', 812, 'image/png', 'abstarct', 'upload/2021/07/abstarct-d3884259a2fb47c5b2c37a06885be0a0.png', 108075, 'png', 'upload/2021/07/abstarct-d3884259a2fb47c5b2c37a06885be0a0-thumbnail.png', 0, 1325);
INSERT INTO `attachments` VALUES (52, '2021-07-26 16:32:29.118000', '2021-07-26 16:32:29.118000', 'upload/2021/07/js-2dfd89c568a245ae84d1007e3f0de277.jpg', 966, 'image/jpeg', 'js', 'upload/2021/07/js-2dfd89c568a245ae84d1007e3f0de277.jpg', 44700, 'jpg', 'upload/2021/07/js-2dfd89c568a245ae84d1007e3f0de277-thumbnail.jpg', 0, 749);
INSERT INTO `attachments` VALUES (53, '2021-07-28 11:50:16.208000', '2021-07-28 11:50:16.208000', 'upload/2021/07/builder-4a959755902c44c3806c93059ce49ee1.png', 411, 'image/png', 'builder', 'upload/2021/07/builder-4a959755902c44c3806c93059ce49ee1.png', 126034, 'png', 'upload/2021/07/builder-4a959755902c44c3806c93059ce49ee1-thumbnail.png', 0, 871);
INSERT INTO `attachments` VALUES (54, '2021-07-28 11:55:35.905000', '2021-07-28 11:55:35.905000', 'upload/2021/07/2-56681021634c46079bec709fe6998f5d.jpg', 433, 'image/jpeg', '2', 'upload/2021/07/2-56681021634c46079bec709fe6998f5d.jpg', 34049, 'jpg', 'upload/2021/07/2-56681021634c46079bec709fe6998f5d-thumbnail.jpg', 0, 650);
INSERT INTO `attachments` VALUES (55, '2021-07-28 11:55:41.473000', '2021-07-28 11:55:41.473000', 'upload/2021/07/1-114e68aabba340709236ec5f7857b20c.jpg', 1244, 'image/jpeg', '1', 'upload/2021/07/1-114e68aabba340709236ec5f7857b20c.jpg', 514042, 'jpg', 'upload/2021/07/1-114e68aabba340709236ec5f7857b20c-thumbnail.jpg', 0, 700);
INSERT INTO `attachments` VALUES (56, '2021-07-28 11:55:41.728000', '2021-07-28 11:55:41.728000', 'upload/2021/07/3-0b2d2613208c4822982a717ffaca50e2.jpg', 1080, 'image/jpeg', '3', 'upload/2021/07/3-0b2d2613208c4822982a717ffaca50e2.jpg', 291055, 'jpg', 'upload/2021/07/3-0b2d2613208c4822982a717ffaca50e2-thumbnail.jpg', 0, 1920);
INSERT INTO `attachments` VALUES (57, '2021-07-28 11:55:53.308000', '2021-07-28 11:55:53.308000', 'upload/2021/07/3-87c562f40d3d46829c1d5261ffc365bf.jpg', 1080, 'image/jpeg', '3', 'upload/2021/07/3-87c562f40d3d46829c1d5261ffc365bf.jpg', 291055, 'jpg', 'upload/2021/07/3-87c562f40d3d46829c1d5261ffc365bf-thumbnail.jpg', 0, 1920);
INSERT INTO `attachments` VALUES (58, '2021-07-28 11:55:56.027000', '2021-07-28 11:55:56.027000', 'upload/2021/07/1-4aa9a6a2463f46b4aaa211229cde1d07.jpg', 1244, 'image/jpeg', '1', 'upload/2021/07/1-4aa9a6a2463f46b4aaa211229cde1d07.jpg', 514042, 'jpg', 'upload/2021/07/1-4aa9a6a2463f46b4aaa211229cde1d07-thumbnail.jpg', 0, 700);
INSERT INTO `attachments` VALUES (59, '2021-08-03 18:09:37.273000', '2021-08-03 18:09:37.273000', 'upload/2021/08/2-eb8a8f2c531342a6bf0499d2fb08b7f8.png', 123, 'image/png', '2', 'upload/2021/08/2-eb8a8f2c531342a6bf0499d2fb08b7f8.png', 28104, 'png', 'upload/2021/08/2-eb8a8f2c531342a6bf0499d2fb08b7f8-thumbnail.png', 0, 822);
INSERT INTO `attachments` VALUES (60, '2021-08-03 18:09:37.276000', '2021-08-03 18:09:37.276000', 'upload/2021/08/1-f28f4eed2f634d81af5ac996e84d35c5.png', 136, 'image/png', '1', 'upload/2021/08/1-f28f4eed2f634d81af5ac996e84d35c5.png', 27992, 'png', 'upload/2021/08/1-f28f4eed2f634d81af5ac996e84d35c5-thumbnail.png', 0, 840);
INSERT INTO `attachments` VALUES (61, '2021-08-03 18:09:37.282000', '2021-08-03 18:09:37.282000', 'upload/2021/08/3-84726687c91046698f7a367747b2b0ce.png', 379, 'image/png', '3', 'upload/2021/08/3-84726687c91046698f7a367747b2b0ce.png', 71219, 'png', 'upload/2021/08/3-84726687c91046698f7a367747b2b0ce-thumbnail.png', 0, 879);
INSERT INTO `attachments` VALUES (62, '2021-08-03 18:09:39.308000', '2021-08-03 18:09:39.308000', 'upload/2021/08/6-e1b3cd4cecd242799d6b9e2e5ef6311c.png', 199, 'image/png', '6', 'upload/2021/08/6-e1b3cd4cecd242799d6b9e2e5ef6311c.png', 25371, 'png', 'upload/2021/08/6-e1b3cd4cecd242799d6b9e2e5ef6311c-thumbnail.png', 0, 868);
INSERT INTO `attachments` VALUES (63, '2021-08-03 18:09:39.357000', '2021-08-03 18:09:39.357000', 'upload/2021/08/4-b9d7bc24cf624daab673b78798da7037.png', 488, 'image/png', '4', 'upload/2021/08/4-b9d7bc24cf624daab673b78798da7037.png', 89956, 'png', 'upload/2021/08/4-b9d7bc24cf624daab673b78798da7037-thumbnail.png', 0, 950);
INSERT INTO `attachments` VALUES (64, '2021-08-03 18:09:39.773000', '2021-08-03 18:09:39.773000', 'upload/2021/08/5-21e06042025b49af89f24279fb88810f.png', 224, 'image/png', '5', 'upload/2021/08/5-21e06042025b49af89f24279fb88810f.png', 47848, 'png', 'upload/2021/08/5-21e06042025b49af89f24279fb88810f-thumbnail.png', 0, 869);
INSERT INTO `attachments` VALUES (65, '2021-08-03 18:09:42.026000', '2021-08-03 18:09:42.026000', 'upload/2021/08/7-c7f1498e90274d33bb2c024068dbf147.png', 455, 'image/png', '7', 'upload/2021/08/7-c7f1498e90274d33bb2c024068dbf147.png', 123577, 'png', 'upload/2021/08/7-c7f1498e90274d33bb2c024068dbf147-thumbnail.png', 0, 846);
INSERT INTO `attachments` VALUES (66, '2021-08-03 18:09:43.422000', '2021-08-03 18:09:43.422000', 'upload/2021/08/8-14b247df73c641d792a18b5a87031192.png', 637, 'image/png', '8', 'upload/2021/08/8-14b247df73c641d792a18b5a87031192.png', 208882, 'png', 'upload/2021/08/8-14b247df73c641d792a18b5a87031192-thumbnail.png', 0, 925);
INSERT INTO `attachments` VALUES (67, '2021-08-03 18:19:37.040000', '2021-08-03 18:19:37.040000', 'upload/2021/08/11-f51bff67cef14cb0a8a29b025fc4156d.webp', 0, 'image/webp', '11', 'upload/2021/08/11-f51bff67cef14cb0a8a29b025fc4156d.webp', 8380, 'webp', 'upload/2021/08/11-f51bff67cef14cb0a8a29b025fc4156d.webp', 0, 0);

-- ----------------------------
-- Table structure for categories
-- ----------------------------
DROP TABLE IF EXISTS `categories`;
CREATE TABLE `categories`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `description` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `parent_id` int(0) NULL DEFAULT 0,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `slug` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `slug_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `thumbnail` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `UK_oul14ho7bctbefv8jywp5v3i2`(`slug`) USING BTREE,
  INDEX `categories_name`(`name`) USING BTREE,
  INDEX `categories_parent_id`(`parent_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of categories
-- ----------------------------
INSERT INTO `categories` VALUES (1, '2021-07-10 17:12:16.721000', '2021-07-15 15:57:44.141000', '不积跬步无以至千里，不积小流无以成江海。', '软工专业知识', 3, NULL, 'softwork', NULL, 'http://120.77.145.59:8090/upload/2021/07/389c0d6bb2fa419b8bd55edb29bf2f07-e8896c955a27443ba3d7ab9735261f29.jpg');
INSERT INTO `categories` VALUES (2, '2021-07-15 15:08:32.490000', '2021-07-15 15:55:29.814000', '宠辱不惊，闲看书卷奥秘，去留无意，漫随书卷人生。阅书，读己，追随心灵的净土!世界读书日，我们一起翻开手中的书……', '书中自有黄金屋', 3, NULL, 'book', NULL, 'http://120.77.145.59:8090/upload/2021/07/3a884ab2d57d41229faaa74aee5554a9-ad9051c394bb4bceb9d498a9680457b9.jpg');
INSERT INTO `categories` VALUES (3, '2021-07-15 15:10:18.951000', '2021-07-15 15:12:25.839000', '文章分类', '文章', 0, NULL, 'default', NULL, 'http://120.77.145.59:8090/upload/2021/07/9a9c447af8294a8d834fd648f5873c1b-dde407a595bc4824996c77265f055de4.jpg');
INSERT INTO `categories` VALUES (4, '2021-07-15 15:44:19.980000', '2021-07-15 15:44:19.980000', '生活随想', '随想', 3, NULL, 'whimsy', NULL, 'http://120.77.145.59:8090/upload/2021/07/590e67809b6a484da7ed8448ef856918-08cff30122354fe694091e75a65ac412.jpg');
INSERT INTO `categories` VALUES (5, '2021-07-15 15:48:27.384000', '2021-07-15 15:48:27.384000', '常用链接', '链接', 0, NULL, 'links', NULL, 'http://120.77.145.59:8090/upload/2021/07/533732a35f3e4629a88652c86f27ae69-fd7c29e27947451f88586851aaa063b8.jpg');

-- ----------------------------
-- Table structure for comment_black_list
-- ----------------------------
DROP TABLE IF EXISTS `comment_black_list`;
CREATE TABLE `comment_black_list`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `ban_time` datetime(6) NULL DEFAULT NULL,
  `ip_address` varchar(127) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment_black_list
-- ----------------------------

-- ----------------------------
-- Table structure for comments
-- ----------------------------
DROP TABLE IF EXISTS `comments`;
CREATE TABLE `comments`  (
  `type` int(0) NOT NULL DEFAULT 0,
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `allow_notification` bit(1) NULL DEFAULT b'1',
  `author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `author_url` varchar(511) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `content` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `gravatar_md5` varchar(127) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `ip_address` varchar(127) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `is_admin` bit(1) NULL DEFAULT b'0',
  `parent_id` bigint(0) NULL DEFAULT 0,
  `post_id` int(0) NOT NULL,
  `status` int(0) NULL DEFAULT 1,
  `top_priority` int(0) NULL DEFAULT 0,
  `user_agent` varchar(511) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `comments_post_id`(`post_id`) USING BTREE,
  INDEX `comments_type_status`(`type`, `status`) USING BTREE,
  INDEX `comments_parent_id`(`parent_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comments
-- ----------------------------
INSERT INTO `comments` VALUES (0, 2, '2021-07-16 17:10:57.310000', '2021-07-16 17:10:57.310000', b'1', '自律而行', '', '加油', '1518856995@qq.com', '6a5e94275a34ecfb90cdc77728ba2a56', '117.28.135.128', b'0', 0, 3, 1, NULL, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36');
INSERT INTO `comments` VALUES (0, 3, '2021-07-16 17:11:41.961000', '2021-07-16 17:11:41.961000', b'1', '自律而行', '', '共勉！！！', '1518856995@qq.com', '6a5e94275a34ecfb90cdc77728ba2a56', '117.28.135.128', b'0', 0, 3, 0, NULL, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36');

-- ----------------------------
-- Table structure for flyway_schema_history
-- ----------------------------
DROP TABLE IF EXISTS `flyway_schema_history`;
CREATE TABLE `flyway_schema_history`  (
  `installed_rank` int(0) NOT NULL,
  `version` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `description` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `type` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `script` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `checksum` int(0) NULL DEFAULT NULL,
  `installed_by` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `installed_on` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `execution_time` int(0) NOT NULL,
  `success` tinyint(1) NOT NULL,
  PRIMARY KEY (`installed_rank`) USING BTREE,
  INDEX `flyway_schema_history_s_idx`(`success`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of flyway_schema_history
-- ----------------------------
INSERT INTO `flyway_schema_history` VALUES (1, '1', '<< Flyway Baseline >>', 'BASELINE', '<< Flyway Baseline >>', NULL, 'root', '2021-07-10 09:11:36', 0, 1);
INSERT INTO `flyway_schema_history` VALUES (2, '2', 'migrate 1.2.0-beta.1 to 1.2.0-beta.2', 'SQL', 'V2__migrate_1.2.0-beta.1_to_1.2.0-beta.2.sql', 623818472, 'root', '2021-07-10 09:11:37', 668, 1);
INSERT INTO `flyway_schema_history` VALUES (3, '3', 'migrate 1.3.0-beta.1 to 1.3.0-beta.2', 'SQL', 'V3__migrate_1.3.0-beta.1_to_1.3.0-beta.2.sql', -417975340, 'root', '2021-07-10 09:11:38', 677, 1);
INSERT INTO `flyway_schema_history` VALUES (4, '4', 'migrate 1.3.0-beta.2 to 1.3.0-beta.3', 'SQL', 'V4__migrate_1.3.0-beta.2_to_1.3.0-beta.3.sql', 589261839, 'root', '2021-07-10 09:11:38', 75, 1);

-- ----------------------------
-- Table structure for journals
-- ----------------------------
DROP TABLE IF EXISTS `journals`;
CREATE TABLE `journals`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `likes` bigint(0) NULL DEFAULT 0,
  `source_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `type` int(0) NULL DEFAULT 0,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of journals
-- ----------------------------

-- ----------------------------
-- Table structure for links
-- ----------------------------
DROP TABLE IF EXISTS `links`;
CREATE TABLE `links`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `logo` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `priority` int(0) NULL DEFAULT 0,
  `team` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `url` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `links_name`(`name`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of links
-- ----------------------------

-- ----------------------------
-- Table structure for logs
-- ----------------------------
DROP TABLE IF EXISTS `logs`;
CREATE TABLE `logs`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `content` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `ip_address` varchar(127) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `log_key` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `type` int(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `logs_create_time`(`create_time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 65 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of logs
-- ----------------------------
INSERT INTO `logs` VALUES (1, '2021-07-10 17:12:18.061000', '2021-07-10 17:12:18.061000', 'Hello Halo', '117.28.135.128', '1', 5);
INSERT INTO `logs` VALUES (2, '2021-07-10 17:12:18.172000', '2021-07-10 17:12:18.172000', '关于页面', '117.28.135.128', '2', 50);
INSERT INTO `logs` VALUES (3, '2021-07-10 17:12:18.616000', '2021-07-10 17:12:18.616000', '博客已成功初始化', '117.28.135.128', '1', 0);
INSERT INTO `logs` VALUES (4, '2021-07-10 17:12:30.091000', '2021-07-10 17:12:30.091000', 'admin', '117.28.135.128', 'admin', 25);
INSERT INTO `logs` VALUES (5, '2021-07-10 17:22:05.826000', '2021-07-10 17:22:05.826000', 'admin', '117.28.135.128', 'admin', 25);
INSERT INTO `logs` VALUES (6, '2021-07-10 17:57:42.071000', '2021-07-10 17:57:42.071000', 'admin', '117.28.135.128', 'admin', 25);
INSERT INTO `logs` VALUES (7, '2021-07-14 11:36:22.446000', '2021-07-14 11:36:22.446000', 'admin', '117.28.135.128', 'admin', 35);
INSERT INTO `logs` VALUES (8, '2021-07-14 11:36:35.719000', '2021-07-14 11:36:35.719000', 'admin', '117.28.135.128', 'admin', 25);
INSERT INTO `logs` VALUES (9, '2021-07-14 11:39:06.123000', '2021-07-14 11:39:06.123000', 'admin', '117.28.135.128', '1', 45);
INSERT INTO `logs` VALUES (10, '2021-07-14 11:39:35.469000', '2021-07-14 11:39:35.469000', 'admin', '117.28.135.128', '1', 45);
INSERT INTO `logs` VALUES (11, '2021-07-15 14:12:34.287000', '2021-07-15 14:12:34.287000', 'admin', '117.28.135.128', 'admin', 35);
INSERT INTO `logs` VALUES (12, '2021-07-15 14:12:41.747000', '2021-07-15 14:12:41.747000', 'admin', '117.28.135.128', 'admin', 35);
INSERT INTO `logs` VALUES (13, '2021-07-15 14:12:53.665000', '2021-07-15 14:12:53.665000', 'admin', '117.28.135.128', 'admin', 25);
INSERT INTO `logs` VALUES (14, '2021-07-16 14:06:46.139000', '2021-07-16 14:06:46.139000', 'admin', '117.28.135.128', 'admin', 35);
INSERT INTO `logs` VALUES (15, '2021-07-16 14:06:53.583000', '2021-07-16 14:06:53.583000', 'admin', '117.28.135.128', 'admin', 25);
INSERT INTO `logs` VALUES (16, '2021-07-16 14:36:29.576000', '2021-07-16 14:36:29.576000', '建站随想', '117.28.135.128', '3', 5);
INSERT INTO `logs` VALUES (17, '2021-07-16 14:36:58.126000', '2021-07-16 14:36:58.126000', 'Hello Halo', '117.28.135.128', '1', 20);
INSERT INTO `logs` VALUES (18, '2021-07-16 14:39:44.801000', '2021-07-16 14:39:44.801000', '建站随想', '117.28.135.128', '3', 15);
INSERT INTO `logs` VALUES (19, '2021-07-16 14:44:05.266000', '2021-07-16 14:44:05.266000', 'admin', '117.28.135.128', '1', 45);
INSERT INTO `logs` VALUES (20, '2021-07-16 15:03:46.012000', '2021-07-16 15:03:46.012000', '关于页面', '117.28.135.128', '2', 55);
INSERT INTO `logs` VALUES (21, '2021-07-16 17:05:11.349000', '2021-07-16 17:05:11.349000', 'admin', '117.28.135.128', 'admin', 35);
INSERT INTO `logs` VALUES (22, '2021-07-16 17:05:25.825000', '2021-07-16 17:05:25.825000', '做个有用的人', '117.28.135.128', 'admin', 25);
INSERT INTO `logs` VALUES (23, '2021-07-17 11:44:21.444000', '2021-07-17 11:44:21.444000', 'admin', '183.250.29.170', 'admin', 35);
INSERT INTO `logs` VALUES (24, '2021-07-17 11:44:26.553000', '2021-07-17 11:44:26.553000', '做个有用的人', '183.250.29.170', 'admin', 25);
INSERT INTO `logs` VALUES (25, '2021-07-18 11:13:46.384000', '2021-07-18 11:13:46.384000', 'java反射汇总.md', '183.250.29.170', '4', 5);
INSERT INTO `logs` VALUES (26, '2021-07-18 11:16:36.506000', '2021-07-18 11:16:36.506000', '2021-07-18-11-16-34', '183.250.29.170', '5', 5);
INSERT INTO `logs` VALUES (27, '2021-07-18 11:17:37.905000', '2021-07-18 11:17:37.905000', '2021-07-18-11-16-34', '183.250.29.170', '5', 15);
INSERT INTO `logs` VALUES (28, '2021-07-18 11:18:54.460000', '2021-07-18 11:18:54.460000', '2021-07-18-11-16-34', '183.250.29.170', '5', 15);
INSERT INTO `logs` VALUES (29, '2021-07-18 11:20:09.572000', '2021-07-18 11:20:09.572000', '2021-07-18-11-16-34', '183.250.29.170', '5', 15);
INSERT INTO `logs` VALUES (30, '2021-07-18 11:22:17.530000', '2021-07-18 11:22:17.530000', '2021-07-18-11-16-34', '183.250.29.170', '5', 15);
INSERT INTO `logs` VALUES (31, '2021-07-18 11:24:03.836000', '2021-07-18 11:24:03.836000', 'Java反射汇总', '183.250.29.170', '5', 15);
INSERT INTO `logs` VALUES (32, '2021-07-18 11:25:16.807000', '2021-07-18 11:25:16.807000', 'java反射汇总.md', '183.250.29.170', '4', 20);
INSERT INTO `logs` VALUES (33, '2021-07-18 22:01:25.540000', '2021-07-18 22:01:25.540000', 'admin', '183.250.29.170', 'admin', 35);
INSERT INTO `logs` VALUES (34, '2021-07-18 22:01:30.920000', '2021-07-18 22:01:30.920000', 'admin', '183.250.29.170', 'admin', 35);
INSERT INTO `logs` VALUES (35, '2021-07-18 22:01:36.154000', '2021-07-18 22:01:36.154000', '做个有用的人', '183.250.29.170', 'admin', 25);
INSERT INTO `logs` VALUES (36, '2021-07-18 22:06:01.267000', '2021-07-18 22:06:01.267000', '做个有用的人', '183.250.29.170', 'admin', 25);
INSERT INTO `logs` VALUES (37, '2021-07-18 22:08:06.815000', '2021-07-18 22:08:06.815000', '满招损，谦受益', '183.250.29.170', '6', 5);
INSERT INTO `logs` VALUES (38, '2021-07-18 22:08:51.237000', '2021-07-18 22:08:51.237000', '满招损，谦受益', '183.250.29.170', '6', 15);
INSERT INTO `logs` VALUES (39, '2021-07-20 11:19:06.972000', '2021-07-20 11:19:06.972000', 'admin', '117.28.132.84', 'admin', 35);
INSERT INTO `logs` VALUES (40, '2021-07-20 11:19:13.769000', '2021-07-20 11:19:13.769000', '做个有用的人', '117.28.132.84', 'admin', 25);
INSERT INTO `logs` VALUES (41, '2021-07-20 11:21:27.813000', '2021-07-20 11:21:27.813000', 'Java三种代理模式', '117.28.132.84', '7', 5);
INSERT INTO `logs` VALUES (42, '2021-07-20 11:22:59.558000', '2021-07-20 11:22:59.558000', 'Java三种代理模式', '117.28.132.84', '7', 15);
INSERT INTO `logs` VALUES (43, '2021-07-20 11:24:57.525000', '2021-07-20 11:24:57.525000', 'Java三种代理模式', '117.28.132.84', '7', 15);
INSERT INTO `logs` VALUES (44, '2021-07-20 11:25:49.082000', '2021-07-20 11:25:49.082000', 'Java三种代理模式', '117.28.132.84', '7', 15);
INSERT INTO `logs` VALUES (45, '2021-07-20 11:26:48.898000', '2021-07-20 11:26:48.898000', 'Java三种代理模式', '117.28.132.84', '7', 15);
INSERT INTO `logs` VALUES (46, '2021-07-20 11:35:25.671000', '2021-07-20 11:35:25.671000', 'Java三种代理模式', '117.28.132.84', '7', 15);
INSERT INTO `logs` VALUES (47, '2021-07-20 11:36:01.618000', '2021-07-20 11:36:01.618000', 'Java三种代理模式', '117.28.132.84', '7', 15);
INSERT INTO `logs` VALUES (48, '2021-07-20 17:35:56.899000', '2021-07-20 17:35:56.899000', 'IO', '117.28.132.84', '8', 5);
INSERT INTO `logs` VALUES (49, '2021-07-20 17:39:00.566000', '2021-07-20 17:39:00.566000', 'IO', '117.28.132.84', '8', 15);
INSERT INTO `logs` VALUES (50, '2021-07-24 12:33:47.357000', '2021-07-24 12:33:47.357000', '做个有用的人', '183.250.29.170', 'admin', 25);
INSERT INTO `logs` VALUES (51, '2021-07-24 12:38:34.832000', '2021-07-24 12:38:34.832000', '致自己', '183.250.29.170', '9', 5);
INSERT INTO `logs` VALUES (52, '2021-07-26 16:28:17.380000', '2021-07-26 16:28:17.380000', '做个有用的人', '117.28.135.81', 'admin', 25);
INSERT INTO `logs` VALUES (53, '2021-07-26 16:32:35.266000', '2021-07-26 16:32:35.266000', '工厂模式', '117.28.135.81', '10', 5);
INSERT INTO `logs` VALUES (54, '2021-07-26 22:44:06.140000', '2021-07-26 22:44:06.140000', '做个有用的人', '223.104.48.171', 'admin', 25);
INSERT INTO `logs` VALUES (55, '2021-07-28 11:49:28.482000', '2021-07-28 11:49:28.482000', '做个有用的人', '117.28.135.81', 'admin', 25);
INSERT INTO `logs` VALUES (56, '2021-07-28 11:53:07.879000', '2021-07-28 11:53:07.879000', '建造者模式', '117.28.135.81', '11', 5);
INSERT INTO `logs` VALUES (57, '2021-07-28 11:53:59.092000', '2021-07-28 11:53:59.092000', '建造者模式', '117.28.135.81', '11', 15);
INSERT INTO `logs` VALUES (58, '2021-07-28 11:54:08.395000', '2021-07-28 11:54:08.395000', '建造者模式', '117.28.135.81', '11', 15);
INSERT INTO `logs` VALUES (59, '2021-07-28 11:56:14.884000', '2021-07-28 11:56:14.884000', '建造者模式', '117.28.135.81', '11', 15);
INSERT INTO `logs` VALUES (60, '2021-07-31 09:37:00.008000', '2021-07-31 09:37:00.008000', '做个有用的人', '112.51.46.70', 'admin', 25);
INSERT INTO `logs` VALUES (61, '2021-08-03 18:07:23.606000', '2021-08-03 18:07:23.606000', '做个有用的人', '117.30.73.9', 'admin', 25);
INSERT INTO `logs` VALUES (62, '2021-08-03 18:19:47.415000', '2021-08-03 18:19:47.415000', 'Mysql面试解读笔记', '117.30.73.9', '12', 5);
INSERT INTO `logs` VALUES (63, '2021-08-04 10:22:51.555000', '2021-08-04 10:22:51.555000', 'Mysql链接数查看', '117.30.73.9', '13', 5);
INSERT INTO `logs` VALUES (64, '2021-08-15 22:14:17.085000', '2021-08-15 22:14:17.085000', 'admin', '183.250.29.69', 'admin', 35);
INSERT INTO `logs` VALUES (65, '2021-08-15 22:14:25.000000', '2021-08-15 22:14:25.000000', '做个有用的人', '183.250.29.69', 'admin', 25);

-- ----------------------------
-- Table structure for menus
-- ----------------------------
DROP TABLE IF EXISTS `menus`;
CREATE TABLE `menus`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `icon` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `parent_id` int(0) NULL DEFAULT 0,
  `priority` int(0) NULL DEFAULT 0,
  `target` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT '_self',
  `team` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `url` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `menus_parent_id`(`parent_id`) USING BTREE,
  INDEX `menus_name`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of menus
-- ----------------------------
INSERT INTO `menus` VALUES (1, '2021-07-10 17:12:18.421000', '2021-07-10 17:12:18.421000', '', '首页', 0, 0, '_self', '', '/');
INSERT INTO `menus` VALUES (4, '2021-07-10 17:12:18.580000', '2021-07-10 17:12:18.580000', '', '关于我', 0, 10, '_self', '', '/s/about');
INSERT INTO `menus` VALUES (14, '2021-07-15 15:32:26.186000', '2021-07-15 15:32:26.186000', '', '文章', 0, 1, '_self', '', '/archives');
INSERT INTO `menus` VALUES (15, '2021-07-15 15:33:03.635000', '2021-07-15 15:33:03.635000', '', '读书', 14, 3, '_self', '', 'http://supren.top/categories/book');
INSERT INTO `menus` VALUES (16, '2021-07-15 15:33:03.641000', '2021-07-15 15:33:03.641000', '', '软工', 14, 4, '_self', '', 'http://supren.top/categories/softwork');
INSERT INTO `menus` VALUES (17, '2021-07-15 15:39:59.487000', '2021-07-15 15:39:59.487000', '', '图库', 0, 5, '_self', '', 'http://supren.top/photos');
INSERT INTO `menus` VALUES (18, '2021-07-15 15:46:04.597000', '2021-07-15 15:46:04.597000', '', '随想', 14, 6, '_self', '', 'http://supren.top/categories/whimsy');
INSERT INTO `menus` VALUES (19, '2021-07-15 15:48:39.378000', '2021-07-15 15:48:39.378000', '', '链接', 0, 7, '_self', '', 'http://supren.top/categories/links');

-- ----------------------------
-- Table structure for metas
-- ----------------------------
DROP TABLE IF EXISTS `metas`;
CREATE TABLE `metas`  (
  `type` int(0) NOT NULL DEFAULT 0,
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `meta_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `post_id` int(0) NOT NULL,
  `meta_value` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of metas
-- ----------------------------

-- ----------------------------
-- Table structure for options
-- ----------------------------
DROP TABLE IF EXISTS `options`;
CREATE TABLE `options`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `option_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `type` int(0) NULL DEFAULT 0,
  `option_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 64 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of options
-- ----------------------------
INSERT INTO `options` VALUES (1, '2021-07-10 17:12:14.956000', '2021-07-10 17:12:14.956000', 'birthday', 0, '1625908334898');
INSERT INTO `options` VALUES (2, '2021-07-10 17:12:15.039000', '2021-07-10 17:12:15.039000', 'blog_url', 0, 'http://supren.top');
INSERT INTO `options` VALUES (3, '2021-07-10 17:12:15.046000', '2021-07-10 17:12:15.046000', 'blog_locale', 0, 'zh');
INSERT INTO `options` VALUES (4, '2021-07-10 17:12:15.062000', '2021-07-10 17:12:15.062000', 'is_installed', 0, 'true');
INSERT INTO `options` VALUES (5, '2021-07-10 17:12:15.070000', '2021-07-10 17:12:15.070000', 'blog_title', 0, '小学生的博客');
INSERT INTO `options` VALUES (6, '2021-07-10 17:15:16.055000', '2021-07-15 15:21:25.299000', 'theme', 0, 'LIlGG_Sakura');
INSERT INTO `options` VALUES (7, '2021-07-10 17:38:41.878000', '2021-07-10 17:38:41.878000', 'gravatar_source', 0, '//gravatar.com/avatar/');
INSERT INTO `options` VALUES (8, '2021-07-10 17:38:41.885000', '2021-07-10 17:38:41.885000', 'post_index_sort', 0, 'createTime');
INSERT INTO `options` VALUES (9, '2021-07-10 17:38:41.896000', '2021-07-10 17:38:41.896000', 'email_ssl_port', 0, '465');
INSERT INTO `options` VALUES (10, '2021-07-10 17:38:41.904000', '2021-07-10 17:38:41.904000', 'oss_qiniu_zone', 0, 'auto');
INSERT INTO `options` VALUES (11, '2021-07-10 17:38:41.912000', '2021-07-10 17:38:41.912000', 'global_absolute_path_enabled', 0, 'true');
INSERT INTO `options` VALUES (12, '2021-07-10 17:38:41.921000', '2021-07-10 17:38:41.921000', 'recycled_post_retention_time', 0, '30');
INSERT INTO `options` VALUES (13, '2021-07-10 17:38:41.927000', '2021-07-10 17:46:41.382000', 'email_enabled', 0, 'true');
INSERT INTO `options` VALUES (14, '2021-07-10 17:38:41.945000', '2021-07-10 17:38:41.945000', 'attachment_upload_max_files', 0, '50');
INSERT INTO `options` VALUES (15, '2021-07-10 17:38:41.952000', '2021-07-10 17:38:41.952000', 'email_protocol', 0, 'smtp');
INSERT INTO `options` VALUES (16, '2021-07-10 17:38:41.957000', '2021-07-10 17:38:41.957000', 'comment_api_enabled', 0, 'true');
INSERT INTO `options` VALUES (17, '2021-07-10 17:38:41.962000', '2021-07-10 17:38:41.962000', 'developer_mode', 0, 'false');
INSERT INTO `options` VALUES (18, '2021-07-10 17:38:41.967000', '2021-07-10 17:38:41.967000', 'default_editor', 0, 'MARKDOWN');
INSERT INTO `options` VALUES (19, '2021-07-10 17:38:41.972000', '2021-07-10 17:38:41.972000', 'photos_title', 0, '图库');
INSERT INTO `options` VALUES (20, '2021-07-10 17:38:41.977000', '2021-07-10 17:38:41.977000', 'comment_range', 0, '30');
INSERT INTO `options` VALUES (21, '2021-07-10 17:38:41.982000', '2021-07-10 17:38:41.982000', 'seo_spider_disabled', 0, 'true');
INSERT INTO `options` VALUES (22, '2021-07-10 17:38:41.987000', '2021-07-10 17:38:41.987000', 'journals_page_size', 0, '10');
INSERT INTO `options` VALUES (23, '2021-07-10 17:38:41.992000', '2021-07-10 17:38:41.992000', 'archives_prefix', 0, 'archives');
INSERT INTO `options` VALUES (24, '2021-07-10 17:38:41.997000', '2021-07-10 17:38:41.997000', 'journals_prefix', 0, 'journals');
INSERT INTO `options` VALUES (25, '2021-07-10 17:38:42.002000', '2021-07-10 17:38:42.002000', 'comment_page_size', 0, '10');
INSERT INTO `options` VALUES (26, '2021-07-10 17:38:42.007000', '2021-07-10 17:38:42.007000', 'journals_title', 0, '日志');
INSERT INTO `options` VALUES (27, '2021-07-10 17:38:42.012000', '2021-07-10 17:38:42.012000', 'attachment_upload_image_preview_enable', 0, 'true');
INSERT INTO `options` VALUES (28, '2021-07-10 17:38:42.017000', '2021-07-10 17:38:42.017000', 'attachment_type', 0, 'LOCAL');
INSERT INTO `options` VALUES (29, '2021-07-10 17:38:42.022000', '2021-07-10 17:46:41.382000', 'comment_reply_notice', 0, 'true');
INSERT INTO `options` VALUES (30, '2021-07-10 17:38:42.026000', '2021-07-10 17:38:42.026000', 'comment_ban_time', 0, '10');
INSERT INTO `options` VALUES (31, '2021-07-10 17:38:42.031000', '2021-07-10 17:38:42.031000', 'oss_qiniu_domain_protocol', 0, 'https://');
INSERT INTO `options` VALUES (32, '2021-07-10 17:38:42.036000', '2021-07-10 17:38:42.036000', 'oss_upyun_domain_protocol', 0, 'https://');
INSERT INTO `options` VALUES (33, '2021-07-10 17:38:42.041000', '2021-07-10 17:46:41.382000', 'comment_new_notice', 0, 'true');
INSERT INTO `options` VALUES (34, '2021-07-10 17:38:42.046000', '2021-07-10 17:38:42.046000', 'photos_page_size', 0, '10');
INSERT INTO `options` VALUES (35, '2021-07-10 17:38:42.051000', '2021-07-10 17:38:42.051000', 'attachment_upload_max_parallel_uploads', 0, '3');
INSERT INTO `options` VALUES (36, '2021-07-10 17:38:42.056000', '2021-07-10 17:38:42.056000', 'links_prefix', 0, 'links');
INSERT INTO `options` VALUES (37, '2021-07-10 17:38:42.061000', '2021-07-10 17:38:42.061000', 'sheet_prefix', 0, 's');
INSERT INTO `options` VALUES (38, '2021-07-10 17:38:42.066000', '2021-07-10 17:38:42.066000', 'tags_prefix', 0, 'tags');
INSERT INTO `options` VALUES (39, '2021-07-10 17:38:42.071000', '2021-07-10 17:38:42.071000', 'recycled_post_retention_timeunit', 0, 'DAY');
INSERT INTO `options` VALUES (40, '2021-07-10 17:38:42.076000', '2021-07-10 17:38:42.076000', 'rss_page_size', 0, '20');
INSERT INTO `options` VALUES (41, '2021-07-10 17:38:42.080000', '2021-07-10 17:38:42.080000', 'post_permalink_type', 0, 'DEFAULT');
INSERT INTO `options` VALUES (42, '2021-07-10 17:38:42.085000', '2021-07-10 17:38:42.085000', 'sheet_permalink_type', 0, 'SECONDARY');
INSERT INTO `options` VALUES (43, '2021-07-10 17:38:42.090000', '2021-07-10 17:38:42.090000', 'rss_content_type', 0, 'full');
INSERT INTO `options` VALUES (44, '2021-07-10 17:38:42.097000', '2021-07-10 17:38:42.097000', 'categories_prefix', 0, 'categories');
INSERT INTO `options` VALUES (45, '2021-07-10 17:38:42.102000', '2021-07-10 17:38:42.102000', 'photos_prefix', 0, 'photos');
INSERT INTO `options` VALUES (46, '2021-07-10 17:38:42.107000', '2021-07-10 17:38:42.107000', 'comment_internal_plugin_js', 0, '//cdn.jsdelivr.net/npm/halo-comment@latest/dist/halo-comment.min.js');
INSERT INTO `options` VALUES (47, '2021-07-10 17:38:42.112000', '2021-07-10 17:38:42.112000', 'api_enabled', 0, 'false');
INSERT INTO `options` VALUES (48, '2021-07-10 17:38:42.117000', '2021-07-10 17:38:42.117000', 'post_index_page_size', 0, '10');
INSERT INTO `options` VALUES (49, '2021-07-10 17:38:42.122000', '2021-07-10 17:38:42.122000', 'oss_ali_domain_protocol', 0, 'https://');
INSERT INTO `options` VALUES (50, '2021-07-10 17:38:42.127000', '2021-07-10 17:38:42.127000', 'post_archives_page_size', 0, '10');
INSERT INTO `options` VALUES (51, '2021-07-10 17:38:42.132000', '2021-07-16 17:11:25.034000', 'comment_new_need_check', 0, 'false');
INSERT INTO `options` VALUES (52, '2021-07-10 17:38:42.136000', '2021-07-10 17:38:42.136000', 'links_title', 0, '友情链接');
INSERT INTO `options` VALUES (53, '2021-07-10 17:38:42.141000', '2021-07-10 17:46:41.382000', 'comment_gravatar_default', 0, 'monsterid');
INSERT INTO `options` VALUES (54, '2021-07-10 17:38:42.146000', '2021-07-10 17:38:42.146000', 'recycled_post_cleaning_enabled', 0, 'false');
INSERT INTO `options` VALUES (55, '2021-07-10 17:38:42.151000', '2021-07-10 17:38:42.151000', 'post_summary_length', 0, '150');
INSERT INTO `options` VALUES (56, '2021-07-10 17:38:42.156000', '2021-07-16 17:20:23.192000', 'blog_logo', 0, 'http://supren.top/upload/2021/07/uugai.com_1625911034567-6d56a9e0f58349aa9fb9f926f31294e4.png');
INSERT INTO `options` VALUES (57, '2021-07-10 17:38:42.163000', '2021-07-10 17:38:42.163000', 'seo_keywords', 0, '做个有用的人 supren');
INSERT INTO `options` VALUES (58, '2021-07-10 17:38:42.168000', '2021-07-10 17:38:42.168000', 'seo_description', 0, '个人博客，记录软件工程相关知识(包括个人学习知识以及工作中遇到的)。');
INSERT INTO `options` VALUES (59, '2021-07-10 17:46:41.357000', '2021-07-10 17:46:41.357000', 'email_host', 0, 'smtp.163.com');
INSERT INTO `options` VALUES (60, '2021-07-10 17:46:41.368000', '2021-07-10 17:46:41.368000', 'email_username', 0, 'supren2021@163.com');
INSERT INTO `options` VALUES (61, '2021-07-10 17:46:41.373000', '2021-07-10 17:46:41.373000', 'email_password', 0, 'xiaoxuesheng.123');
INSERT INTO `options` VALUES (62, '2021-07-10 17:46:41.377000', '2021-07-10 17:46:41.377000', 'email_from_name', 0, '小学生');
INSERT INTO `options` VALUES (63, '2021-07-10 17:51:49.199000', '2021-07-10 17:51:49.199000', 'blog_statistics_code', 0, '<script type=”text/javascript”>\nvar _bdhmProtocol = ((“https:” == document.location.protocol) ? ” https://” : ” http://”);\ndocument.write(unescape(“%3Cscript src=’” + _bdhmProtocol + “hm.baidu.com/h.js%3F3266e9d3684eaa1337dc7c4b4b64b0ae’ type=’text/javascript’%3E%3C/script%3E”));\n</script>');
INSERT INTO `options` VALUES (64, '2021-07-15 15:45:09.730000', '2021-07-15 15:45:09.730000', 'default_menu_team', 0, '');

-- ----------------------------
-- Table structure for photos
-- ----------------------------
DROP TABLE IF EXISTS `photos`;
CREATE TABLE `photos`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `location` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `take_time` datetime(6) NULL DEFAULT NULL,
  `team` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `thumbnail` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `url` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `photos_team`(`team`) USING BTREE,
  INDEX `photos_create_time`(`create_time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of photos
-- ----------------------------
INSERT INTO `photos` VALUES (1, '2021-07-15 15:03:19.706000', '2021-07-15 15:03:19.706000', '测试', '厦门', '键盘', '2021-07-15 15:03:19.706000', '随拍', 'http://supren.top/upload/2021/07/0769f35296304ad99da32d89d50802fa-d1fb6bbff64e486eaeca21e7061639de-thumbnail.jpg', 'http://supren.top/upload/2021/07/0769f35296304ad99da32d89d50802fa-d1fb6bbff64e486eaeca21e7061639de.jpg');
INSERT INTO `photos` VALUES (2, '2021-07-15 16:45:27.037000', '2021-07-15 16:45:27.037000', '人物', '', '1231', '2021-07-15 16:45:27.037000', '人物', 'http://supren.top/upload/2021/07/1231-2dd8dff6a4de4d4ca60e3ef872426079-thumbnail.jpg', 'http://supren.top/upload/2021/07/1231-2dd8dff6a4de4d4ca60e3ef872426079.jpg');
INSERT INTO `photos` VALUES (3, '2021-07-15 16:45:50.865000', '2021-07-15 16:45:50.865000', '人物', '', '1232', '2021-07-15 16:45:50.865000', '人物', 'http://supren.top/upload/2021/07/1232-5bd23b397b60410e80caf0e263dcab32-thumbnail.jpg', 'http://supren.top/upload/2021/07/1232-5bd23b397b60410e80caf0e263dcab32.jpg');
INSERT INTO `photos` VALUES (4, '2021-07-15 16:46:05.984000', '2021-07-15 16:46:05.984000', '人物', '', '1233', '2021-07-15 16:46:05.984000', '人物', 'http://supren.top/upload/2021/07/1233-c7ec4b3c0f35426d946522d107991663-thumbnail.jpg', 'http://supren.top/upload/2021/07/1233-c7ec4b3c0f35426d946522d107991663.jpg');

-- ----------------------------
-- Table structure for post_categories
-- ----------------------------
DROP TABLE IF EXISTS `post_categories`;
CREATE TABLE `post_categories`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `category_id` int(0) NULL DEFAULT NULL,
  `post_id` int(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `post_categories_post_id`(`post_id`) USING BTREE,
  INDEX `post_categories_category_id`(`category_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of post_categories
-- ----------------------------
INSERT INTO `post_categories` VALUES (3, '2021-07-16 14:39:44.775000', '2021-07-16 14:39:44.775000', 4, 3);
INSERT INTO `post_categories` VALUES (4, '2021-07-18 11:24:03.812000', '2021-07-18 11:24:03.812000', 1, 5);
INSERT INTO `post_categories` VALUES (5, '2021-07-18 22:08:51.199000', '2021-07-18 22:08:51.199000', 4, 6);
INSERT INTO `post_categories` VALUES (9, '2021-07-20 11:36:01.594000', '2021-07-20 11:36:01.594000', 1, 7);
INSERT INTO `post_categories` VALUES (10, '2021-07-20 17:39:00.542000', '2021-07-20 17:39:00.542000', 1, 8);
INSERT INTO `post_categories` VALUES (11, '2021-07-24 12:38:34.808000', '2021-07-24 12:38:34.808000', 4, 9);
INSERT INTO `post_categories` VALUES (12, '2021-07-26 16:32:35.241000', '2021-07-26 16:32:35.241000', 1, 10);
INSERT INTO `post_categories` VALUES (13, '2021-07-28 11:56:14.859000', '2021-07-28 11:56:14.859000', 1, 11);
INSERT INTO `post_categories` VALUES (14, '2021-08-03 18:19:47.386000', '2021-08-03 18:19:47.386000', 1, 12);
INSERT INTO `post_categories` VALUES (15, '2021-08-04 10:22:51.533000', '2021-08-04 10:22:51.533000', 1, 13);

-- ----------------------------
-- Table structure for post_tags
-- ----------------------------
DROP TABLE IF EXISTS `post_tags`;
CREATE TABLE `post_tags`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `post_id` int(0) NOT NULL,
  `tag_id` int(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `post_tags_post_id`(`post_id`) USING BTREE,
  INDEX `post_tags_tag_id`(`tag_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 14 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of post_tags
-- ----------------------------
INSERT INTO `post_tags` VALUES (2, '2021-07-16 14:39:44.765000', '2021-07-16 14:39:44.765000', 3, 9);
INSERT INTO `post_tags` VALUES (3, '2021-07-18 11:24:03.799000', '2021-07-18 11:24:03.799000', 5, 6);
INSERT INTO `post_tags` VALUES (4, '2021-07-18 22:08:51.183000', '2021-07-18 22:08:51.183000', 6, 8);
INSERT INTO `post_tags` VALUES (8, '2021-07-20 11:36:01.584000', '2021-07-20 11:36:01.584000', 7, 6);
INSERT INTO `post_tags` VALUES (9, '2021-07-20 17:39:00.523000', '2021-07-20 17:39:00.523000', 8, 6);
INSERT INTO `post_tags` VALUES (10, '2021-07-24 12:38:34.796000', '2021-07-24 12:38:34.796000', 9, 9);
INSERT INTO `post_tags` VALUES (11, '2021-07-26 16:32:35.228000', '2021-07-26 16:32:35.228000', 10, 7);
INSERT INTO `post_tags` VALUES (12, '2021-07-28 11:56:14.839000', '2021-07-28 11:56:14.839000', 11, 7);
INSERT INTO `post_tags` VALUES (13, '2021-08-03 18:19:47.376000', '2021-08-03 18:19:47.376000', 12, 1);
INSERT INTO `post_tags` VALUES (14, '2021-08-04 10:22:51.523000', '2021-08-04 10:22:51.523000', 13, 1);

-- ----------------------------
-- Table structure for posts
-- ----------------------------
DROP TABLE IF EXISTS `posts`;
CREATE TABLE `posts`  (
  `type` int(0) NOT NULL DEFAULT 0,
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `disallow_comment` bit(1) NULL DEFAULT b'0',
  `edit_time` datetime(6) NULL DEFAULT NULL,
  `editor_type` int(0) NULL DEFAULT 0,
  `format_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `likes` bigint(0) NULL DEFAULT 0,
  `meta_description` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `meta_keywords` varchar(511) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `original_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `slug` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `status` int(0) NULL DEFAULT 1,
  `summary` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `template` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `thumbnail` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `top_priority` int(0) NULL DEFAULT 0,
  `url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `visits` bigint(0) NULL DEFAULT 0,
  `word_count` bigint(0) NULL DEFAULT 0,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `UK_qmmso8qxjpbxwegdtp0l90390`(`slug`) USING BTREE,
  INDEX `posts_type_status`(`type`, `status`) USING BTREE,
  INDEX `posts_create_time`(`create_time`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of posts
-- ----------------------------
INSERT INTO `posts` VALUES (1, 2, '2021-07-10 17:12:18.088000', '2021-07-16 15:03:45.959000', b'0', '2021-07-16 15:03:45.939000', 0, '<h2 id=\"关于页面\">关于页面</h2>\n<p> 本人是一名不知名Java后端开发人员。</p>\n<p>  -致自己：<em><strong>尽己力，听天命。无愧于心，不惑于情。顺势而为，随遇而安。知错就改，迷途知返。在喜欢自己的人身上用心，在不喜欢自己的人身上健忘。如此一生，甚好。</strong></em></p>\n', 0, NULL, NULL, '## 关于页面\n\n&emsp;本人是一名不知名Java后端开发人员。\n\n\n&emsp;&emsp;-致自己：***尽己力，听天命。无愧于心，不惑于情。顺势而为，随遇而安。知错就改，迷途知返。在喜欢自己的人身上用心，在不喜欢自己的人身上健忘。如此一生，甚好。***', '', 'about', 0, '关于页面这是一个自定义页面，你可以在后台的 页面 -&gt; 所有页面 -&gt; 自定义页面 找到它，你可以用于新建关于页面、留言板页面等等。发挥你自己的想象力！这是一篇自动生成的页面，你可以在后台删除它。', '', '', '关于页面', 0, NULL, 85, 131);
INSERT INTO `posts` VALUES (0, 3, '2021-07-16 14:36:29.474000', '2021-07-16 14:39:44.728000', b'0', '2021-07-16 14:39:44.502000', 0, '<p>  这已经不是我第一次搭建博客了。做这个事情总是虎头蛇尾，这次励志要坚持下去，不为别的，只为让自己能更好的的更有计划的去学习成长。</p>\n<p>  随着年龄的成长自己的性情以及对待工作生活的观点和态度也在发生着变化。回味自己学生时代，很多事情以及观点现在看来感觉其实并非是对的。性格过于焦躁，甚至有点狂妄，当然又因必有果，导致生活给过几剂重拳。</p>\n<p>  这次又重新搭建起了博客，这里算是作为自己的一篇净土吧，在这里记录记录自己的生活，学习以及随想。主要以学习为主。每天至少要写一篇技术类博客。</p>\n<p>感觉自己更多的是还是要修身养性。<br />\n诫子书译文：<br />\n有道德修养的人，依靠内心安静来修养身心，以俭朴节约财务来培养自己高尚的品德。不恬静寡欲无法明确志向，不排除外来干扰无法达到远大目标。学习必须精心专一，而才干来自勤奋学习。如果不学习就无法增长自己的才干，不明确志向就不能在学习上获得成就。<em><strong>纵欲放纵、消极怠慢就不能勉励心志使精神振奋，冒险草率、急躁不安就不能修养性情</strong></em>。年华随时光而飞逝，意志随岁月逐渐消逝。最终枯败零落，大多不接触世事、不为社会所用，只能悲哀的困守在自己穷困的破舍里，到时悔恨又怎么来得及？</p>\n<p><img src=\"http://120.77.145.59:8090/upload/2021/07/333-1d5db3024f8a4c64ad370798c29981ce.jpg\" alt=\"333\" /></p>\n', 0, NULL, NULL, '&emsp;&emsp;这已经不是我第一次搭建博客了。做这个事情总是虎头蛇尾，这次励志要坚持下去，不为别的，只为让自己能更好的的更有计划的去学习成长。\n\n&emsp;&emsp;随着年龄的成长自己的性情以及对待工作生活的观点和态度也在发生着变化。回味自己学生时代，很多事情以及观点现在看来感觉其实并非是对的。性格过于焦躁，甚至有点狂妄，当然又因必有果，导致生活给过几剂重拳。\n\n&emsp;&emsp;这次又重新搭建起了博客，这里算是作为自己的一篇净土吧，在这里记录记录自己的生活，学习以及随想。主要以学习为主。每天至少要写一篇技术类博客。\n\n感觉自己更多的是还是要修身养性。\n诫子书译文：\n有道德修养的人，依靠内心安静来修养身心，以俭朴节约财务来培养自己高尚的品德。不恬静寡欲无法明确志向，不排除外来干扰无法达到远大目标。学习必须精心专一，而才干来自勤奋学习。如果不学习就无法增长自己的才干，不明确志向就不能在学习上获得成就。***纵欲放纵、消极怠慢就不能勉励心志使精神振奋，冒险草率、急躁不安就不能修养性情***。年华随时光而飞逝，意志随岁月逐渐消逝。最终枯败零落，大多不接触世事、不为社会所用，只能悲哀的困守在自己穷困的破舍里，到时悔恨又怎么来得及？\n\n![333](http://120.77.145.59:8090/upload/2021/07/333-1d5db3024f8a4c64ad370798c29981ce.jpg)', '', 'jian-zhan-sui-xiang', 0, '  这已经不是我第一次搭建博客了。做这个事情总是虎头蛇尾，这次励志要坚持下去，不为别的，只为让自己能更好的的更有计划的去学习成长。  随着年龄的成长自己的性情以及对待工作生活的观点和态度也在发生着变化。回味自己学生时代，很多事情以及观点现在看来感觉其实并非是对的。性格过于焦躁，甚至有点狂妄，当然又因', '', 'http://120.77.145.59:8090/upload/2021/07/64eb5fc0880f11ebb6edd017c2d2eca2-eb753181da454f1499455bc8a19e146a.jpg', '建站随想', 0, NULL, 86, 619);
INSERT INTO `posts` VALUES (0, 5, '2021-07-18 11:16:36.392000', '2021-07-18 11:24:02.209000', b'0', '2021-07-18 11:24:00.569000', 0, '<h3 id=\"java-反射汇总\">JAVA 反射汇总</h3>\n<h4 id=\"什么是注解-annnotation\">什么是注解 Annnotation</h4>\n<p>什么是注解 Annotation  不是程序本身可以对程序做出解释<br />\n可以被其他程序读取<br />\n以“@注释名” 形式   还可以添加一些参数值</p>\n<p>内置注解<br />\n@Override 从写<br />\n@Deprecated  过期 废弃<br />\n@SuppressWarnings 抑制编译时警告的。  @SuppressWarnings(&quot;all&quot;) 镇压全部警告</p>\n<p>元注解 的作用就是负责解释其他注解的注解，java定义了4个标准的meta-annotation类型，他们被用来提供对其他annotation类型做说明</p>\n<p>这些类型和他们支持的类在java.lang.annotation包中可以找到（@Target  @Retention  @Documented  @Inherited）<br />\n@Target：    用于描述注解的使用范围(即. 被描述的注解可以用在什么地方)<br />\n@Retention  表示需要在什么级别保存该注释信息，用于描述注解的生命周期 (SOURCE &lt; CLASS &lt; RUNTIME)<br />\n@Documennt  说明该注解被包含在javadoc中<br />\n@Inherited  说明子类可以继承父类中的该注解。</p>\n<h5 id=\"自定义注解\">自定义注解</h5>\n<pre><code class=\"language-javascript\">package top.heiping.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * &lt;p&gt;\n * 自定义注解\n * &lt;/p&gt;\n *\n * @author: rch\n * @date: 2020-12-28\n */\npublic class TestMyAnnotation {\n\n    // 注解可以显示赋值  如果没有默认值 我们一定要给注解赋值\n    @MyAnnotation2(name = &quot;nameValue&quot;)\n    public void test2() {\n\n    }\n\n    // 只有一个值不需要写value了  直接写值即可\n    @MyAnnotation3(&quot;rench&quot;)\n    public void test3() {\n\n    }\n\n}\n\n@Target({ElementType.TYPE, ElementType.METHOD})\n@interface MyAnnotation2{\n\n    // 注解的参数：  参数类型 + 参数名 ();\n    String name();\n\n    int age() default 0;\n\n    // 如果默认值为 -1 代表不存在;\n    int id() default  -1;\n\n    String[] schools() default {&quot;西部开源&quot;,&quot;清华大学&quot;};\n}\n\n\n// 默认只有一个值的  注解范例\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@interface MyAnnotation3{\n    String value();\n}\n</code></pre>\n<h5 id=\"元注解\">元注解</h5>\n<pre><code class=\"language-java\">package top.heiping.annotation;\n\nimport java.lang.annotation.*;\n\n/**\n * &lt;p&gt;\n * 测试元注解 这里自定义一个在注解\n * &lt;/p&gt;\n *\n * @author: rch\n * @date: 2020-12-28\n */\n@MyAnnotation\npublic class TestMetaAnnotation {\n\n    @MyAnnotation\n    public void test(){\n\n    }\n}\n\n// 定义一个注解    一个类只能有一个public\n\n// Target 表示我们的注解能够用在什么地方\n@Target(value = {ElementType.METHOD, ElementType.TYPE})\n\n// 表示我们的注解在什么地方才有笑  RunTIME &gt; class &gt; source\n@Retention(RetentionPolicy.RUNTIME)\n\n// 表示是否将我们的注解在javadoc 中\n@Documented\n\n// 子类可以继承父类的注解\n@Inherited\n@interface MyAnnotation{\n\n}\n</code></pre>\n<h4 id=\"静态-vs-动态\">静态 VS 动态</h4>\n<p>静态 VS 动态<br />\n动态语言：  是一类运行时可以改变其结构的语言：例如新的函数. 对象. 甚至代码可以被引用， 已有的函数可以被删除或是其他结构上的变化。<br />\nvar x = &quot;var a =3;var b=5; alert(a+b)&quot;<br />\neval(x)</p>\n<p>静态代码：   与动态语言相对应， 运行时结构不可变的语言就是静态语言。 如java  c  c++</p>\n<p>java不是动态语言，但java可以称之为 “准动态语言” 即java 有一定的动态性，我们额可以利用反射机制获得类似动态语言的特性。<br />\njava 的动态性让编程的时候更加灵活。  但也同时增加了危险性。</p>\n<p>Reflection(反射) 是java 被视为动态语言的关键，反射机制允许程序在执行期借助Reflection API取得任何类的内部信息，并能</p>\n<ul>\n<li>直接操作任意对象的内部属性及方法<br />\nClass c = Class.forName(&quot;java.lang.String&quot;);</li>\n</ul>\n<p>加载完类之后，在堆内存的方法区中就参数了一个Class类的对象。</p>\n<h4 id=\"类加载过程如何理解反射\">类加载过程(如何理解反射)</h4>\n<p><img src=\"https://pic1.zhimg.com/80/v2-4face8109e0d52ef5894c41c69e4ec6b_720w.jpg?source=1940ef5c\" alt=\"img\" /></p>\n<p>首先我们了解一下JVM，什么是JVM，Java的虚拟机，java之所以能跨平台就是因为这个东西，你可以理解成一个进程，程序，只不过他的作用是用来跑你的代码的。上图是java的内存模型，我们关注的点，一个方法区，一个栈，一个堆，初学的时候老师不深入的话只告诉你java的内存分为堆和栈，易懂点吧！</p>\n<p>假如你写了一段代码：Object o=new Object();</p>\n<p>运行了起来！</p>\n<p>首先JVM会启动，你的代码会编译成一个.class文件，然后被类加载器加载进jvm的内存中，你的类Object加载到方法区中，创建了Object类的class对象到堆中，注意这个不是new出来的对象，而是类的类型对象，每个类只有一个class对象，作为方法区类的数据结构的接口。jvm创建对象前，会先检查类是否加载，寻找类对应的class对象，若加载好，则为你的对象分配内存，初始化也就是代码:new Object()。</p>\n<p>上面的流程就是你自己写好的代码扔给jvm去跑，跑完就over了，jvm关闭，你的程序也停止了。</p>\n<p>为什么要讲这个呢？因为要理解反射必须知道它在什么场景下使用。</p>\n<p>题主想想上面的程序对象是自己new的，程序相当于写死了给jvm去跑。假如一个服务器上突然遇到某个请求哦要用到某个类，哎呀但没加载进jvm，是不是要停下来自己写段代码，new一下，哦启动一下服务器，（脑残）！</p>\n<p>反射是什么呢？当我们的程序在运行时，需要动态的加载一些类这些类可能之前用不到所以不用加载到jvm，而是在运行时根据需要才加载，这样的好处对于服务器来说不言而喻，举个例子我们的项目底层有时是用mysql，有时用oracle，需要动态地根据实际情况加载驱动类，这个时候反射就有用了，假设 com.java.dbtest.myqlConnection，com.java.dbtest.oracleConnection这两个类我们要用，这时候我们的程序就写得比较动态化，通过Class tc = Class.forName(&quot;com.java.dbtest.TestConnection&quot;);通过类的全类名让jvm在服务器中找到并加载这个类，而如果是oracle则传入的参数就变成另一个了。这时候就可以看到反射的好处了，这个动态性就体现出java的特性了！举多个例子，大家如果接触过spring，会发现当你配置各种各样的bean时，是以配置文件的形式配置的，你需要用到哪些bean就配哪些，spring容器就会根据你的需求去动态加载，你的程序就能健壮地运行。</p>\n<p>类加载<br />\n加载      -  加载到内存     类的静态属性方法等 加载到方法区     并且在堆内存中有一个该类唯一的class包含类的所有信息，并且他指向方法去中该类信息</p>\n<p>链接      -  验证   准备（正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配）     解析</p>\n<p>初始化     - 执行clinit 方法  产生对象的初始化默认值。<br />\n当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。<br />\n虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确枷锁和同步。</p>\n<h4 id=\"类加载器\">类加载器</h4>\n<ul>\n<li>类加载器   的加载顺序如下</li>\n<li>\n<ol>\n<li>引导类加载器    加载的是  jre下的rt.jar   这里是我们常用的jar  比如  io等等</li>\n</ol>\n</li>\n<li>-引导类加载器  用c++编写的，是jvm自带的类加载器，负责java平台核心库，用来装在核心类库，该类无法直接获取</li>\n<li>\n<ol start=\"2\">\n<li>拓展类加载器    加载的是  jre下的ext 文件下的包</li>\n</ol>\n</li>\n<li>-负责jre/lib/ext目录下的jar包或 -D java.ext.dirs 指定目录下的jar包装入工作</li>\n<li>\n<ol start=\"3\">\n<li>系统类加载器    也就是app开头的那个类加载器 AppClassLoader， 也是我们最常用的类加载器</li>\n</ol>\n</li>\n<li>-负责java-classpath 或 -D java.class.path所指的目录下的类与jar包装入工作，是最常用的加载器</li>\n<li>\n<ol start=\"4\">\n<li>自定义类加载器</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"类加载器demo\">类加载器demo</h5>\n<pre><code class=\"language-java\">package top.heiping.reflection;\n\n/**\n * &lt;p&gt;\n *  类加载器   的加载顺序如下\n *  1.   引导类加载器    加载的是  jre下的rt.jar   这里是我们常用的jar  比如  io等等\n *          -引导类加载器  用c++编写的，是jvm自带的类加载器，负责java平台核心库，用来装在核心类库，该类无法直接获取\n *  2.   拓展类加载器    加载的是  jre下的ext 文件下的包\n *          -负责jre/lib/ext目录下的jar包或 -D java.ext.dirs 指定目录下的jar包装入工作\n *  3.   系统类加载器    也就是app开头的那个类加载器 AppClassLoader， 也是我们最常用的类加载器\n *          -负责java-classpath 或 -D java.class.path所指的目录下的类与jar包装入工作，是最常用的加载器\n *  4.   自定义类加载器\n * &lt;/p&gt;\n *\n * @author: rch\n * @date: 2020-12-28\n */\npublic class TestGetClassLoad {\n\n    public static void main(String[] args) throws ClassNotFoundException {\n        // 获取系统类加载器\n        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n        System.out.println(systemClassLoader);\n\n        // 获取系统类加载器的父类加载器 -》 拓展类加载器\n        ClassLoader parent = systemClassLoader.getParent();\n        System.out.println(parent);\n\n        // 获取拓展类加载器的父类加载器 -&gt;根加载器(c/c++)\n        ClassLoader parent1 = parent.getParent();\n        System.out.println(parent1);\n\n        // 测试当前类是那个加载器加载的\n        ClassLoader thisClassLoader = Class.forName(&quot;top.heiping.reflection.TestGetClassLoad&quot;).getClassLoader();\n        System.out.println(thisClassLoader);\n\n        // 测试jdk内置的类是谁加载的\n        thisClassLoader = Class.forName(&quot;java.lang.Object&quot;).getClassLoader();\n        System.out.println(thisClassLoader);\n\n        // 如果获取系统类加载器可以加载的路径\n        System.out.println(System.getProperty(&quot;java.class.path&quot;));\n        /**\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\charsets.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\deploy.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\access-bridge-64.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\cldrdata.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\dnsns.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\jaccess.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\jfxrt.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\localedata.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\nashorn.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunec.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunjce_provider.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunmscapi.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunpkcs11.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\zipfs.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\javaws.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jce.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jfr.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jfxswt.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jsse.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\management-agent.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\plugin.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\resources.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\rt.jar;\n         * E:\\CodeWarehouse\\JavaWorkSpace\\java-base-study\\out\\production\\java-annotation-study;\n         * D:\\SoftWare\\IntelliJ IDEA 2020.3\\lib\\idea_rt.jar\n         */\n\n        // 双亲委派机制\n        /**\n         * 你定义一个java类  加载的时候他会往上找，一级一级的找(一级一级类加载器里去找)\n         * 如果找到了，你写的那个就没用 ，加载不了。 会用原来的包\n         */\n    }\n}\n\n</code></pre>\n<h5 id=\"通过class信息获取类的信息\">通过class信息获取类的信息</h5>\n<pre><code class=\"language-java\">package top.heiping.reflection;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\n/**\n * &lt;p&gt;\n *  获取类的信息 通过class信息\n *  通过反射获取运行时类的完整结构\n *  Field  Method   Constructor   Superclass   Interface    Annotation\n *  实现的全部接口\n *  所继承的父类\n *  全部的构造器\n *  全部的方法\n *  全部的Field\n *  注解\n *  。。。\n * &lt;/p&gt;\n *\n * @author: rch\n * @date: 2020-12-28\n */\npublic class TestGetClassInfo {\n\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException {\n\n        Class c1 = Class.forName(&quot;top.heiping.reflection.UserInfo&quot;);\n\n        UserInfo user = new UserInfo();\n        c1 = user.getClass();\n\n        // 1.获得类的名字\n        // 获得包名 + 类名\n        System.out.println(c1.getName());\n        // 获得类名\n        System.out.println(c1.getSimpleName());\n\n        // 2.获得类的属性\n        System.out.println(&quot;============getFields只能找到public 属性=======================&quot;);\n        Field[] fields = c1.getFields();\n        for(Field field: fields) {\n            System.out.println(field);\n        }\n\n        // 2.获得类的属性\n        System.out.println(&quot;=============getDeclaredFields获得所有属性的值======================&quot;);\n        Field[] fields2 = c1.getDeclaredFields();\n        for(Field field: fields2) {\n            System.out.println(field);\n        }\n\n        // 获得指定属性的值\n        Field name = c1.getDeclaredField(&quot;name&quot;);\n        System.out.println(name);\n\n\n        // 获得类的方法\n        System.out.println(&quot;=====================获得本类及其父类的所有的public方法=================&quot;);\n        Method[] methods = c1.getMethods();\n        methods = c1.getDeclaredMethods();\n        for (Method method : methods) {\n            System.out.println(&quot;正常的：&quot; + method);\n        }\n\n        System.out.println(&quot;=====================获得本类的所有方法=================&quot;);\n        methods = c1.getDeclaredMethods();\n        for (Method method: methods) {\n            System.out.println(&quot;getDeclaredMethods:&quot; + method);\n        }\n\n        System.out.println(&quot;获得指定的方法&quot;);\n        Method getName = c1.getMethod(&quot;getName&quot;, null);\n        Method setName = c1.getMethod(&quot;setName&quot;, String.class);\n\n        System.out.println(getName);\n        System.out.println(setName);\n\n\n        // 获得指定的构造器\n        System.out.println(&quot;=====================&quot;);\n        Constructor[] constructors = c1.getConstructors();\n        for (Constructor constructor: constructors) {\n            System.out.println(constructor);\n        }\n\n        System.out.println(&quot;=====================&quot;);\n        constructors = c1.getConstructors();\n        for (Constructor constructor: constructors) {\n            System.out.println(constructor);\n        }\n\n        System.out.println(&quot;==========获得指定的构造器===========&quot;);\n        Constructor declaredConstructor = c1.getDeclaredConstructor(String.class, int.class, int.class, Float.class);\n        System.out.println(&quot;指定的类构造器：&quot; + declaredConstructor);\n    }\n}\n\n\n// 实体类\nclass UserInfo {\n    private String name;\n    private int id;\n    private int age;\n    public Float score;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public Float getScore() {\n        return score;\n    }\n\n    public void setScore(Float score) {\n        this.score = score;\n    }\n\n    public UserInfo(String name, int id, int age, Float score) {\n        this.name = name;\n        this.id = id;\n        this.age = age;\n        this.score = score;\n    }\n\n    public UserInfo() {\n    }\n}\n</code></pre>\n<h4 id=\"反射操作泛型\">反射操作泛型</h4>\n<pre><code class=\"language-java\">package top.heiping.reflection;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * &lt;p&gt;\n *  泛型\n * &lt;/p&gt;\n *\n * @author: rch\n * @date: 2020-12-28\n */\npublic class TestGeneric {\n\n    public void test01(Map&lt;String, User&gt; map, List&lt;User&gt; list) {\n        System.out.println(&quot;test01&quot;);\n    }\n\n    public Map&lt;String, User&gt; test02() {\n        System.out.println(&quot;test02&quot;);\n        return null;\n    }\n\n\n    public static void main(String[] args) throws NoSuchMethodException {\n        Method method = TestGeneric.class.getMethod(&quot;test01&quot;, Map.class, List.class);\n\n        Type[] genericParameterTypes = method.getGenericParameterTypes();\n        for (Type genericParameterType : genericParameterTypes) {\n            System.out.println(&quot;#&quot; + genericParameterType);\n\n            // 想打印出map里的 信息  和list里的信息  先判断是否是一个参数话类型，如果是一个参数话类型，我们将其强转为一个参数话类型\n            // 然后使用参数话类型的 方法获取其泛型\n            if (genericParameterType instanceof ParameterizedType) {\n                Type[] actualTypeArguments = ((ParameterizedType)genericParameterType).getActualTypeArguments();\n                for (Type actualTypeArgument: actualTypeArguments) {\n                    System.out.println(actualTypeArgument);\n                }\n            }\n        }\n\n        /**\n         * 结果：\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\bin\\java.exe &quot;-javaagent:D:\\SoftWare\\IntelliJ IDEA 2020.3\\lib\\idea_rt.jar=62372:D:\\SoftWare\\IntelliJ IDEA 2020.3\\bin&quot; -Dfile.encoding=UTF-8 -classpath D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\charsets.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\deploy.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\access-bridge-64.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\cldrdata.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\dnsns.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\jaccess.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\jfxrt.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\localedata.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\nashorn.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunec.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunjce_provider.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunmscapi.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunpkcs11.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\zipfs.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\javaws.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jce.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jfr.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jfxswt.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jsse.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\management-agent.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\plugin.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\resources.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\rt.jar;E:\\CodeWarehouse\\JavaWorkSpace\\java-base-study\\out\\production\\java-annotation-study top.heiping.reflection.TestGeneric\n         * #java.util.Map&lt;java.lang.String, top.heiping.reflection.User&gt;\n         * class java.lang.String\n         * class top.heiping.reflection.User\n         * #java.util.List&lt;top.heiping.reflection.User&gt;\n         * class top.heiping.reflection.User\n         *\n         * Process finished with exit code 0\n         */\n\n\n        method = TestGeneric.class.getMethod(&quot;test02&quot;, null);\n        Type generiReturnType = method.getGenericReturnType();\n\n        if (generiReturnType instanceof ParameterizedType) {\n            Type[] actualTypeArguments = ((ParameterizedType)generiReturnType).getActualTypeArguments();\n            for (Type actualTypeArgument: actualTypeArguments) {\n                System.out.println(actualTypeArgument);\n            }\n        }\n\n        /**\n         * 运行结果\n         * class java.lang.String\n         * class top.heiping.reflection.User\n         */\n\n    }\n}\n\n</code></pre>\n<h4 id=\"反射操作注解\">反射操作注解</h4>\n<pre><code class=\"language-java\">package top.heiping.reflection;\n\nimport java.lang.annotation.*;\nimport java.lang.reflect.Field;\n\n/**\n * &lt;p&gt;\n * 反射操作注解\n * 首先根据 class 获取类信息， 类变量\n * 然后通过 反射获取类信息 或者类变量上的注解\n * 然后获取注解属性值。\n * &lt;/p&gt;\n *\n * @author: rch\n * @date: 2020-12-28\n */\npublic class TestReflectOpAnnotation {\n\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException {\n\n        Class c1 = Class.forName(&quot;top.heiping.reflection.Student2&quot;);\n\n        // 通过反射获取注解\n        Annotation[] annotations = c1.getAnnotations();\n        for (Annotation annotation: annotations) {\n            System.out.println(annotation);\n        }\n\n        // 获得注解的value的值\n        TableKuang tableKuang = (TableKuang) c1.getAnnotation(TableKuang.class);\n        System.out.println(tableKuang.value());\n\n        // 获得类指定的注解\n        Field field = c1.getDeclaredField(&quot;name&quot;);\n        FieldKuang fieldKuang = field.getAnnotation(FieldKuang.class);\n        System.out.println(fieldKuang.columentName());\n        System.out.println(fieldKuang.type());\n        System.out.println(fieldKuang.length());\n    }\n\n}\n\n\n@TableKuang(&quot;db_student&quot;)\nclass Student2{\n    @FieldKuang(columentName = &quot;db_id&quot;, type = &quot;int&quot;, length = 10)\n    private int id;\n    @FieldKuang(columentName = &quot;db_age&quot;, type = &quot;int&quot;, length = 10)\n    private int age;\n    @FieldKuang(columentName = &quot;db_name&quot;, type = &quot;string&quot;, length = 3)\n    private String name;\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Student2(int id, int age, String name) {\n        this.id = id;\n        this.age = age;\n        this.name = name;\n    }\n\n    public Student2() {\n    }\n\n    @Override\n    public String toString() {\n        return &quot;Student2{&quot; +\n                &quot;id=&quot; + id +\n                &quot;, age=&quot; + age +\n                &quot;, name=\'&quot; + name + \'\\\'\' +\n                \'}\';\n    }\n}\n\n\n// 类名的注解\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@interface TableKuang{\n    String value();\n}\n\n\n// 属性的注解\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\n@interface  FieldKuang{\n    String columentName();\n    String type();\n    int length();\n}\n</code></pre>\n', 0, NULL, NULL, '### JAVA 反射汇总\n#### 什么是注解 Annnotation\n\n\n 什么是注解 Annotation  不是程序本身可以对程序做出解释\n                        可以被其他程序读取\n                           以“@注释名” 形式   还可以添加一些参数值\n \n 内置注解\n @Override 从写\n @Deprecated  过期 废弃\n @SuppressWarnings 抑制编译时警告的。  @SuppressWarnings(\"all\") 镇压全部警告\n \n \n 元注解 的作用就是负责解释其他注解的注解，java定义了4个标准的meta-annotation类型，他们被用来提供对其他annotation类型做说明\n \n 这些类型和他们支持的类在java.lang.annotation包中可以找到（@Target  @Retention  @Documented  @Inherited）\n @Target：    用于描述注解的使用范围(即. 被描述的注解可以用在什么地方)\n @Retention  表示需要在什么级别保存该注释信息，用于描述注解的生命周期 (SOURCE < CLASS < RUNTIME)\n @Documennt  说明该注解被包含在javadoc中\n @Inherited  说明子类可以继承父类中的该注解。\n \n\n\n##### 自定义注解\n\n~~~ javascript\npackage top.heiping.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * <p>\n * 自定义注解\n * </p>\n *\n * @author: rch\n * @date: 2020-12-28\n */\npublic class TestMyAnnotation {\n\n    // 注解可以显示赋值  如果没有默认值 我们一定要给注解赋值\n    @MyAnnotation2(name = \"nameValue\")\n    public void test2() {\n\n    }\n\n    // 只有一个值不需要写value了  直接写值即可\n    @MyAnnotation3(\"rench\")\n    public void test3() {\n\n    }\n\n}\n\n@Target({ElementType.TYPE, ElementType.METHOD})\n@interface MyAnnotation2{\n\n    // 注解的参数：  参数类型 + 参数名 ();\n    String name();\n\n    int age() default 0;\n\n    // 如果默认值为 -1 代表不存在;\n    int id() default  -1;\n\n    String[] schools() default {\"西部开源\",\"清华大学\"};\n}\n\n\n// 默认只有一个值的  注解范例\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@interface MyAnnotation3{\n    String value();\n}\n~~~\n\n##### 元注解\n\n~~~ java\npackage top.heiping.annotation;\n\nimport java.lang.annotation.*;\n\n/**\n * <p>\n * 测试元注解 这里自定义一个在注解\n * </p>\n *\n * @author: rch\n * @date: 2020-12-28\n */\n@MyAnnotation\npublic class TestMetaAnnotation {\n\n    @MyAnnotation\n    public void test(){\n\n    }\n}\n\n// 定义一个注解    一个类只能有一个public\n\n// Target 表示我们的注解能够用在什么地方\n@Target(value = {ElementType.METHOD, ElementType.TYPE})\n\n// 表示我们的注解在什么地方才有笑  RunTIME > class > source\n@Retention(RetentionPolicy.RUNTIME)\n\n// 表示是否将我们的注解在javadoc 中\n@Documented\n\n// 子类可以继承父类的注解\n@Inherited\n@interface MyAnnotation{\n\n}\n~~~\n\n####  静态 VS 动态\n 静态 VS 动态\n 动态语言：  是一类运行时可以改变其结构的语言：例如新的函数. 对象. 甚至代码可以被引用， 已有的函数可以被删除或是其他结构上的变化。\n          var x = \"var a =3;var b=5; alert(a+b)\"\n          eval(x)\n \n 静态代码：   与动态语言相对应， 运行时结构不可变的语言就是静态语言。 如java  c  c++\n \n \n java不是动态语言，但java可以称之为 “准动态语言” 即java 有一定的动态性，我们额可以利用反射机制获得类似动态语言的特性。\n    java 的动态性让编程的时候更加灵活。  但也同时增加了危险性。\n \n \n Reflection(反射) 是java 被视为动态语言的关键，反射机制允许程序在执行期借助Reflection API取得任何类的内部信息，并能\n *  直接操作任意对象的内部属性及方法\n               Class c = Class.forName(\"java.lang.String\");\n \n   加载完类之后，在堆内存的方法区中就参数了一个Class类的对象。\n\n\n#### 类加载过程(如何理解反射)\n\n![img](https://pic1.zhimg.com/80/v2-4face8109e0d52ef5894c41c69e4ec6b_720w.jpg?source=1940ef5c)\n\n首先我们了解一下JVM，什么是JVM，Java的虚拟机，java之所以能跨平台就是因为这个东西，你可以理解成一个进程，程序，只不过他的作用是用来跑你的代码的。上图是java的内存模型，我们关注的点，一个方法区，一个栈，一个堆，初学的时候老师不深入的话只告诉你java的内存分为堆和栈，易懂点吧！\n\n假如你写了一段代码：Object o=new Object();\n\n运行了起来！\n\n首先JVM会启动，你的代码会编译成一个.class文件，然后被类加载器加载进jvm的内存中，你的类Object加载到方法区中，创建了Object类的class对象到堆中，注意这个不是new出来的对象，而是类的类型对象，每个类只有一个class对象，作为方法区类的数据结构的接口。jvm创建对象前，会先检查类是否加载，寻找类对应的class对象，若加载好，则为你的对象分配内存，初始化也就是代码:new Object()。\n\n上面的流程就是你自己写好的代码扔给jvm去跑，跑完就over了，jvm关闭，你的程序也停止了。\n\n为什么要讲这个呢？因为要理解反射必须知道它在什么场景下使用。\n\n题主想想上面的程序对象是自己new的，程序相当于写死了给jvm去跑。假如一个服务器上突然遇到某个请求哦要用到某个类，哎呀但没加载进jvm，是不是要停下来自己写段代码，new一下，哦启动一下服务器，（脑残）！\n\n  反射是什么呢？当我们的程序在运行时，需要动态的加载一些类这些类可能之前用不到所以不用加载到jvm，而是在运行时根据需要才加载，这样的好处对于服务器来说不言而喻，举个例子我们的项目底层有时是用mysql，有时用oracle，需要动态地根据实际情况加载驱动类，这个时候反射就有用了，假设 com.java.dbtest.myqlConnection，com.java.dbtest.oracleConnection这两个类我们要用，这时候我们的程序就写得比较动态化，通过Class tc = Class.forName(\"com.java.dbtest.TestConnection\");通过类的全类名让jvm在服务器中找到并加载这个类，而如果是oracle则传入的参数就变成另一个了。这时候就可以看到反射的好处了，这个动态性就体现出java的特性了！举多个例子，大家如果接触过spring，会发现当你配置各种各样的bean时，是以配置文件的形式配置的，你需要用到哪些bean就配哪些，spring容器就会根据你的需求去动态加载，你的程序就能健壮地运行。\n\n\n 类加载\n 加载      -  加载到内存     类的静态属性方法等 加载到方法区     并且在堆内存中有一个该类唯一的class包含类的所有信息，并且他指向方法去中该类信息\n \n \n 链接      -  验证   准备（正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配）     解析\n \n \n 初始化     - 执行clinit 方法  产生对象的初始化默认值。\n                当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。\n                虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确枷锁和同步。\n\n\n#### 类加载器\n\n *  类加载器   的加载顺序如下\n  *  1.   引导类加载器    加载的是  jre下的rt.jar   这里是我们常用的jar  比如  io等等\n  *  -引导类加载器  用c++编写的，是jvm自带的类加载器，负责java平台核心库，用来装在核心类库，该类无法直接获取\n  *  2.   拓展类加载器    加载的是  jre下的ext 文件下的包\n  *  -负责jre/lib/ext目录下的jar包或 -D java.ext.dirs 指定目录下的jar包装入工作\n  *  3.   系统类加载器    也就是app开头的那个类加载器 AppClassLoader， 也是我们最常用的类加载器\n  *  -负责java-classpath 或 -D java.class.path所指的目录下的类与jar包装入工作，是最常用的加载器\n  *  4.   自定义类加载器\n\n##### 类加载器demo\n~~~ java\npackage top.heiping.reflection;\n\n/**\n * <p>\n *  类加载器   的加载顺序如下\n *  1.   引导类加载器    加载的是  jre下的rt.jar   这里是我们常用的jar  比如  io等等\n *          -引导类加载器  用c++编写的，是jvm自带的类加载器，负责java平台核心库，用来装在核心类库，该类无法直接获取\n *  2.   拓展类加载器    加载的是  jre下的ext 文件下的包\n *          -负责jre/lib/ext目录下的jar包或 -D java.ext.dirs 指定目录下的jar包装入工作\n *  3.   系统类加载器    也就是app开头的那个类加载器 AppClassLoader， 也是我们最常用的类加载器\n *          -负责java-classpath 或 -D java.class.path所指的目录下的类与jar包装入工作，是最常用的加载器\n *  4.   自定义类加载器\n * </p>\n *\n * @author: rch\n * @date: 2020-12-28\n */\npublic class TestGetClassLoad {\n\n    public static void main(String[] args) throws ClassNotFoundException {\n        // 获取系统类加载器\n        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n        System.out.println(systemClassLoader);\n\n        // 获取系统类加载器的父类加载器 -》 拓展类加载器\n        ClassLoader parent = systemClassLoader.getParent();\n        System.out.println(parent);\n\n        // 获取拓展类加载器的父类加载器 ->根加载器(c/c++)\n        ClassLoader parent1 = parent.getParent();\n        System.out.println(parent1);\n\n        // 测试当前类是那个加载器加载的\n        ClassLoader thisClassLoader = Class.forName(\"top.heiping.reflection.TestGetClassLoad\").getClassLoader();\n        System.out.println(thisClassLoader);\n\n        // 测试jdk内置的类是谁加载的\n        thisClassLoader = Class.forName(\"java.lang.Object\").getClassLoader();\n        System.out.println(thisClassLoader);\n\n        // 如果获取系统类加载器可以加载的路径\n        System.out.println(System.getProperty(\"java.class.path\"));\n        /**\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\charsets.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\deploy.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\access-bridge-64.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\cldrdata.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\dnsns.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\jaccess.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\jfxrt.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\localedata.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\nashorn.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunec.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunjce_provider.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunmscapi.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunpkcs11.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\zipfs.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\javaws.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jce.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jfr.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jfxswt.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jsse.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\management-agent.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\plugin.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\resources.jar;\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\rt.jar;\n         * E:\\CodeWarehouse\\JavaWorkSpace\\java-base-study\\out\\production\\java-annotation-study;\n         * D:\\SoftWare\\IntelliJ IDEA 2020.3\\lib\\idea_rt.jar\n         */\n\n        // 双亲委派机制\n        /**\n         * 你定义一个java类  加载的时候他会往上找，一级一级的找(一级一级类加载器里去找)\n         * 如果找到了，你写的那个就没用 ，加载不了。 会用原来的包\n         */\n    }\n}\n\n~~~\n\n##### 通过class信息获取类的信息 \n\n~~~ java\npackage top.heiping.reflection;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\n/**\n * <p>\n *  获取类的信息 通过class信息\n *  通过反射获取运行时类的完整结构\n *  Field  Method   Constructor   Superclass   Interface    Annotation\n *  实现的全部接口\n *  所继承的父类\n *  全部的构造器\n *  全部的方法\n *  全部的Field\n *  注解\n *  。。。\n * </p>\n *\n * @author: rch\n * @date: 2020-12-28\n */\npublic class TestGetClassInfo {\n\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException {\n\n        Class c1 = Class.forName(\"top.heiping.reflection.UserInfo\");\n\n        UserInfo user = new UserInfo();\n        c1 = user.getClass();\n\n        // 1.获得类的名字\n        // 获得包名 + 类名\n        System.out.println(c1.getName());\n        // 获得类名\n        System.out.println(c1.getSimpleName());\n\n        // 2.获得类的属性\n        System.out.println(\"============getFields只能找到public 属性=======================\");\n        Field[] fields = c1.getFields();\n        for(Field field: fields) {\n            System.out.println(field);\n        }\n\n        // 2.获得类的属性\n        System.out.println(\"=============getDeclaredFields获得所有属性的值======================\");\n        Field[] fields2 = c1.getDeclaredFields();\n        for(Field field: fields2) {\n            System.out.println(field);\n        }\n\n        // 获得指定属性的值\n        Field name = c1.getDeclaredField(\"name\");\n        System.out.println(name);\n\n\n        // 获得类的方法\n        System.out.println(\"=====================获得本类及其父类的所有的public方法=================\");\n        Method[] methods = c1.getMethods();\n        methods = c1.getDeclaredMethods();\n        for (Method method : methods) {\n            System.out.println(\"正常的：\" + method);\n        }\n\n        System.out.println(\"=====================获得本类的所有方法=================\");\n        methods = c1.getDeclaredMethods();\n        for (Method method: methods) {\n            System.out.println(\"getDeclaredMethods:\" + method);\n        }\n\n        System.out.println(\"获得指定的方法\");\n        Method getName = c1.getMethod(\"getName\", null);\n        Method setName = c1.getMethod(\"setName\", String.class);\n\n        System.out.println(getName);\n        System.out.println(setName);\n\n\n        // 获得指定的构造器\n        System.out.println(\"=====================\");\n        Constructor[] constructors = c1.getConstructors();\n        for (Constructor constructor: constructors) {\n            System.out.println(constructor);\n        }\n\n        System.out.println(\"=====================\");\n        constructors = c1.getConstructors();\n        for (Constructor constructor: constructors) {\n            System.out.println(constructor);\n        }\n\n        System.out.println(\"==========获得指定的构造器===========\");\n        Constructor declaredConstructor = c1.getDeclaredConstructor(String.class, int.class, int.class, Float.class);\n        System.out.println(\"指定的类构造器：\" + declaredConstructor);\n    }\n}\n\n\n// 实体类\nclass UserInfo {\n    private String name;\n    private int id;\n    private int age;\n    public Float score;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public Float getScore() {\n        return score;\n    }\n\n    public void setScore(Float score) {\n        this.score = score;\n    }\n\n    public UserInfo(String name, int id, int age, Float score) {\n        this.name = name;\n        this.id = id;\n        this.age = age;\n        this.score = score;\n    }\n\n    public UserInfo() {\n    }\n}\n~~~\n\n#### 反射操作泛型\n\n~~~ java\npackage top.heiping.reflection;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * <p>\n *  泛型\n * </p>\n *\n * @author: rch\n * @date: 2020-12-28\n */\npublic class TestGeneric {\n\n    public void test01(Map<String, User> map, List<User> list) {\n        System.out.println(\"test01\");\n    }\n\n    public Map<String, User> test02() {\n        System.out.println(\"test02\");\n        return null;\n    }\n\n\n    public static void main(String[] args) throws NoSuchMethodException {\n        Method method = TestGeneric.class.getMethod(\"test01\", Map.class, List.class);\n\n        Type[] genericParameterTypes = method.getGenericParameterTypes();\n        for (Type genericParameterType : genericParameterTypes) {\n            System.out.println(\"#\" + genericParameterType);\n\n            // 想打印出map里的 信息  和list里的信息  先判断是否是一个参数话类型，如果是一个参数话类型，我们将其强转为一个参数话类型\n            // 然后使用参数话类型的 方法获取其泛型\n            if (genericParameterType instanceof ParameterizedType) {\n                Type[] actualTypeArguments = ((ParameterizedType)genericParameterType).getActualTypeArguments();\n                for (Type actualTypeArgument: actualTypeArguments) {\n                    System.out.println(actualTypeArgument);\n                }\n            }\n        }\n\n        /**\n         * 结果：\n         * D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\bin\\java.exe \"-javaagent:D:\\SoftWare\\IntelliJ IDEA 2020.3\\lib\\idea_rt.jar=62372:D:\\SoftWare\\IntelliJ IDEA 2020.3\\bin\" -Dfile.encoding=UTF-8 -classpath D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\charsets.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\deploy.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\access-bridge-64.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\cldrdata.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\dnsns.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\jaccess.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\jfxrt.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\localedata.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\nashorn.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunec.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunjce_provider.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunmscapi.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\sunpkcs11.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\zipfs.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\javaws.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jce.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jfr.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jfxswt.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\jsse.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\management-agent.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\plugin.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\resources.jar;D:\\CodeSoftWare\\Java\\jdk1.8.0_152\\jre\\lib\\rt.jar;E:\\CodeWarehouse\\JavaWorkSpace\\java-base-study\\out\\production\\java-annotation-study top.heiping.reflection.TestGeneric\n         * #java.util.Map<java.lang.String, top.heiping.reflection.User>\n         * class java.lang.String\n         * class top.heiping.reflection.User\n         * #java.util.List<top.heiping.reflection.User>\n         * class top.heiping.reflection.User\n         *\n         * Process finished with exit code 0\n         */\n\n\n        method = TestGeneric.class.getMethod(\"test02\", null);\n        Type generiReturnType = method.getGenericReturnType();\n\n        if (generiReturnType instanceof ParameterizedType) {\n            Type[] actualTypeArguments = ((ParameterizedType)generiReturnType).getActualTypeArguments();\n            for (Type actualTypeArgument: actualTypeArguments) {\n                System.out.println(actualTypeArgument);\n            }\n        }\n\n        /**\n         * 运行结果\n         * class java.lang.String\n         * class top.heiping.reflection.User\n         */\n\n    }\n}\n\n~~~\n\n#### 反射操作注解\n\n~~~ java\npackage top.heiping.reflection;\n\nimport java.lang.annotation.*;\nimport java.lang.reflect.Field;\n\n/**\n * <p>\n * 反射操作注解\n * 首先根据 class 获取类信息， 类变量\n * 然后通过 反射获取类信息 或者类变量上的注解\n * 然后获取注解属性值。\n * </p>\n *\n * @author: rch\n * @date: 2020-12-28\n */\npublic class TestReflectOpAnnotation {\n\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException {\n\n        Class c1 = Class.forName(\"top.heiping.reflection.Student2\");\n\n        // 通过反射获取注解\n        Annotation[] annotations = c1.getAnnotations();\n        for (Annotation annotation: annotations) {\n            System.out.println(annotation);\n        }\n\n        // 获得注解的value的值\n        TableKuang tableKuang = (TableKuang) c1.getAnnotation(TableKuang.class);\n        System.out.println(tableKuang.value());\n\n        // 获得类指定的注解\n        Field field = c1.getDeclaredField(\"name\");\n        FieldKuang fieldKuang = field.getAnnotation(FieldKuang.class);\n        System.out.println(fieldKuang.columentName());\n        System.out.println(fieldKuang.type());\n        System.out.println(fieldKuang.length());\n    }\n\n}\n\n\n@TableKuang(\"db_student\")\nclass Student2{\n    @FieldKuang(columentName = \"db_id\", type = \"int\", length = 10)\n    private int id;\n    @FieldKuang(columentName = \"db_age\", type = \"int\", length = 10)\n    private int age;\n    @FieldKuang(columentName = \"db_name\", type = \"string\", length = 3)\n    private String name;\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Student2(int id, int age, String name) {\n        this.id = id;\n        this.age = age;\n        this.name = name;\n    }\n\n    public Student2() {\n    }\n\n    @Override\n    public String toString() {\n        return \"Student2{\" +\n                \"id=\" + id +\n                \", age=\" + age +\n                \", name=\'\" + name + \'\\\'\' +\n                \'}\';\n    }\n}\n\n\n// 类名的注解\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@interface TableKuang{\n    String value();\n}\n\n\n// 属性的注解\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\n@interface  FieldKuang{\n    String columentName();\n    String type();\n    int length();\n}\n~~~\n\n', '', '2021-07-18-11-16-34', 0, 'JAVA 反射汇总什么是注解 Annnotation什么是注解 Annotation  不是程序本身可以对程序做出解释可以被其他程序读取以“@注释名” 形式   还可以添加一些参数值内置注解@Override 从写@Deprecated  过期 废弃@SuppressWarnings 抑制编译时警告', '', 'http://supren.top/upload/2021/07/3a884ab2d57d41229faaa74aee5554a9-ad9051c394bb4bceb9d498a9680457b9.jpg', 'Java反射汇总', 0, NULL, 76, 17853);
INSERT INTO `posts` VALUES (0, 6, '2021-07-18 22:08:06.735000', '2021-07-18 22:08:51.150000', b'0', '2021-07-18 22:08:51.135000', 0, '<h3 id=\"满招损谦受益\">满招损，谦受益。</h3>\n<p>  自满于已获得的成绩，将会招来损失；谦逊并感到自己的不足，能因此得益。</p>\n<p><img src=\"http://supren.top/upload/2021/07/%E6%BB%A1%E6%8B%9B%E6%8D%9F%E8%B0%A6%E5%8F%97%E7%9B%8A-1eecddd8749647f786fce2cfecb16fb2.jpg\" alt=\"满招损谦受益\" /></p>\n', 0, NULL, NULL, '### 满招损，谦受益。\n&nbsp;&nbsp;自满于已获得的成绩，将会招来损失；谦逊并感到自己的不足，能因此得益。\n\n![满招损谦受益](http://supren.top/upload/2021/07/%E6%BB%A1%E6%8B%9B%E6%8D%9F%E8%B0%A6%E5%8F%97%E7%9B%8A-1eecddd8749647f786fce2cfecb16fb2.jpg)', '', '满招损谦受益', 0, '满招损，谦受益。  自满于已获得的成绩，将会招来损失；谦逊并感到自己的不足，能因此得益。', '', 'http://supren.top/upload/2021/07/book-5676a0551f0346ba88e913f70056e1eb.jpg', '满招损，谦受益', 0, NULL, 71, 196);
INSERT INTO `posts` VALUES (0, 7, '2021-07-20 11:21:27.767000', '2021-07-20 11:36:01.441000', b'0', '2021-07-20 11:36:01.400000', 0, '<h3 id=\"静态代理\">静态代理</h3>\n<p>静态代理模式在不改变目标对象的前提下，实现了对目标对象的功能扩展。<br />\n不足：静态代理实现了目标对象的所有方法，一旦目标接口增加方法，代理对象和目标对象都要进行相应的修改，增加维护成本。</p>\n<h4 id=\"编码demo\">编码demo</h4>\n<p>1.接口</p>\n<blockquote>\n<pre><code>package top.supren.test.agent.jt;\n\n/**\n * &lt;p&gt;\n * 定义发送短信的接口\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-19\n */\npublic interface SmsService {\n    String send(String message);\n}\n</code></pre>\n</blockquote>\n<p>2.实现</p>\n<blockquote>\n<pre><code>package top.supren.test.agent.jt;\n\n/**\n * &lt;p&gt;\n * 定义发送短信的接口\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-19\n */\npublic interface SmsService {\n    String send(String message);\n}\n</code></pre>\n</blockquote>\n<p>3.代理</p>\n<blockquote>\n<pre><code>package top.supren.test.agent.jt;\n\n/**\n * &lt;p&gt;\n *\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-19\n */\npublic class SmsProxy implements SmsService{\n\n    private final SmsService smsService;\n\n    public SmsProxy(SmsService smsService) {\n        this.smsService = smsService;\n    }\n\n    @Override\n    public String send(String message) {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(&quot;before method send()&quot;);\n        smsService.send(message);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(&quot;after method send()&quot;);\n        return null;\n    }\n}\n</code></pre>\n</blockquote>\n<p>4.测试：</p>\n<blockquote>\n<pre><code>package top.supren.test.agent.jt;\n\n/**\n * &lt;p&gt;\n * 实际使用\n * 静态代理中，我们对目标对象的每个方法都是增强的手动完成的。\n *  -非常不灵活 接口一旦新增方法，目标对象和代理对象都要修改  实际上使用场景非常少\n *  -JVM 层面说， 静态代理在编译时就将接口，实现类，代理类 这些都编程了一个个实际的class文件。\n *\n * 静态代理实现步骤：\n * -定义一个接口以及实现类\n * -创建一个代理类同样实现这个接口\n * -讲目标对象注入代理类，然后在代理类的对应方法调用目标类中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，\n * 并且可以在目标方法指向前后做一些自己想做的事情。\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-19\n */\npublic class MainTest {\n\n    public static void main(String[] args) {\n        SmsService smsService = new SmsServiceImpl();\n        SmsProxy smsProxy = new SmsProxy(smsService);\n        smsProxy.send(&quot;java&quot;);\n    }\n}\n</code></pre>\n</blockquote>\n<h3 id=\"动态代理\">动态代理</h3>\n<blockquote>\n<p>相比静态代理来说，动态代理更加灵活。我们不需要针对每个目标都单独创建一个代理类。并且不需要我们必须实现借口。我们可以直接代理实现类(CGLIB动态代理机制)</p>\n<p>从JVM角度。动态代理是在运行是动态生成字节码，并加载到JVM中的。</p>\n<p>说道动态代理， Spring AOP RPC框架应该是两个不得不提的。他们的实现都依赖动态代理。</p>\n</blockquote>\n<blockquote>\n<p>就java来说，动态代理的实现又很多中， 比如JDK的动态代理， CGLIB动态代理等等。</p>\n<ol>\n<li>\n<p>JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。</p>\n<p>-- 在java动态代理机制中， InvocationHandler接口和Proxy 类是核心</p>\n<p>-- Proxy类中使用频率最高的方法是： newProxyInstance(), 这个方法主要用来生成一个代理对象</p>\n</li>\n<li>\n<p>为了解决这个问题，我们可以使用CGLIB动态代理机制来避免</p>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"jdk-动态代理详解\">JDK 动态代理详解：</h4>\n<h5 id=\"proxy\">Proxy:</h5>\n<pre><code>newProxyInstance这个方法一共有 3 个参数：\n    loader :类加载器，用于加载代理对象。\n    interfaces : 被代理类实现的一些接口；\n    h : 实现了 InvocationHandler 接口的对象\n</code></pre>\n<blockquote>\n<h2 id=\"javalangreflect-类-proxy\">java.lang.reflect 类 Proxy</h2>\n<pre><code>java.lang.Object\n  java.lang.reflect.Proxy\n</code></pre>\n<ul>\n<li>\n<p><strong>所有已实现的接口：</strong></p>\n<p><a href=\"https://tool.oschina.net/uploads/apidocs/jdk-zh/java/io/Serializable.html\">Serializable</a></p>\n</li>\n</ul>\n<hr />\n<ul>\n<li><code>public class **Proxy**</code></li>\n<li>​     <code>extends Object</code></li>\n<li>​     implements       Serializable     `</li>\n</ul>\n<p><code>Proxy</code> 提供用于创建动态代理类和实例的静态方法，它还是由这些方法创建的所有动态代理类的超类。</p>\n<p>创建某一接口 <code>Foo</code> 的代理：</p>\n<pre><code>     InvocationHandler handler = new MyInvocationHandler(...);\n     Class proxyClass = Proxy.getProxyClass(\n         Foo.class.getClassLoader(), new Class[] { Foo.class });\n     Foo f = (Foo) proxyClass.\n         getConstructor(new Class[] { InvocationHandler.class }).\n         newInstance(new Object[] { handler });\n \n</code></pre>\n<p>或使用以下更简单的方法：</p>\n<pre><code>     Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),\n                                          new Class[] { Foo.class },\n                                          handler);\n \n</code></pre>\n</blockquote>\n<h5 id=\"invocationhandler\">InvocationHandler</h5>\n<blockquote>\n<h2 id=\"javalangreflect-接口-invocationhandler\">java.lang.reflect 接口 InvocationHandler</h2>\n<ul>\n<li>\n<p><strong>所有已知实现类：</strong></p>\n<p><a href=\"https://tool.oschina.net/uploads/apidocs/jdk-zh/javax/management/openmbean/CompositeDataInvocationHandler.html\">CompositeDataInvocationHandler</a>, <a href=\"https://tool.oschina.net/uploads/apidocs/jdk-zh/java/beans/EventHandler.html\">EventHandler</a>, <a href=\"https://tool.oschina.net/uploads/apidocs/jdk-zh/javax/management/MBeanServerInvocationHandler.html\">MBeanServerInvocationHandler</a>, <a href=\"https://tool.oschina.net/uploads/apidocs/jdk-zh/java/rmi/server/RemoteObjectInvocationHandler.html\">RemoteObjectInvocationHandler</a></p>\n</li>\n</ul>\n<hr />\n<ul>\n<li><code>public interface **InvocationHandler**</code></li>\n</ul>\n<p><code>InvocationHandler</code> 是代理实例的<em>调用处理程序</em> 实现的接口。</p>\n<p>每个代理实例都具有一个关联的调用处理程序。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序的 <code>invoke</code> 方法。</p>\n<ul>\n<li>\n<p><strong>从以下版本开始：</strong></p>\n<p>1.3</p>\n</li>\n<li>\n<p><strong>另请参见：</strong></p>\n<p><a href=\"https://tool.oschina.net/uploads/apidocs/jdk-zh/java/lang/reflect/Proxy.html\"><code>Proxy</code></a></p>\n</li>\n</ul>\n<hr />\n<table>\n<thead>\n<tr><th><strong>方法摘要</strong></th><th> </th></tr>\n</thead>\n<tbody>\n<tr><td><code>Object</code></td><td>[invoke](<a href=\"https://tool.oschina.net/uploads/apidocs/jdk-zh/java/lang/reflect/InvocationHandler.html#invoke(java.lang.Object\">https://tool.oschina.net/uploads/apidocs/jdk-zh/java/lang/reflect/InvocationHandler.html#invoke(java.lang.Object</a>, java.lang.reflect.Method, java.lang.Object[]))**(Object proxy, Method method, Object[] args)      在代理实例上处理方法调用并返回结果。</td></tr>\n</tbody>\n</table>\n<pre><code>也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，\n实际会调用到实现InvocationHandler 接口的类的 invoke()方法。\n你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\n</code></pre>\n</blockquote>\n<h5 id=\"编码demo-1\">编码demo</h5>\n<p>1.接口</p>\n<blockquote>\n<pre><code>package top.supren.test.agent.jt;\n\n/**\n * &lt;p&gt;\n * 定义发送短信的接口\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-19\n */\npublic interface SmsService {\n    String send(String message);\n}\n</code></pre>\n</blockquote>\n<p>2.实现类</p>\n<blockquote>\n<pre><code>package top.supren.test.agent.jt;\n\n/**\n * &lt;p&gt;\n * 实现发送短信的接口\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-19\n */\npublic class SmsServiceImpl implements SmsService{\n    @Override\n    public String send(String message) {\n        System.out.println(&quot;send message:&quot; + message);\n        return message;\n    }\n}\n</code></pre>\n</blockquote>\n<p>3.InvocationHandler 实现类</p>\n<blockquote>\n<pre><code>package top.supren.test.agent.dt.redme;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\n/**\n * &lt;p&gt;\n * 通过Proxy的newProxyInstance 静态方法根据参赛生成真正的代理类\n * 通过invoke 方法调用程序处理 \n *    当我们的动态代理对象调用一个方法时候，\n      这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-19\n */\npublic class DebugInvocationHandler implements InvocationHandler {\n\n    // 代理类中的真是对象\n    private Object target;\n\n    public void setTarget(Object target ) {\n        this.target = target ;\n    }\n\n\n    /**\n     * invoke() 方法: 当我们的动态代理对象调用原生方法的时候，最终实际上调用到的是 invoke() 方法，\n     * 然后 invoke() 方法代替我们去调用了被代理对象的原生方法。\n     * @param proxy\n     * @param method\n     * @param args\n     * @return\n     * @throws Throwable\n     */\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(&quot;before method &quot; + method.getName());\n        Object result = method.invoke(target, args);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(&quot;after method &quot; + method.getName());\n        return result;\n    }\n\n\n    /**\n     * getProxy() ：主要通过Proxy.newProxyInstance（）方法获取某个类的代理对象\n     * @return\n     */\n    public Object getProxy() {\n        return Proxy.newProxyInstance(\n                target.getClass().getClassLoader(), // 目标类的类加载\n                target.getClass().getInterfaces(),  // 代理需要实现的接口，可指定多个\n                this   // 代理对象对应的自定义 InvocationHandler\n        );\n    }\n}\n</code></pre>\n</blockquote>\n<p>4.测试类</p>\n<blockquote>\n<pre><code>package top.supren.test.agent.dt.redme;\n\nimport top.supren.test.agent.jt.SmsService;\nimport top.supren.test.agent.jt.SmsServiceImpl;\n\nimport java.lang.reflect.Proxy;\n\n/**\n * &lt;p&gt;\n *\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-19\n */\npublic class MainTest {\n    public static void main(String[] args) {\n        // 真是对象\n        SmsService smsService  = new SmsServiceImpl();\n        DebugInvocationHandler debugInvocationHandler = new DebugInvocationHandler();\n        debugInvocationHandler.setTarget(smsService);\n        // 动态生成代理类\n        SmsService proxy = (SmsService) debugInvocationHandler.getProxy();\n        // 当我们的动态代理对象调用一个方法时候，这个方法的调用会被转发到实现InvocationHandler接口类的invoke方法来调用 \n        proxy.send(&quot;java&quot;);\n    }\n}\n</code></pre>\n</blockquote>\n<h4 id=\"cglib\">CGLIB</h4>\n<h5 id=\"为什么使用cglib\">为什么使用CGLIB</h5>\n<blockquote>\n<p>CGLIB代理主要通过对字节码的操作，为对象引入间接级别，以控制对象的访问。我们知道Java中有一个动态代理也是做这个事情的，那我们为什么不直接使用Java动态代理，而要使用CGLIB呢？答案是CGLIB相比于JDK动态代理更加强大，<strong>JDK动态代理虽然简单易用，但是其有一个致命缺陷是，只能对接口进行代理。如果要代理的类为一个普通类、没有接口，那么Java动态代理就没法使用了</strong></p>\n</blockquote>\n<h5 id=\"编码demo-2\">编码demo</h5>\n<p>1.导包</p>\n<blockquote>\n<dependency>\n    <groupId>cglib</groupId>\n    <artifactId>cglib</artifactId>\n    <version>3.2.5</version>\n</dependency>\n</blockquote>\n<p>2.目标对象：</p>\n<blockquote>\n<p>package com.cglib;</p>\n<p>public class UserDao{</p>\n<pre><code>public void save() {\n    System.out.println(&quot;保存数据&quot;);\n}\n</code></pre>\n<p>}</p>\n</blockquote>\n<p>3.代理对象</p>\n<blockquote>\n<pre><code>import net.sf.cglib.proxy.MethodProxy;\n\npublic class ProxyFactory implements MethodInterceptor{\n\n    private Object target;//维护一个目标对象\n    public ProxyFactory(Object target) {\n        this.target = target;\n    }\n    \n    //为目标对象生成代理对象\n    public Object getProxyInstance() {\n        //工具类\n        Enhancer en = new Enhancer();\n        //设置父类\n        en.setSuperclass(target.getClass());\n        //设置回调函数\n        en.setCallback(this);\n        //创建子类对象代理\n        return en.create();\n    }\n\n    @Override\n    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n        System.out.println(&quot;开启事务&quot;);\n        // 执行目标对象的方法\n        Object returnValue = method.invoke(target, args);\n        System.out.println(&quot;关闭事务&quot;);\n        return null;\n    }\n}\n</code></pre>\n</blockquote>\n<p>4.测试类</p>\n<blockquote>\n<p>package com.cglib;</p>\n<p>import org.junit.Test;</p>\n<p>public class TestProxy {</p>\n<pre><code>@Test\npublic void testCglibProxy(){\n    //目标对象\n    UserDao target = new UserDao();\n    System.out.println(target.getClass());\n    //代理对象\n    UserDao proxy = (UserDao) new ProxyFactory(target).getProxyInstance();\n    System.out.println(proxy.getClass());\n    //执行代理对象方法\n    proxy.save();\n}\n</code></pre>\n<p>}</p>\n</blockquote>\n<h3 id=\"总结\">总结：</h3>\n<blockquote>\n<p>1.静态代理实现比较简单，知识代理对象对目标对象进行包装，即可增强功能，但静态代理只能为一个目标对象服务，如果目标对象过多，则会产生很多的代理类。</p>\n<p>2.JDK动态代理需要目标对象实现业务接口，代理类只需要实现InvocationHandler 接口。</p>\n<p>3.动态代理生成的类为 com.sun.proxy   cglib代理生成的类为class</p>\n<p>4.静态代理在编译时产生class字节码文件，可以直接使用，效率高</p>\n<p>5.动态打理必须实现InvocationHandler 接口，通过反射代理方法，比较消耗系统资源，但可以减少代理的数量，使用更灵活。</p>\n<p>6.cglib 代理无需实现接口，通过生成字节码实现代理，比反射稍快，不存在性能问题。但cglib 会继承目标对象，需要重写方法，所以目标对象不能为final类。</p>\n</blockquote>\n', 0, NULL, NULL, '### 静态代理\n\n静态代理模式在不改变目标对象的前提下，实现了对目标对象的功能扩展。\n不足：静态代理实现了目标对象的所有方法，一旦目标接口增加方法，代理对象和目标对象都要进行相应的修改，增加维护成本。\n\n#### 编码demo\n\n1.接口\n\n> ```\n> package top.supren.test.agent.jt;\n> \n> /**\n>  * <p>\n>  * 定义发送短信的接口\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-19\n>  */\n> public interface SmsService {\n>     String send(String message);\n> }\n> ```\n\n2.实现\n\n> ```\n> package top.supren.test.agent.jt;\n> \n> /**\n>  * <p>\n>  * 定义发送短信的接口\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-19\n>  */\n> public interface SmsService {\n>     String send(String message);\n> }\n> ```\n\n3.代理\n\n> ```\n> package top.supren.test.agent.jt;\n> \n> /**\n>  * <p>\n>  *\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-19\n>  */\n> public class SmsProxy implements SmsService{\n> \n>     private final SmsService smsService;\n> \n>     public SmsProxy(SmsService smsService) {\n>         this.smsService = smsService;\n>     }\n> \n>     @Override\n>     public String send(String message) {\n>         //调用方法之前，我们可以添加自己的操作\n>         System.out.println(\"before method send()\");\n>         smsService.send(message);\n>         //调用方法之后，我们同样可以添加自己的操作\n>         System.out.println(\"after method send()\");\n>         return null;\n>     }\n> }\n> ```\n\n4.测试：\n\n> ```\n> package top.supren.test.agent.jt;\n> \n> /**\n>  * <p>\n>  * 实际使用\n>  * 静态代理中，我们对目标对象的每个方法都是增强的手动完成的。\n>  *  -非常不灵活 接口一旦新增方法，目标对象和代理对象都要修改  实际上使用场景非常少\n>  *  -JVM 层面说， 静态代理在编译时就将接口，实现类，代理类 这些都编程了一个个实际的class文件。\n>  *\n>  * 静态代理实现步骤：\n>  * -定义一个接口以及实现类\n>  * -创建一个代理类同样实现这个接口\n>  * -讲目标对象注入代理类，然后在代理类的对应方法调用目标类中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，\n>  * 并且可以在目标方法指向前后做一些自己想做的事情。\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-19\n>  */\n> public class MainTest {\n> \n>     public static void main(String[] args) {\n>         SmsService smsService = new SmsServiceImpl();\n>         SmsProxy smsProxy = new SmsProxy(smsService);\n>         smsProxy.send(\"java\");\n>     }\n> }\n> ```\n\n### 动态代理\n\n> 相比静态代理来说，动态代理更加灵活。我们不需要针对每个目标都单独创建一个代理类。并且不需要我们必须实现借口。我们可以直接代理实现类(CGLIB动态代理机制)\n>\n> 从JVM角度。动态代理是在运行是动态生成字节码，并加载到JVM中的。\n>\n> 说道动态代理， Spring AOP RPC框架应该是两个不得不提的。他们的实现都依赖动态代理。\n\n\n\n> 就java来说，动态代理的实现又很多中， 比如JDK的动态代理， CGLIB动态代理等等。\n>\n> 1. JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。\n>\n>    -- 在java动态代理机制中， InvocationHandler接口和Proxy 类是核心\n>\n>    -- Proxy类中使用频率最高的方法是： newProxyInstance(), 这个方法主要用来生成一个代理对象\n>\n> 2. 为了解决这个问题，我们可以使用CGLIB动态代理机制来避免\n\n\n\n#### JDK 动态代理详解：\n\n##### Proxy:\n\n```\nnewProxyInstance这个方法一共有 3 个参数：\n    loader :类加载器，用于加载代理对象。\n    interfaces : 被代理类实现的一些接口；\n    h : 实现了 InvocationHandler 接口的对象\n```\n\n> ## java.lang.reflect 类 Proxy\n>\n> ```\n> java.lang.Object\n>   java.lang.reflect.Proxy\n> ```\n>\n> - **所有已实现的接口：**\n>\n>   [Serializable](https://tool.oschina.net/uploads/apidocs/jdk-zh/java/io/Serializable.html)\n>\n> ------\n>\n> - `public class **Proxy**           `\n> - ​     `extends       Object                `\n> - ​     implements       Serializable     `\n>\n> `Proxy` 提供用于创建动态代理类和实例的静态方法，它还是由这些方法创建的所有动态代理类的超类。\n>\n> 创建某一接口 `Foo` 的代理：\n>\n> ```\n>      InvocationHandler handler = new MyInvocationHandler(...);\n>      Class proxyClass = Proxy.getProxyClass(\n>          Foo.class.getClassLoader(), new Class[] { Foo.class });\n>      Foo f = (Foo) proxyClass.\n>          getConstructor(new Class[] { InvocationHandler.class }).\n>          newInstance(new Object[] { handler });\n>  \n> ```\n>\n> 或使用以下更简单的方法：\n>\n> ```\n>      Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),\n>                                           new Class[] { Foo.class },\n>                                           handler);\n>  \n> ```\n\n##### InvocationHandler\n\n> ## java.lang.reflect 接口 InvocationHandler\n>\n> - **所有已知实现类：**\n>\n>   [CompositeDataInvocationHandler](https://tool.oschina.net/uploads/apidocs/jdk-zh/javax/management/openmbean/CompositeDataInvocationHandler.html), [EventHandler](https://tool.oschina.net/uploads/apidocs/jdk-zh/java/beans/EventHandler.html), [MBeanServerInvocationHandler](https://tool.oschina.net/uploads/apidocs/jdk-zh/javax/management/MBeanServerInvocationHandler.html), [RemoteObjectInvocationHandler](https://tool.oschina.net/uploads/apidocs/jdk-zh/java/rmi/server/RemoteObjectInvocationHandler.html)\n>\n> ------\n>\n> - `public interface **InvocationHandler**`\n>\n> `InvocationHandler` 是代理实例的*调用处理程序* 实现的接口。\n>\n> 每个代理实例都具有一个关联的调用处理程序。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序的 `invoke` 方法。\n>\n> - **从以下版本开始：**\n>\n>   1.3\n>\n> - **另请参见：**\n>\n>   [`Proxy`](https://tool.oschina.net/uploads/apidocs/jdk-zh/java/lang/reflect/Proxy.html)\n>\n> ------\n>\n> \n>\n> | **方法摘要** |                                                              |\n> | ------------ | ------------------------------------------------------------ |\n> | ` Object`    | [invoke](https://tool.oschina.net/uploads/apidocs/jdk-zh/java/lang/reflect/InvocationHandler.html#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]))**(Object proxy, Method method, Object[] args)      在代理实例上处理方法调用并返回结果。 |\n>\n> ```\n> 也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，\n> 实际会调用到实现InvocationHandler 接口的类的 invoke()方法。\n> 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\n> ```\n\n##### 编码demo\n\n1.接口\n\n> ```\n> package top.supren.test.agent.jt;\n> \n> /**\n>  * <p>\n>  * 定义发送短信的接口\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-19\n>  */\n> public interface SmsService {\n>     String send(String message);\n> }\n> ```\n\n2.实现类\n\n> ```\n> package top.supren.test.agent.jt;\n> \n> /**\n>  * <p>\n>  * 实现发送短信的接口\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-19\n>  */\n> public class SmsServiceImpl implements SmsService{\n>     @Override\n>     public String send(String message) {\n>         System.out.println(\"send message:\" + message);\n>         return message;\n>     }\n> }\n> ```\n\n3.InvocationHandler 实现类\n\n> ```\n> package top.supren.test.agent.dt.redme;\n> \n> import java.lang.reflect.InvocationHandler;\n> import java.lang.reflect.Method;\n> import java.lang.reflect.Proxy;\n> \n> /**\n>  * <p>\n>  * 通过Proxy的newProxyInstance 静态方法根据参赛生成真正的代理类\n>  * 通过invoke 方法调用程序处理 \n>  *    当我们的动态代理对象调用一个方法时候，\n>       这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-19\n>  */\n> public class DebugInvocationHandler implements InvocationHandler {\n> \n>     // 代理类中的真是对象\n>     private Object target;\n> \n>     public void setTarget(Object target ) {\n>         this.target = target ;\n>     }\n> \n> \n>     /**\n>      * invoke() 方法: 当我们的动态代理对象调用原生方法的时候，最终实际上调用到的是 invoke() 方法，\n>      * 然后 invoke() 方法代替我们去调用了被代理对象的原生方法。\n>      * @param proxy\n>      * @param method\n>      * @param args\n>      * @return\n>      * @throws Throwable\n>      */\n>     @Override\n>     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n>         //调用方法之前，我们可以添加自己的操作\n>         System.out.println(\"before method \" + method.getName());\n>         Object result = method.invoke(target, args);\n>         //调用方法之后，我们同样可以添加自己的操作\n>         System.out.println(\"after method \" + method.getName());\n>         return result;\n>     }\n> \n> \n>     /**\n>      * getProxy() ：主要通过Proxy.newProxyInstance（）方法获取某个类的代理对象\n>      * @return\n>      */\n>     public Object getProxy() {\n>         return Proxy.newProxyInstance(\n>                 target.getClass().getClassLoader(), // 目标类的类加载\n>                 target.getClass().getInterfaces(),  // 代理需要实现的接口，可指定多个\n>                 this   // 代理对象对应的自定义 InvocationHandler\n>         );\n>     }\n> }\n> ```\n\n4.测试类\n\n> ```\n> package top.supren.test.agent.dt.redme;\n> \n> import top.supren.test.agent.jt.SmsService;\n> import top.supren.test.agent.jt.SmsServiceImpl;\n> \n> import java.lang.reflect.Proxy;\n> \n> /**\n>  * <p>\n>  *\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-19\n>  */\n> public class MainTest {\n>     public static void main(String[] args) {\n>         // 真是对象\n>         SmsService smsService  = new SmsServiceImpl();\n>         DebugInvocationHandler debugInvocationHandler = new DebugInvocationHandler();\n>         debugInvocationHandler.setTarget(smsService);\n>         // 动态生成代理类\n>         SmsService proxy = (SmsService) debugInvocationHandler.getProxy();\n>         // 当我们的动态代理对象调用一个方法时候，这个方法的调用会被转发到实现InvocationHandler接口类的invoke方法来调用 \n>         proxy.send(\"java\");\n>     }\n> }\n> ```\n\n#### CGLIB\n\n##### 为什么使用CGLIB\n\n> CGLIB代理主要通过对字节码的操作，为对象引入间接级别，以控制对象的访问。我们知道Java中有一个动态代理也是做这个事情的，那我们为什么不直接使用Java动态代理，而要使用CGLIB呢？答案是CGLIB相比于JDK动态代理更加强大，**JDK动态代理虽然简单易用，但是其有一个致命缺陷是，只能对接口进行代理。如果要代理的类为一个普通类、没有接口，那么Java动态代理就没法使用了** \n\n##### 编码demo\n\n1.导包\n\n> <dependency>\n>     <groupId>cglib</groupId>\n>     <artifactId>cglib</artifactId>\n>     <version>3.2.5</version>\n> </dependency>\n\n2.目标对象：\n\n> package com.cglib;\n>\n> public class UserDao{\n>\n>     public void save() {\n>         System.out.println(\"保存数据\");\n>     }\n>\n> }\n\n3.代理对象\n\n> ```\n> import net.sf.cglib.proxy.MethodProxy;\n> \n> public class ProxyFactory implements MethodInterceptor{\n> \n>     private Object target;//维护一个目标对象\n>     public ProxyFactory(Object target) {\n>         this.target = target;\n>     }\n>     \n>     //为目标对象生成代理对象\n>     public Object getProxyInstance() {\n>         //工具类\n>         Enhancer en = new Enhancer();\n>         //设置父类\n>         en.setSuperclass(target.getClass());\n>         //设置回调函数\n>         en.setCallback(this);\n>         //创建子类对象代理\n>         return en.create();\n>     }\n> \n>     @Override\n>     public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n>         System.out.println(\"开启事务\");\n>         // 执行目标对象的方法\n>         Object returnValue = method.invoke(target, args);\n>         System.out.println(\"关闭事务\");\n>         return null;\n>     }\n> }\n> ```\n\n4.测试类\n\n> package com.cglib;\n>\n> import org.junit.Test;\n>\n> public class TestProxy {\n>\n>     @Test\n>     public void testCglibProxy(){\n>         //目标对象\n>         UserDao target = new UserDao();\n>         System.out.println(target.getClass());\n>         //代理对象\n>         UserDao proxy = (UserDao) new ProxyFactory(target).getProxyInstance();\n>         System.out.println(proxy.getClass());\n>         //执行代理对象方法\n>         proxy.save();\n>     }\n>\n> }\n\n### 总结：\n\n> 1.静态代理实现比较简单，知识代理对象对目标对象进行包装，即可增强功能，但静态代理只能为一个目标对象服务，如果目标对象过多，则会产生很多的代理类。\n>\n> 2.JDK动态代理需要目标对象实现业务接口，代理类只需要实现InvocationHandler 接口。\n>\n> 3.动态代理生成的类为 com.sun.proxy   cglib代理生成的类为class \n>\n> 4.静态代理在编译时产生class字节码文件，可以直接使用，效率高\n>\n> 5.动态打理必须实现InvocationHandler 接口，通过反射代理方法，比较消耗系统资源，但可以减少代理的数量，使用更灵活。\n>\n> 6.cglib 代理无需实现接口，通过生成字节码实现代理，比反射稍快，不存在性能问题。但cglib 会继承目标对象，需要重写方法，所以目标对象不能为final类。', '', 'java三种代理模式', 0, '静态代理静态代理模式在不改变目标对象的前提下，实现了对目标对象的功能扩展。不足：静态代理实现了目标对象的所有方法，一旦目标接口增加方法，代理对象和目标对象都要进行相应的修改，增加维护成本。编码demo1.接口package top.supren.test.agent.jt;/** * &lt;p&g', '', 'http://supren.top/upload/2021/07/5268d877a2a04864b36b4961ab793f4f-56aaefa743f049ae9fdcabe97c69f2f7.jpg', 'Java三种代理模式', 0, NULL, 58, 10150);
INSERT INTO `posts` VALUES (0, 8, '2021-07-20 17:35:56.857000', '2021-07-20 17:39:00.451000', b'0', '2021-07-20 17:39:00.421000', 0, '<h3 id=\"io\">IO</h3>\n<h4 id=\"何为io\">何为I/O</h4>\n<blockquote>\n<p>I/O(Input/Output) 即输入 / 输出</p>\n<p>我们先从计算机结构的角度来解读一下啊I/O</p>\n<p>根据冯诺依曼结构，计算机结构分为5大部分：运算器 控制器 存储器 输入设备 输出设备</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190624122126398.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcy1jbG91ZC5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70\" alt=\"冯诺依曼体系结构\" /></p>\n<p>输入设备何输出河北都属于外部设备，网卡 硬盘这种既可以属于输入设备，也可以属于输出设备。</p>\n<p>输入设备向计算机输入数据，输出设备接受计算机输出的数据。</p>\n</blockquote>\n<blockquote>\n<p>从计算机结构角度来看 I/O 描述了计算机系统与外部设备之间通讯的过程。</p>\n<p>我们在线从应用程序的角度来解读一下I/O</p>\n</blockquote>\n<blockquote>\n<p>根据大学里学到的操作系统相关的知识： 为了保证操作系统的稳定何安全性，一个进程的地址空间划分为   <strong>用户空间</strong> <strong>内核空间</strong></p>\n<p>像我们平时运行的应用程序都是运行在用户空间，只有内核空间才能进行系统态级别的资源有关的操作，比如如文件管理 进程通讯 内存管理等等。</p>\n<p>也就是说想要进行IO 操作，一定要依赖内核空间的能力。</p>\n</blockquote>\n<p><strong>并且 用户空间的程序不能直接访问内核空间 想要执行IO操作，由于没有执行这些操作的权限，只能发起系统调用请求操作系统帮忙完成。</strong></p>\n<p><strong>因此， 用户进程想要执行IO操作的话，必须通过系统调用 来间接访问内核空间</strong></p>\n<p>应用程序发起I/O调用后，会经历两个步骤：</p>\n<p>1.内核等待I/O设备准备好数据</p>\n<p>2.内核将数据从内核空间拷贝到用户空间</p>\n<h4 id=\"有哪些常见的io模型\">有哪些常见的IO模型？</h4>\n<p>UNIN系统下，IO模型一共有5种:同步阻塞I/O   同步非阻塞I/O     I/O多路复用   信号驱动I/O和异步I/O</p>\n<p>这也是我们经常提到的5种IO模型。</p>\n<h3 id=\"阻塞io\">阻塞IO:</h3>\n<blockquote>\n<p>阻塞IO，指的是需要内核IO操作彻底完成后，才返回到用户空间，执行用户的操作。阻塞指的是用户空间程序的执行状态，用户空间程序需等到IO操作彻底完成。传统的IO模型都是同步阻塞IO。在java中，默认创建的socket都是阻塞的。</p>\n</blockquote>\n<h3 id=\"java中常见的io模型\">JAVA中常见的IO模型</h3>\n<h4 id=\"bio-blocking-io\">BIO (Blocking I/O)</h4>\n<blockquote>\n<p><strong>BIO属于同步阻塞IO模型</strong></p>\n<p>同步阻塞IO模型中，应用程序发起read调用后， 会一直阻塞，知道内核把数据拷贝到用户空间。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a9e704af49b4380bb686f0c96d33b81~tplv-k3u1fbpfcp-watermark.image\" alt=\"图源：《深入拆解Tomcat &amp; Jetty》\" /></p>\n<p>在客户端连接数量不高的情况下，是没问题的。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</p>\n</blockquote>\n<h4 id=\"nionon-blockingnew-io\">NIO(Non-blocking/New I/O)</h4>\n<blockquote>\n<p>Java 中的 NIO 于 Java 1.4 中引入，对应 <code>java.nio</code> 包，提供了 <code>Channel</code> , <code>Selector</code>，<code>Buffer</code> 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 对于高负载、高并发的（网络）应用，应使用 NIO 。</p>\n<p>Java 中的 NIO 可以看作是 <strong>I/O 多路复用模型</strong>。也有很多人认为，Java 中的 NIO 属于同步非阻塞 IO 模型。</p>\n<p>跟着我的思路往下看看，相信你会得到答案！</p>\n<p>我们先来看看 <strong>同步非阻塞 IO 模型</strong>。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb174e22dbe04bb79fe3fc126aed0c61~tplv-k3u1fbpfcp-watermark.image\" alt=\"图源：《深入拆解Tomcat &amp; Jetty》\" /></p>\n<p>同步非阻塞 IO 模型中，应用程序会一直发起 read 调用，等待数据从内核空间拷贝到用户空间的这段时间里，线程依然是阻塞的，直到在内核把数据拷贝到用户空间。</p>\n<p>相比于同步阻塞 IO 模型，同步非阻塞 IO 模型确实有了很大改进。通过轮询操作，避免了一直阻塞。</p>\n<p>但是，这种 IO 模型同样存在问题：<strong>应用程序不断进行 I/O 系统调用轮询数据是否已经准备好的过程是十分消耗 CPU 资源的。</strong></p>\n<p>这个时候，<strong>I/O 多路复用模型</strong> 就上场了。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88ff862764024c3b8567367df11df6ab~tplv-k3u1fbpfcp-watermark.image\" alt=\"img\" /></p>\n<p>IO 多路复用模型中，线程首先发起 select 调用，询问内核数据是否准备就绪，等内核把数据准备好了，用户线程再发起 read 调用。read 调用的过程（数据从内核空间-&gt;用户空间）还是阻塞的。</p>\n<blockquote>\n<p>目前支持 IO 多路复用的系统调用，有 select，epoll 等等。select 系统调用，是目前几乎在所有的操作系统上都有支持</p>\n<ul>\n<li><strong>select 调用</strong> ：内核提供的系统调用，它支持一次查询多个系统调用的可用状态。几乎所有的操作系统都支持。</li>\n<li><strong>epoll 调用</strong> ：linux 2.6 内核，属于 select 调用的增强版本，优化了 IO 的执行效率。</li>\n</ul>\n</blockquote>\n<p><strong>IO 多路复用模型，通过减少无效的系统调用，减少了对 CPU 资源的消耗。</strong></p>\n<p>Java 中的 NIO ，有一个非常重要的<strong>选择器 ( Selector )</strong> 的概念，也可以被称为 <strong>多路复用器</strong>。通过它，只需要一个线程便可以管理多个客户端连接。当客户端数据到了之后，才会为其服务。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f483f2437ce4ecdb180134270a00144~tplv-k3u1fbpfcp-watermark.image\" alt=\"img\" /></p>\n</blockquote>\n<h4 id=\"aioasynchronous-io\">AIO(Asynchronous I/O)</h4>\n<blockquote>\n<p>AIO 也就是 NIO 2。Java 7 中引入了 NIO 的改进版 NIO 2,它是异步 IO 模型。</p>\n<p>异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3077e72a1af049559e81d18205b56fd7~tplv-k3u1fbpfcp-watermark.image\" alt=\"img\" /></p>\n<p>目前来说 AIO 的应用还不是很广泛。Netty 之前也尝试使用过 AIO，不过又放弃了。这是因为，Netty 使用了 AIO 之后，在 Linux 系统上的性能并没有多少提升。</p>\n<p>最后，来一张图，简单总结一下 Java 中的 BIO、NIO、AIO。</p>\n<p><img src=\"https://images.xiaozhuanlan.com/photo/2020/33b193457c928ae02217480f994814b6.png\" alt=\"img\" /></p>\n</blockquote>\n<h3 id=\"java-io读写原理\">Java IO读写原理</h3>\n<blockquote>\n<p>无论是Socket的读写还是文件的读写，在Java层面的应用开发或者是Linux系统底层开发，都属于输入input和输出output的处理了，简称为IO读写。在原理上和处理流程上，都是一直的。区别子啊雨参数不同。</p>\n<p>用户程序进行IO的读写，基本上会用到read write两大系统调用。可能不同操作系统，名称不完全一样，但是功能是一样的。</p>\n<p>先强调一个基础知识： read系统调用， 并不是直接把数据从物理设备，读取到内存，write系统调用，也不是直接把数据，写到物理设备。</p>\n<p>read系统调用。是把数据从内核缓冲区复制到进程缓冲区，而write 系统调用。是把进程缓冲区复制到内核缓冲区。这两个系统调用， 都不负责在内核缓冲区和磁盘之间的交换。底层的读写交换，是由操作系统kernel内核完成的。</p>\n</blockquote>\n<h4 id=\"内核缓冲和进程缓冲\">内核缓冲和进程缓冲</h4>\n<blockquote>\n<p>缓冲区的目的，是为了减少频繁的系统IO调用。大家都知道，系统调用需要保存之前的进程数据和状态信息，而结束调用之后回来还需要恢复之前的信息，为了减少这种损耗时间，也消耗性能的系统调用，于是出现了缓冲区。</p>\n<p>有了缓冲区，操作系统使用read函数把数据从内核缓冲区复制到进程缓冲区，write把数据从进程缓冲区复制到内核缓冲区中。等待缓冲区达到一定数量的时候，再进行IO的调用，提升性能。至于什么时候读取和存储则由内核来决定，用户程序不需要关心。</p>\n<p>在linux系统中，系统内核也有个缓冲区叫做内核缓冲区。每个进程有自己独立的缓冲区，叫做进程缓冲区。</p>\n<p>所以，用户程序的IO读写程序，大多数情况下，并没有进行实际的IO操作，而是在读写自己的进程缓冲区。</p>\n</blockquote>\n<h4 id=\"java-io读写的底层流程\">java IO读写的底层流程</h4>\n<blockquote>\n<p>用户程序进行IO的读写，基本上会用到系统调用read&amp;write，read把数据从内核缓冲区复制到进程缓冲区，write把数据从进程缓冲区复制到内核缓冲区，它们不等价于数据在内核缓冲区和磁盘之间的交换。</p>\n<p><a href=\"https://img-blog.csdnimg.cn/20190105163657587.png\"><img src=\"https://img-blog.csdnimg.cn/20190105163657587.png\" alt=\"在这里插入图片描述\" /></a></p>\n<p>首先看看一个典型Java 服务端处理网络请求的典型过程：</p>\n<p>（1）客户端请求</p>\n<p>Linux通过网卡，读取客户断的请求数据，将数据读取到内核缓冲区。</p>\n<p>（2）获取请求数据</p>\n<p>服务器从内核缓冲区读取数据到Java进程缓冲区。</p>\n<p>（1）服务器端业务处理</p>\n<p>Java服务端在自己的用户空间中，处理客户端的请求。</p>\n<p>（2）服务器端返回数据</p>\n<p>Java服务端已构建好的响应，从用户缓冲区写入系统缓冲区。</p>\n<p>（3）发送给客户端</p>\n<p>Linux内核通过网络 I/O ，将内核缓冲区中的数据，写入网卡，网卡通过底层的通讯协议，会将数据发送给目标客户端。</p>\n</blockquote>\n', 0, NULL, NULL, '### IO\n\n#### 何为I/O\n\n> I/O(Input/Output) 即输入 / 输出\n>\n> 我们先从计算机结构的角度来解读一下啊I/O\n>\n> 根据冯诺依曼结构，计算机结构分为5大部分：运算器 控制器 存储器 输入设备 输出设备\n>\n> ![冯诺依曼体系结构](https://img-blog.csdnimg.cn/20190624122126398.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcy1jbG91ZC5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70)\n>\n> 输入设备何输出河北都属于外部设备，网卡 硬盘这种既可以属于输入设备，也可以属于输出设备。\n>\n> 输入设备向计算机输入数据，输出设备接受计算机输出的数据。\n\n\n\n> 从计算机结构角度来看 I/O 描述了计算机系统与外部设备之间通讯的过程。\n>\n> 我们在线从应用程序的角度来解读一下I/O\n\n> 根据大学里学到的操作系统相关的知识： 为了保证操作系统的稳定何安全性，一个进程的地址空间划分为   **用户空间** **内核空间**\n>\n> 像我们平时运行的应用程序都是运行在用户空间，只有内核空间才能进行系统态级别的资源有关的操作，比如如文件管理 进程通讯 内存管理等等。\n>\n> 也就是说想要进行IO 操作，一定要依赖内核空间的能力。\n\n**并且 用户空间的程序不能直接访问内核空间 想要执行IO操作，由于没有执行这些操作的权限，只能发起系统调用请求操作系统帮忙完成。**\n\n**因此， 用户进程想要执行IO操作的话，必须通过系统调用 来间接访问内核空间**\n\n应用程序发起I/O调用后，会经历两个步骤：\n\n1.内核等待I/O设备准备好数据\n\n2.内核将数据从内核空间拷贝到用户空间\n\n\n\n#### 有哪些常见的IO模型？\n\nUNIN系统下，IO模型一共有5种:同步阻塞I/O   同步非阻塞I/O     I/O多路复用   信号驱动I/O和异步I/O\n\n这也是我们经常提到的5种IO模型。\n\n\n\n### 阻塞IO:\n\n> 阻塞IO，指的是需要内核IO操作彻底完成后，才返回到用户空间，执行用户的操作。阻塞指的是用户空间程序的执行状态，用户空间程序需等到IO操作彻底完成。传统的IO模型都是同步阻塞IO。在java中，默认创建的socket都是阻塞的。\n\n\n\n### JAVA中常见的IO模型\n\n#### BIO (Blocking I/O)\n\n> **BIO属于同步阻塞IO模型**\n>\n> 同步阻塞IO模型中，应用程序发起read调用后， 会一直阻塞，知道内核把数据拷贝到用户空间。\n>\n> ![图源：《深入拆解Tomcat & Jetty》](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a9e704af49b4380bb686f0c96d33b81~tplv-k3u1fbpfcp-watermark.image)\n>\n> 在客户端连接数量不高的情况下，是没问题的。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。\n\n#### NIO(Non-blocking/New I/O)\n\n> Java 中的 NIO 于 Java 1.4 中引入，对应 `java.nio` 包，提供了 `Channel` , `Selector`，`Buffer` 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 对于高负载、高并发的（网络）应用，应使用 NIO 。\n>\n> Java 中的 NIO 可以看作是 **I/O 多路复用模型**。也有很多人认为，Java 中的 NIO 属于同步非阻塞 IO 模型。\n>\n> 跟着我的思路往下看看，相信你会得到答案！\n>\n> 我们先来看看 **同步非阻塞 IO 模型**。\n>\n> ![图源：《深入拆解Tomcat & Jetty》](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb174e22dbe04bb79fe3fc126aed0c61~tplv-k3u1fbpfcp-watermark.image)\n>\n> 同步非阻塞 IO 模型中，应用程序会一直发起 read 调用，等待数据从内核空间拷贝到用户空间的这段时间里，线程依然是阻塞的，直到在内核把数据拷贝到用户空间。\n>\n> 相比于同步阻塞 IO 模型，同步非阻塞 IO 模型确实有了很大改进。通过轮询操作，避免了一直阻塞。\n>\n> 但是，这种 IO 模型同样存在问题：**应用程序不断进行 I/O 系统调用轮询数据是否已经准备好的过程是十分消耗 CPU 资源的。**\n>\n> 这个时候，**I/O 多路复用模型** 就上场了。\n>\n> ![img](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88ff862764024c3b8567367df11df6ab~tplv-k3u1fbpfcp-watermark.image)\n>\n> IO 多路复用模型中，线程首先发起 select 调用，询问内核数据是否准备就绪，等内核把数据准备好了，用户线程再发起 read 调用。read 调用的过程（数据从内核空间->用户空间）还是阻塞的。\n>\n> > 目前支持 IO 多路复用的系统调用，有 select，epoll 等等。select 系统调用，是目前几乎在所有的操作系统上都有支持\n> >\n> > - **select 调用** ：内核提供的系统调用，它支持一次查询多个系统调用的可用状态。几乎所有的操作系统都支持。\n> > - **epoll 调用** ：linux 2.6 内核，属于 select 调用的增强版本，优化了 IO 的执行效率。\n>\n> **IO 多路复用模型，通过减少无效的系统调用，减少了对 CPU 资源的消耗。**\n>\n> Java 中的 NIO ，有一个非常重要的**选择器 ( Selector )** 的概念，也可以被称为 **多路复用器**。通过它，只需要一个线程便可以管理多个客户端连接。当客户端数据到了之后，才会为其服务。\n>\n> ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f483f2437ce4ecdb180134270a00144~tplv-k3u1fbpfcp-watermark.image)\n\n#### AIO(Asynchronous I/O) \n\n> AIO 也就是 NIO 2。Java 7 中引入了 NIO 的改进版 NIO 2,它是异步 IO 模型。\n>\n> 异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。\n>\n> ![img](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3077e72a1af049559e81d18205b56fd7~tplv-k3u1fbpfcp-watermark.image)\n>\n> 目前来说 AIO 的应用还不是很广泛。Netty 之前也尝试使用过 AIO，不过又放弃了。这是因为，Netty 使用了 AIO 之后，在 Linux 系统上的性能并没有多少提升。\n>\n> 最后，来一张图，简单总结一下 Java 中的 BIO、NIO、AIO。\n>\n> ![img](https://images.xiaozhuanlan.com/photo/2020/33b193457c928ae02217480f994814b6.png)\n\n### Java IO读写原理\n\n> 无论是Socket的读写还是文件的读写，在Java层面的应用开发或者是Linux系统底层开发，都属于输入input和输出output的处理了，简称为IO读写。在原理上和处理流程上，都是一直的。区别子啊雨参数不同。\n>\n> 用户程序进行IO的读写，基本上会用到read write两大系统调用。可能不同操作系统，名称不完全一样，但是功能是一样的。\n>\n> 先强调一个基础知识： read系统调用， 并不是直接把数据从物理设备，读取到内存，write系统调用，也不是直接把数据，写到物理设备。\n>\n> read系统调用。是把数据从内核缓冲区复制到进程缓冲区，而write 系统调用。是把进程缓冲区复制到内核缓冲区。这两个系统调用， 都不负责在内核缓冲区和磁盘之间的交换。底层的读写交换，是由操作系统kernel内核完成的。\n\n#### 内核缓冲和进程缓冲\n\n> 缓冲区的目的，是为了减少频繁的系统IO调用。大家都知道，系统调用需要保存之前的进程数据和状态信息，而结束调用之后回来还需要恢复之前的信息，为了减少这种损耗时间，也消耗性能的系统调用，于是出现了缓冲区。\n>\n> 有了缓冲区，操作系统使用read函数把数据从内核缓冲区复制到进程缓冲区，write把数据从进程缓冲区复制到内核缓冲区中。等待缓冲区达到一定数量的时候，再进行IO的调用，提升性能。至于什么时候读取和存储则由内核来决定，用户程序不需要关心。\n>\n> 在linux系统中，系统内核也有个缓冲区叫做内核缓冲区。每个进程有自己独立的缓冲区，叫做进程缓冲区。\n>\n> 所以，用户程序的IO读写程序，大多数情况下，并没有进行实际的IO操作，而是在读写自己的进程缓冲区。\n\n#### java IO读写的底层流程\n\n> 用户程序进行IO的读写，基本上会用到系统调用read&write，read把数据从内核缓冲区复制到进程缓冲区，write把数据从进程缓冲区复制到内核缓冲区，它们不等价于数据在内核缓冲区和磁盘之间的交换。\n>\n> [![在这里插入图片描述](https://img-blog.csdnimg.cn/20190105163657587.png)](https://img-blog.csdnimg.cn/20190105163657587.png)\n>\n> 首先看看一个典型Java 服务端处理网络请求的典型过程：\n>\n> （1）客户端请求\n>\n> Linux通过网卡，读取客户断的请求数据，将数据读取到内核缓冲区。\n>\n> （2）获取请求数据\n>\n> 服务器从内核缓冲区读取数据到Java进程缓冲区。\n>\n> （1）服务器端业务处理\n>\n> Java服务端在自己的用户空间中，处理客户端的请求。\n>\n> （2）服务器端返回数据\n>\n> Java服务端已构建好的响应，从用户缓冲区写入系统缓冲区。\n>\n> （3）发送给客户端\n>\n> Linux内核通过网络 I/O ，将内核缓冲区中的数据，写入网卡，网卡通过底层的通讯协议，会将数据发送给目标客户端。\n\n', '', 'io', 0, 'IO何为I/OI/O(Input/Output) 即输入 / 输出我们先从计算机结构的角度来解读一下啊I/O根据冯诺依曼结构，计算机结构分为5大部分：运算器 控制器 存储器 输入设备 输出设备输入设备何输出河北都属于外部设备，网卡 硬盘这种既可以属于输入设备，也可以属于输出设备。输入设备向计算机输入', '', 'http://supren.top/upload/2021/07/io-66cee29b43684e91b78f9552b13728c5.jpg', 'IO', 0, NULL, 60, 4652);
INSERT INTO `posts` VALUES (0, 9, '2021-07-24 12:38:34.150000', '2021-07-24 12:38:34.150000', b'0', '2021-07-24 12:38:34.150000', 0, '<p>  懒惰久了，稍微努力一下，就感觉在拼命。。。<br />\n  生于忧患，死于安乐。。。<br />\n  努力吧。。。</p>\n', 0, NULL, NULL, '&nbsp;&nbsp;懒惰久了，稍微努力一下，就感觉在拼命。。。\n&nbsp;&nbsp;生于忧患，死于安乐。。。\n&nbsp;&nbsp;努力吧。。。', '', 'zhi-zi-ji', 0, '', '', 'http://supren.top/upload/2021/07/389c0d6bb2fa419b8bd55edb29bf2f07-e8896c955a27443ba3d7ab9735261f29.jpg', '致自己', 0, NULL, 40, 77);
INSERT INTO `posts` VALUES (0, 10, '2021-07-26 16:32:35.172000', '2021-07-26 16:32:35.172000', b'0', '2021-07-26 16:32:35.172000', 0, '<h3 id=\"设计模式\">设计模式</h3>\n<h4 id=\"学习设计模式意义\">学习设计模式意义</h4>\n<blockquote>\n<p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性继承性和多态性以及类的关联关系和组合关系的充分理解</p>\n</blockquote>\n<blockquote>\n<p>正确使用设计模式具有以下优点：</p>\n<ol>\n<li>可以提高程序员的思维能力、编程能力和设计能力</li>\n<li>使程序设计更加标准化、代码编制更加工程化、使软件开发效率大大提高，从而缩短软件的开发周期</li>\n<li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li>\n</ol>\n</blockquote>\n<h4 id=\"gof23\">GOF23</h4>\n<blockquote>\n<p>一种思维 一种态度  一种进步</p>\n</blockquote>\n<h5 id=\"创建型模式\">创建型模式:</h5>\n<blockquote>\n<p>单例模式  工厂模式 抽象工厂模式 建造者模式 原型模式</p>\n</blockquote>\n<h5 id=\"结构型模式\">结构型模式</h5>\n<blockquote>\n<p>适配器模式  桥接模式 装饰模式 组合模式  外观模式 享元模式 代理模式</p>\n</blockquote>\n<h5 id=\"行为型模式\">行为型模式</h5>\n<blockquote>\n<p>模版方法模式  命令模式  迭代器模式 观察者模式 中介者模式 备忘录模式 解释器模式 状态模式  策略模式 职责模式  访问者模式</p>\n</blockquote>\n<h4 id=\"oop七大原则\">OOP七大原则</h4>\n<h5 id=\"1开闭原则\">1.开闭原则</h5>\n<blockquote>\n<p>对拓展开放，对关闭修改</p>\n</blockquote>\n<h5 id=\"2里氏替换原则\">2.里氏替换原则</h5>\n<blockquote>\n<p>继承必须确保超类所拥有的性质在子类中依然成立</p>\n</blockquote>\n<h5 id=\"3依赖倒置原则\">3.依赖倒置原则</h5>\n<blockquote>\n<p>面向接口编程，不要面向实现编程</p>\n</blockquote>\n<h5 id=\"4单一职责原则\">4.单一职责原则</h5>\n<blockquote>\n<p>控制类的粒度大小，将对象解耦 提高其内聚</p>\n</blockquote>\n<h5 id=\"5接口隔离原则\">5.接口隔离原则</h5>\n<blockquote>\n<p>要为各个类建立它们需要的专用接口</p>\n</blockquote>\n<h5 id=\"6迪米特法则\">6.迪米特法则</h5>\n<blockquote>\n<p>只与你直接朋友交谈，不跟陌生人说话<br />\nA类调用B类  B类调用C类 不能直接用A类调用C类 (可以通过别的方式)</p>\n</blockquote>\n<h5 id=\"7合成复用原则\">7.合成复用原则</h5>\n<blockquote>\n<p>尽量先使用组合或者聚合等关联关系实现(has a) 其次才考虑使用继承关系来实现。</p>\n</blockquote>\n<p>####工厂模式</p>\n<blockquote>\n<p>厂顾名思义就是创建产品，根据产品是具体产品还是具体工厂可分为简单工厂模式和工厂方法模式，根据工厂的抽象程度可分为工厂方法模式和抽象工厂模式。该模式用于封装和管理对象的创建，是一种创建型模式。本文从一个具体的例子逐步深入分析，来体会三种工厂模式的应用场景和利弊。</p>\n</blockquote>\n<h5 id=\"简单工厂模式\">简单工厂模式</h5>\n<blockquote>\n<p>该模式对对象创建管理方式最为简单，因为其仅仅简单的对不同类对象的创建进行了一层薄薄的封装。该模式通过向工厂传递类型来指定要创建的对象;<br />\n范例说明： 定义Car接口， 然后每个Car都实现该接口。然后实现一个工厂，通过传递类型，确定创建并返回什么类型的Car<br />\n缺点： 不满足开闭原则  单一职责原则</p>\n</blockquote>\n<h6 id=\"uml\">UML：</h6>\n<p><img src=\"http://supren.top/upload/2021/07/simple-d8e257769191469196280ab8af913ac6.png\" alt=\"simple\" /></p>\n<h6 id=\"代码demo\">代码demo</h6>\n<blockquote>\n<pre><code class=\"language-java\">package top.heiping.ren.test.design.factory.simple;\n\n/**\n * &lt;p&gt;\n * 汽车接口\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic interface Car {\n     void getCarName();\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code class=\"language-java\">package top.heiping.ren.test.design.factory.simple;\n\n/**\n * &lt;p&gt;\n * 五菱汽车\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class WuLingCar implements Car{\n    @Override\n    public void getCarName() {\n        System.out.println(&quot;WuLingCar...&quot;);\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code class=\"language-java\">package top.heiping.ren.test.design.factory.simple;\n\n/**\n * &lt;p&gt;\n * 特斯拉汽车\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class TeShiLaCar implements Car{\n    @Override\n    public void getCarName() {\n        System.out.println(&quot;TeShiLaCar...&quot;);\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.simple;\n\n/**\n * &lt;p&gt;\n * 汽车工厂\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class CarFactory {\n    public Car getCar(String carName) {\n        if (&quot;WuLing&quot;.equals(carName)) {\n            return new WuLingCar();\n        }else if (&quot;TeShiLa&quot;.equals(carName)) {\n            return new TeShiLaCar();\n        }else {\n            return null;\n        }\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.simple;\n\n/**\n * &lt;p&gt;\n *\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class TestMain {\n    public static void main(String[] args) {\n        CarFactory carFactory = new CarFactory();\n        Car wuLing = carFactory.getCar(&quot;WuLing&quot;);\n        Car teShiLa = carFactory.getCar(&quot;TeShiLa&quot;);\n\n        wuLing.getCarName();\n        teShiLa.getCarName();\n    }\n}\n</code></pre>\n</blockquote>\n<h5 id=\"工厂方法模式\">工厂方法模式</h5>\n<blockquote>\n<p>和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂<br />\n范例说明： 与简单工厂模式相比  将笼统的工厂方法拆分掉，为每个汽车实现一个单独的工厂。对应汽车的工厂仅仅生产对应的汽车。<br />\n使用的时候则先new 对应的工厂，调用生产汽车的方法即直接返回对应的汽车<br />\n缺点：</p>\n</blockquote>\n<h6 id=\"uml-1\">UML:</h6>\n<p><img src=\"http://supren.top/upload/2021/07/method-086361107cad48d29f91b38fda660691.png\" alt=\"method\" /></p>\n<h6 id=\"代码demo-1\">代码demo</h6>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.method;\n\n/**\n * &lt;p&gt;\n * 汽车接口\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic interface Car {\n     void getCarName();\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.method;\n\n/**\n * &lt;p&gt;\n * 工厂接口\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic interface CarFactory {\n    Car getCar();\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.method;\n\n/**\n * &lt;p&gt;\n * 五菱汽车\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class WuLingCar implements Car {\n    @Override\n    public void getCarName() {\n        System.out.println(&quot;WuLingCar...&quot;);\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.method;\n\n/**\n * &lt;p&gt;\n * 五菱工厂\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class WuLingCarFactory implements CarFactory{\n    @Override\n    public Car getCar() {\n        return new WuLingCar();\n    }\n}\n\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.method;\n\n/**\n * &lt;p&gt;\n * 特斯拉\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class WuLingCar implements Car {\n    @Override\n    public void getCarName() {\n        System.out.println(&quot;WuLingCar...&quot;);\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.method;\n\n/**\n * &lt;p&gt;\n * 特斯拉工厂\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class TeShiLaCarFactory implements CarFactory{\n    @Override\n    public Car getCar() {\n        return new TeShiLaCar();\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.method;\n\n/**\n * &lt;p&gt;\n * 测试\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class MainTest {\n    public static void main(String[] args) {\n        Car wuLing = new WuLingCarFactory().getCar();\n        Car teShiLa = new TeShiLaCarFactory().getCar();\n\n        wuLing.getCarName();\n        teShiLa.getCarName();\n\n        // 新增一个AutoCar 仅仅创建一个Car 并且创建一个生产AuTo Car的工厂即可\n        Car auTo = new AutoCarFactory().getCar();\n        auTo.getCarName();\n\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<p>如果此时需要新增一种汽车   比如AUTO 仅仅需要实现  一个Car 然后创建一个AutoCar的工厂即可。</p>\n<pre><code>package top.heiping.ren.test.design.factory.method;\n\n/**\n * &lt;p&gt;\n * AutoCar\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class MainTest {\n    public static void main(String[] args) {\n        Car wuLing = new WuLingCarFactory().getCar();\n        Car teShiLa = new TeShiLaCarFactory().getCar();\n\n        wuLing.getCarName();\n        teShiLa.getCarName();\n\n        // 新增一个AutoCar 仅仅创建一个Car 并且创建一个生产AuTo Car的工厂即可\n        Car auTo = new AutoCarFactory().getCar();\n        auTo.getCarName();\n\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.method;\n\n/**\n * &lt;p&gt;\n * AutoFactory\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class MainTest {\n    public static void main(String[] args) {\n        Car wuLing = new WuLingCarFactory().getCar();\n        Car teShiLa = new TeShiLaCarFactory().getCar();\n\n        wuLing.getCarName();\n        teShiLa.getCarName();\n\n        // 新增一个AutoCar 仅仅创建一个Car 并且创建一个生产AuTo Car的工厂即可\n        Car auTo = new AutoCarFactory().getCar();\n        auTo.getCarName();\n\n    }\n}\n</code></pre>\n</blockquote>\n<h5 id=\"抽象工厂模式\">抽象工厂模式</h5>\n<blockquote>\n<p>上面两种模式不管工厂怎么拆分抽象，都只是针对一类产品Car（AbstractProduct），如果要生成另一种产品PC，应该怎么表示呢？<br />\n最简单的方式是把2中介绍的工厂方法模式完全复制一份，不过这次生产的是PC。但同时也就意味着我们要完全复制和修改Phone生产管理的所有代码，显然这是一个笨办法，并不利于扩展和维护。<br />\n抽象工厂模式通过在AbstarctFactory中增加创建产品的接口，并在具体子工厂中实现新加产品的创建，当然前提是子工厂支持生产该产品。否则继承的这个接口可以什么也不干。<br />\n定义一个Iphone接口  和  一个 IRute接口。  然后分别实现对应的产品， Iphone(HuaWeiIphone  XiaoMiIphone) IRute(HuaWeiIRute XiaoMiIRute)<br />\n接着在实现一个工厂接口  IFacotry (IPhone createIphone();   IRute createIRute();)<br />\n最后每个产品线新建一个工厂并且实现IFactory接口，同时实现对应的方法<br />\nXiaoMiFactory( IPhone createIphone(){return XiaoMiIphone();}  IRoute createIphone(){return XiaoMiIRoute();})<br />\nHuaWeiFactory( IPhone createIphone(){return HuaWeiIphone();}  IRoute createIphone(){return HuaWeiIRoute();})<br />\n使用，小米工厂既可以创建小米路由器  又可以创建小米手机。 华为工厂同理</p>\n</blockquote>\n<h6 id=\"uml-2\">UML:</h6>\n<p><img src=\"http://supren.top/upload/2021/07/abstarct-d3884259a2fb47c5b2c37a06885be0a0.png\" alt=\"abstarct\" /></p>\n<h6 id=\"代码demo-2\">代码demo</h6>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.abstract1;\n\n/**\n * &lt;p&gt;\n * 手机\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic interface IPhone {\n    void start();\n    void shutdown();\n    void voiceUp();\n    void voiceDown();\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.abstract1;\n\n/**\n * &lt;p&gt;\n * 路由器\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic interface IRute {\n    void start();\n    void shutdown();\n    void WifeUp();\n    void wifeDown();\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.abstract1;\n\n/**\n * &lt;p&gt;\n * 抽象工厂\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic interface IFacotry {\n    IPhone createIphone();\n    IRute createIrute();\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.abstract1;\n\n/**\n * &lt;p&gt;\n * 小米手机\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class XiaoMiPhone implements IPhone{\n    @Override\n    public void start() {\n        System.out.println(&quot;XiaoMi...Iphone...start&quot;);\n    }\n\n    @Override\n    public void shutdown() {\n        System.out.println(&quot;XiaoMi...Iphone...shutdown&quot;);\n    }\n\n    @Override\n    public void voiceUp() {\n        System.out.println(&quot;XiaoMi...Iphone...voiceUp&quot;);\n    }\n\n    @Override\n    public void voiceDown() {\n        System.out.println(&quot;XiaoMi...Iphone...voiceDown&quot;);\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.abstract1;\n\n/**\n * &lt;p&gt;\n * 小米路由器\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class XiaoMiIRute implements IRute{\n    @Override\n    public void start() {\n        System.out.println(&quot;XiaoMi..IRute..start&quot;);\n    }\n\n    @Override\n    public void shutdown() {\n        System.out.println(&quot;XiaoMi..IRute..shutdown&quot;);\n    }\n\n    @Override\n    public void WifeUp() {\n        System.out.println(&quot;XiaoMi..IRute..WifeUp&quot;);\n    }\n\n    @Override\n    public void wifeDown() {\n        System.out.println(&quot;XiaoMi..IRute..wifeDown&quot;);\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.abstract1;\n\n/**\n * &lt;p&gt;\n * 华为手机\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class HuaWeiiPhone implements IPhone{\n    @Override\n    public void start() {\n        System.out.println(&quot;HuaWei...Iphone...start&quot;);\n    }\n\n    @Override\n    public void shutdown() {\n        System.out.println(&quot;HuaWei...Iphone...shutdown&quot;);\n    }\n\n    @Override\n    public void voiceUp() {\n        System.out.println(&quot;HuaWei...Iphone...voiceUp&quot;);\n    }\n\n    @Override\n    public void voiceDown() {\n        System.out.println(&quot;HuaWei...Iphone...voiceDown&quot;);\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.abstract1;\n\n/**\n * &lt;p&gt;\n * 华为路由器\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class HuaWeiIRute implements IRute{\n    @Override\n    public void start() {\n        System.out.println(&quot;HuaWei..IRute..start&quot;);\n    }\n\n    @Override\n    public void shutdown() {\n        System.out.println(&quot;HuaWei..IRute..shutdown&quot;);\n    }\n\n    @Override\n    public void WifeUp() {\n        System.out.println(&quot;HuaWei..IRute..WifeUp&quot;);\n    }\n\n    @Override\n    public void wifeDown() {\n        System.out.println(&quot;HuaWei..IRute..wifeDown&quot;);\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.abstract1;\n\n/**\n * &lt;p&gt;\n * 小米工厂\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class XiaoMiFactory implements IFacotry{\n    @Override\n    public IPhone createIphone() {\n        return new XiaoMiPhone();\n    }\n\n    @Override\n    public IRute createIrute() {\n        return new XiaoMiIRute();\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.abstract1;\n\n/**\n * &lt;p&gt;\n * 华为工厂\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class HuaWeiFactory implements IFacotry{\n    @Override\n    public IPhone createIphone() {\n        return new HuaWeiiPhone();\n    }\n\n    @Override\n    public IRute createIrute() {\n        return new HuaWeiIRute();\n    }\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>package top.heiping.ren.test.design.factory.abstract1;\n\n/**\n * &lt;p&gt;\n * 测试类\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-26\n */\npublic class MainTest {\n    public static void main(String[] args) {\n        System.out.println(&quot;================ 小米系列产品 ================&quot;);\n        XiaoMiFactory xiaoMiFactory = new XiaoMiFactory();\n        // 手机\n        IPhone xiaoMiPhone = xiaoMiFactory.createIphone();\n        xiaoMiPhone.start();\n        xiaoMiPhone.shutdown();\n        // 路由器\n        IRute xiaoMiIRute = xiaoMiFactory.createIrute();\n        xiaoMiIRute.start();\n        xiaoMiIRute.shutdown();\n\n\n        System.out.println(&quot;================ 华为系列产品 ================&quot;);\n        HuaWeiFactory huaWeiFactory = new HuaWeiFactory();\n        // 手机\n        IPhone huaWeiiPhone = huaWeiFactory.createIphone();\n        huaWeiiPhone.start();\n        huaWeiiPhone.shutdown();\n        // 路由器\n        IRute huaWeiIRute = huaWeiFactory.createIrute();\n        huaWeiIRute.start();\n        huaWeiIRute.shutdown();\n    }\n}\n</code></pre>\n</blockquote>\n<h5 id=\"总结\">总结</h5>\n<blockquote>\n<p>上面介绍的三种工厂模式有各自的应用场景，实际应用时能解决问题满足需求即可，可灵活变通，无所谓高级与低级。<br />\n此外无论哪种模式，由于可能封装了大量对象和工厂创建，新加产品需要修改已定义好的工厂相关的类，因此对于产品和工厂的扩展不太友好，利弊需要权衡一下。</p>\n</blockquote>\n', 0, NULL, NULL, '### 设计模式\n\n#### 学习设计模式意义\n\n> 设计模式的本质是面向对象设计原则的实际运用，是对类的封装性继承性和多态性以及类的关联关系和组合关系的充分理解\n\n> 正确使用设计模式具有以下优点：\n>\n> 1. 可以提高程序员的思维能力、编程能力和设计能力\n> 2. 使程序设计更加标准化、代码编制更加工程化、使软件开发效率大大提高，从而缩短软件的开发周期\n> 3. 使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。\n\n#### GOF23\n\n> 一种思维 一种态度  一种进步\n\n##### 创建型模式:\n\n> 单例模式  工厂模式 抽象工厂模式 建造者模式 原型模式\n\n##### 结构型模式\n\n> 适配器模式  桥接模式 装饰模式 组合模式  外观模式 享元模式 代理模式\n\n##### 行为型模式\n\n> 模版方法模式  命令模式  迭代器模式 观察者模式 中介者模式 备忘录模式 解释器模式 状态模式  策略模式 职责模式  访问者模式\n\n#### OOP七大原则\n\n##### 1.开闭原则\n\n> 对拓展开放，对关闭修改\n\n##### 2.里氏替换原则\n\n> 继承必须确保超类所拥有的性质在子类中依然成立\n\n##### 3.依赖倒置原则\n\n> 面向接口编程，不要面向实现编程\n\n##### 4.单一职责原则\n\n> 控制类的粒度大小，将对象解耦 提高其内聚\n\n##### 5.接口隔离原则\n\n> 要为各个类建立它们需要的专用接口\n\n##### 6.迪米特法则\n\n> 只与你直接朋友交谈，不跟陌生人说话\n> A类调用B类  B类调用C类 不能直接用A类调用C类 (可以通过别的方式) \n\n##### 7.合成复用原则\n\n> 尽量先使用组合或者聚合等关联关系实现(has a) 其次才考虑使用继承关系来实现。\n\n\n####工厂模式\n\n> 厂顾名思义就是创建产品，根据产品是具体产品还是具体工厂可分为简单工厂模式和工厂方法模式，根据工厂的抽象程度可分为工厂方法模式和抽象工厂模式。该模式用于封装和管理对象的创建，是一种创建型模式。本文从一个具体的例子逐步深入分析，来体会三种工厂模式的应用场景和利弊。\n\n##### 简单工厂模式\n\n> 该模式对对象创建管理方式最为简单，因为其仅仅简单的对不同类对象的创建进行了一层薄薄的封装。该模式通过向工厂传递类型来指定要创建的对象;\n> 范例说明： 定义Car接口， 然后每个Car都实现该接口。然后实现一个工厂，通过传递类型，确定创建并返回什么类型的Car\n> 缺点： 不满足开闭原则  单一职责原则\n\n###### UML：\n\n![simple](http://supren.top/upload/2021/07/simple-d8e257769191469196280ab8af913ac6.png)\n\n###### 代码demo\n\n> ```java\n> package top.heiping.ren.test.design.factory.simple;\n> \n> /**\n>  * <p>\n>  * 汽车接口\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public interface Car {\n>      void getCarName();\n> }\n> ```\n\n> ```java\n> package top.heiping.ren.test.design.factory.simple;\n> \n> /**\n>  * <p>\n>  * 五菱汽车\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class WuLingCar implements Car{\n>     @Override\n>     public void getCarName() {\n>         System.out.println(\"WuLingCar...\");\n>     }\n> }\n> ```\n\n> ```java\n> package top.heiping.ren.test.design.factory.simple;\n> \n> /**\n>  * <p>\n>  * 特斯拉汽车\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class TeShiLaCar implements Car{\n>     @Override\n>     public void getCarName() {\n>         System.out.println(\"TeShiLaCar...\");\n>     }\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.simple;\n> \n> /**\n>  * <p>\n>  * 汽车工厂\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class CarFactory {\n>     public Car getCar(String carName) {\n>         if (\"WuLing\".equals(carName)) {\n>             return new WuLingCar();\n>         }else if (\"TeShiLa\".equals(carName)) {\n>             return new TeShiLaCar();\n>         }else {\n>             return null;\n>         }\n>     }\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.simple;\n> \n> /**\n>  * <p>\n>  *\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class TestMain {\n>     public static void main(String[] args) {\n>         CarFactory carFactory = new CarFactory();\n>         Car wuLing = carFactory.getCar(\"WuLing\");\n>         Car teShiLa = carFactory.getCar(\"TeShiLa\");\n> \n>         wuLing.getCarName();\n>         teShiLa.getCarName();\n>     }\n> }\n> ```\n\n##### 工厂方法模式\n\n> 和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂\n> 范例说明： 与简单工厂模式相比  将笼统的工厂方法拆分掉，为每个汽车实现一个单独的工厂。对应汽车的工厂仅仅生产对应的汽车。\n> 使用的时候则先new 对应的工厂，调用生产汽车的方法即直接返回对应的汽车\n> 缺点： \n\n###### UML:\n\n![method](http://supren.top/upload/2021/07/method-086361107cad48d29f91b38fda660691.png)\n\n###### 代码demo\n\n> ```\n> package top.heiping.ren.test.design.factory.method;\n> \n> /**\n>  * <p>\n>  * 汽车接口\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public interface Car {\n>      void getCarName();\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.method;\n> \n> /**\n>  * <p>\n>  * 工厂接口\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public interface CarFactory {\n>     Car getCar();\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.method;\n> \n> /**\n>  * <p>\n>  * 五菱汽车\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class WuLingCar implements Car {\n>     @Override\n>     public void getCarName() {\n>         System.out.println(\"WuLingCar...\");\n>     }\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.method;\n> \n> /**\n>  * <p>\n>  * 五菱工厂\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class WuLingCarFactory implements CarFactory{\n>     @Override\n>     public Car getCar() {\n>         return new WuLingCar();\n>     }\n> }\n> \n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.method;\n> \n> /**\n>  * <p>\n>  * 特斯拉\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class WuLingCar implements Car {\n>     @Override\n>     public void getCarName() {\n>         System.out.println(\"WuLingCar...\");\n>     }\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.method;\n> \n> /**\n>  * <p>\n>  * 特斯拉工厂\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class TeShiLaCarFactory implements CarFactory{\n>     @Override\n>     public Car getCar() {\n>         return new TeShiLaCar();\n>     }\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.method;\n> \n> /**\n>  * <p>\n>  * 测试\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class MainTest {\n>     public static void main(String[] args) {\n>         Car wuLing = new WuLingCarFactory().getCar();\n>         Car teShiLa = new TeShiLaCarFactory().getCar();\n> \n>         wuLing.getCarName();\n>         teShiLa.getCarName();\n> \n>         // 新增一个AutoCar 仅仅创建一个Car 并且创建一个生产AuTo Car的工厂即可\n>         Car auTo = new AutoCarFactory().getCar();\n>         auTo.getCarName();\n> \n>     }\n> }\n> ```\n\n> 如果此时需要新增一种汽车   比如AUTO 仅仅需要实现  一个Car 然后创建一个AutoCar的工厂即可。\n>\n> ```\n> package top.heiping.ren.test.design.factory.method;\n> \n> /**\n>  * <p>\n>  * AutoCar\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class MainTest {\n>     public static void main(String[] args) {\n>         Car wuLing = new WuLingCarFactory().getCar();\n>         Car teShiLa = new TeShiLaCarFactory().getCar();\n> \n>         wuLing.getCarName();\n>         teShiLa.getCarName();\n> \n>         // 新增一个AutoCar 仅仅创建一个Car 并且创建一个生产AuTo Car的工厂即可\n>         Car auTo = new AutoCarFactory().getCar();\n>         auTo.getCarName();\n> \n>     }\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.method;\n> \n> /**\n>  * <p>\n>  * AutoFactory\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class MainTest {\n>     public static void main(String[] args) {\n>         Car wuLing = new WuLingCarFactory().getCar();\n>         Car teShiLa = new TeShiLaCarFactory().getCar();\n> \n>         wuLing.getCarName();\n>         teShiLa.getCarName();\n> \n>         // 新增一个AutoCar 仅仅创建一个Car 并且创建一个生产AuTo Car的工厂即可\n>         Car auTo = new AutoCarFactory().getCar();\n>         auTo.getCarName();\n> \n>     }\n> }\n> ```\n\n##### 抽象工厂模式\n\n> 上面两种模式不管工厂怎么拆分抽象，都只是针对一类产品Car（AbstractProduct），如果要生成另一种产品PC，应该怎么表示呢？\n> 最简单的方式是把2中介绍的工厂方法模式完全复制一份，不过这次生产的是PC。但同时也就意味着我们要完全复制和修改Phone生产管理的所有代码，显然这是一个笨办法，并不利于扩展和维护。\n> 抽象工厂模式通过在AbstarctFactory中增加创建产品的接口，并在具体子工厂中实现新加产品的创建，当然前提是子工厂支持生产该产品。否则继承的这个接口可以什么也不干。\n> 定义一个Iphone接口  和  一个 IRute接口。  然后分别实现对应的产品， Iphone(HuaWeiIphone  XiaoMiIphone) IRute(HuaWeiIRute XiaoMiIRute)\n> 接着在实现一个工厂接口  IFacotry (IPhone createIphone();   IRute createIRute();) \n> 最后每个产品线新建一个工厂并且实现IFactory接口，同时实现对应的方法\n> XiaoMiFactory( IPhone createIphone(){return XiaoMiIphone();}  IRoute createIphone(){return XiaoMiIRoute();})\n> HuaWeiFactory( IPhone createIphone(){return HuaWeiIphone();}  IRoute createIphone(){return HuaWeiIRoute();})\n> 使用，小米工厂既可以创建小米路由器  又可以创建小米手机。 华为工厂同理\n\n###### UML:\n\n![abstarct](http://supren.top/upload/2021/07/abstarct-d3884259a2fb47c5b2c37a06885be0a0.png)\n\n###### 代码demo\n\n> ```\n> package top.heiping.ren.test.design.factory.abstract1;\n> \n> /**\n>  * <p>\n>  * 手机\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public interface IPhone {\n>     void start();\n>     void shutdown();\n>     void voiceUp();\n>     void voiceDown();\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.abstract1;\n> \n> /**\n>  * <p>\n>  * 路由器\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public interface IRute {\n>     void start();\n>     void shutdown();\n>     void WifeUp();\n>     void wifeDown();\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.abstract1;\n> \n> /**\n>  * <p>\n>  * 抽象工厂\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public interface IFacotry {\n>     IPhone createIphone();\n>     IRute createIrute();\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.abstract1;\n> \n> /**\n>  * <p>\n>  * 小米手机\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class XiaoMiPhone implements IPhone{\n>     @Override\n>     public void start() {\n>         System.out.println(\"XiaoMi...Iphone...start\");\n>     }\n> \n>     @Override\n>     public void shutdown() {\n>         System.out.println(\"XiaoMi...Iphone...shutdown\");\n>     }\n> \n>     @Override\n>     public void voiceUp() {\n>         System.out.println(\"XiaoMi...Iphone...voiceUp\");\n>     }\n> \n>     @Override\n>     public void voiceDown() {\n>         System.out.println(\"XiaoMi...Iphone...voiceDown\");\n>     }\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.abstract1;\n> \n> /**\n>  * <p>\n>  * 小米路由器\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class XiaoMiIRute implements IRute{\n>     @Override\n>     public void start() {\n>         System.out.println(\"XiaoMi..IRute..start\");\n>     }\n> \n>     @Override\n>     public void shutdown() {\n>         System.out.println(\"XiaoMi..IRute..shutdown\");\n>     }\n> \n>     @Override\n>     public void WifeUp() {\n>         System.out.println(\"XiaoMi..IRute..WifeUp\");\n>     }\n> \n>     @Override\n>     public void wifeDown() {\n>         System.out.println(\"XiaoMi..IRute..wifeDown\");\n>     }\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.abstract1;\n> \n> /**\n>  * <p>\n>  * 华为手机\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class HuaWeiiPhone implements IPhone{\n>     @Override\n>     public void start() {\n>         System.out.println(\"HuaWei...Iphone...start\");\n>     }\n> \n>     @Override\n>     public void shutdown() {\n>         System.out.println(\"HuaWei...Iphone...shutdown\");\n>     }\n> \n>     @Override\n>     public void voiceUp() {\n>         System.out.println(\"HuaWei...Iphone...voiceUp\");\n>     }\n> \n>     @Override\n>     public void voiceDown() {\n>         System.out.println(\"HuaWei...Iphone...voiceDown\");\n>     }\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.abstract1;\n> \n> /**\n>  * <p>\n>  * 华为路由器\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class HuaWeiIRute implements IRute{\n>     @Override\n>     public void start() {\n>         System.out.println(\"HuaWei..IRute..start\");\n>     }\n> \n>     @Override\n>     public void shutdown() {\n>         System.out.println(\"HuaWei..IRute..shutdown\");\n>     }\n> \n>     @Override\n>     public void WifeUp() {\n>         System.out.println(\"HuaWei..IRute..WifeUp\");\n>     }\n> \n>     @Override\n>     public void wifeDown() {\n>         System.out.println(\"HuaWei..IRute..wifeDown\");\n>     }\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.abstract1;\n> \n> /**\n>  * <p>\n>  * 小米工厂\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class XiaoMiFactory implements IFacotry{\n>     @Override\n>     public IPhone createIphone() {\n>         return new XiaoMiPhone();\n>     }\n> \n>     @Override\n>     public IRute createIrute() {\n>         return new XiaoMiIRute();\n>     }\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.abstract1;\n> \n> /**\n>  * <p>\n>  * 华为工厂\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class HuaWeiFactory implements IFacotry{\n>     @Override\n>     public IPhone createIphone() {\n>         return new HuaWeiiPhone();\n>     }\n> \n>     @Override\n>     public IRute createIrute() {\n>         return new HuaWeiIRute();\n>     }\n> }\n> ```\n\n> ```\n> package top.heiping.ren.test.design.factory.abstract1;\n> \n> /**\n>  * <p>\n>  * 测试类\n>  * </p>\n>  *\n>  * @author: rch\n>  * @since: 2021-07-26\n>  */\n> public class MainTest {\n>     public static void main(String[] args) {\n>         System.out.println(\"================ 小米系列产品 ================\");\n>         XiaoMiFactory xiaoMiFactory = new XiaoMiFactory();\n>         // 手机\n>         IPhone xiaoMiPhone = xiaoMiFactory.createIphone();\n>         xiaoMiPhone.start();\n>         xiaoMiPhone.shutdown();\n>         // 路由器\n>         IRute xiaoMiIRute = xiaoMiFactory.createIrute();\n>         xiaoMiIRute.start();\n>         xiaoMiIRute.shutdown();\n> \n> \n>         System.out.println(\"================ 华为系列产品 ================\");\n>         HuaWeiFactory huaWeiFactory = new HuaWeiFactory();\n>         // 手机\n>         IPhone huaWeiiPhone = huaWeiFactory.createIphone();\n>         huaWeiiPhone.start();\n>         huaWeiiPhone.shutdown();\n>         // 路由器\n>         IRute huaWeiIRute = huaWeiFactory.createIrute();\n>         huaWeiIRute.start();\n>         huaWeiIRute.shutdown();\n>     }\n> }\n> ```\n\n##### 总结\n\n> 上面介绍的三种工厂模式有各自的应用场景，实际应用时能解决问题满足需求即可，可灵活变通，无所谓高级与低级。\n> 此外无论哪种模式，由于可能封装了大量对象和工厂创建，新加产品需要修改已定义好的工厂相关的类，因此对于产品和工厂的扩展不太友好，利弊需要权衡一下。 ', '', 'gong-chang-mo-shi', 0, '', '', 'http://supren.top/upload/2021/07/js-2dfd89c568a245ae84d1007e3f0de277.jpg', '工厂模式', 0, NULL, 41, 12912);
INSERT INTO `posts` VALUES (0, 11, '2021-07-28 11:53:07.772000', '2021-07-28 11:56:14.803000', b'0', '2021-07-28 11:56:14.790000', 0, '<h4 id=\"建造者模式\">建造者模式</h4>\n<h5 id=\"使用场景\">使用场景</h5>\n<blockquote>\n<p>当一个类的构造函数参数个数超过4个，而且这些参数有些是可选的参数，考虑使用构造者模式</p>\n</blockquote>\n<h5 id=\"解决问题\">解决问题</h5>\n<blockquote>\n<p>一个类的构造函数参数超过4个，而且这些参数有些是可选的时，我们通常有两种办法来构建它的对象。 例如我们现在有如下一个类计算机类Computer，其中cpu与ram是必填参数，而其他3个是可选参数，那么我们如何构造这个类的实例呢,通常有两种常用的方式：</p>\n</blockquote>\n<pre><code class=\"language-java\">public class Computer {\n    private String cpu;//必须\n    private String ram;//必须\n    private int usbCount;//可选\n    private String keyboard;//可选\n    private String display;//可选\n}\n</code></pre>\n<h6 id=\"第一种-折叠构造函数模式\">第一种 折叠构造函数模式</h6>\n<pre><code class=\"language-java\">public class Computer {\n     ...\n    public Computer(String cpu, String ram) {\n        this(cpu, ram, 0);\n    }\n    public Computer(String cpu, String ram, int usbCount) {\n        this(cpu, ram, usbCount, &quot;罗技键盘&quot;);\n    }\n    public Computer(String cpu, String ram, int usbCount, String keyboard) {\n        this(cpu, ram, usbCount, keyboard, &quot;三星显示器&quot;);\n    }\n    public Computer(String cpu, String ram, int usbCount, String keyboard, String display) {\n        this.cpu = cpu;\n        this.ram = ram;\n        this.usbCount = usbCount;\n        this.keyboard = keyboard;\n        this.display = display;\n    }\n}\n</code></pre>\n<h6 id=\"第二种-javabean-如下所示\">第二种 JavaBean 如下所示：</h6>\n<pre><code class=\"language-java\">public class Computer {\n        ...\n\n    public String getCpu() {\n        return cpu;\n    }\n    public void setCpu(String cpu) {\n        this.cpu = cpu;\n    }\n    public String getRam() {\n        return ram;\n    }\n    public void setRam(String ram) {\n        this.ram = ram;\n    }\n    public int getUsbCount() {\n        return usbCount;\n    }\n...\n}\n</code></pre>\n<h5 id=\"分析\">分析</h5>\n<h6 id=\"弊端\">弊端</h6>\n<blockquote>\n<p>第一种主要是使用及阅读不方便。你可以想象一下，当你要调用一个类的构造函数时，你首先要决定使用哪一个，然后里面又是一堆参数，如果这些参数的类型很多又都一样，你还要搞清楚这些参数的含义，很容易就传混了。。。那酸爽谁用谁知道。</p>\n</blockquote>\n<blockquote>\n<p>第二种方式在构建过程中对象的状态容易发生变化，造成错误。因为那个类中的属性是分步设置的，所以就容易出错。<br />\n为了解决这两个痛点，builder模式就横空出世了。</p>\n</blockquote>\n<h5 id=\"如何实现\">如何实现：</h5>\n<blockquote>\n<p>1.在Computer类中创建一个只带两个必传属性的构造方法，其他属性通过set方法赋值，并提供属性的get、set方法</p>\n<p>2.定义一个Computer的抽象建造者类 该类提供其他非必传构造属性的set方法(抽象的)， 同时提供一个getComputer 的方法返回Computer对象</p>\n<p>3.具体的电脑实现类： eg: 苹果电脑 MacComputerBuilder 类 实现Computer的抽象建造者类，并实现其所有的方法</p>\n<p>​    同时定义一个Computer 的私有对象， getComputer 则返回该对象。 同时提供一个构造方法，只包含Computer必传参数的构造方法。</p>\n<p>在构造方法中new 一个Computer 赋值给定义的Computer 对象，在实现其他属性的set抽象方法的时候，直接调用Computer对象的set方法，并实现赋     值。</p>\n<p>4.实现一个指导者实体类。该类有一个建造方法，使用Computer的抽象Builder建造者抽象类作为参数。一次调用建造者的set方法</p>\n<p>5.测试：</p>\n<p>1.创建一个建造者</p>\n<p>2.通过具体Computer的带参构造方法创建对应的Computer对象然后赋值给ComputerBuilder对象</p>\n<p>3.调用建造者的建造方法，并将2中具体的Computer作为参数传入  这样就会一次调用Computer的建造方法</p>\n<p>4.调用2中的ComputerBuilder 的getComputer方法得到 对应的Computer</p>\n<p>5.完成</p>\n</blockquote>\n<h5 id=\"uml-如下所示\">UML 如下所示：</h5>\n<p><img src=\"http://supren.top/upload/2021/07/builder-4a959755902c44c3806c93059ce49ee1.png\" alt=\"builder\" /></p>\n<h5 id=\"代码demo\">代码Demo</h5>\n<pre><code class=\"language-java\">package top.heiping.ren.test.design.builder;\n\n/**\n * &lt;p&gt;\n * 电脑\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-27\n */\npublic class Computer {\n    /** 必须 */\n    private String cpu;\n    /** 必须 */\n    private String ram;\n    /** 可选 */\n    private int usbCount;\n    /** 可选 */\n    private String keyboard;\n    /** 可选 */\n    private String display;\n\n    public Computer(String cpu, String ram) {\n        this.cpu = cpu;\n        this.ram = ram;\n    }\n    public void setUsbCount(int usbCount) {\n        this.usbCount = usbCount;\n    }\n    public void setKeyboard(String keyboard) {\n        this.keyboard = keyboard;\n    }\n    public void setDisplay(String display) {\n        this.display = display;\n    }\n    @Override\n    public String toString() {\n        return &quot;Computer{&quot; +\n                &quot;cpu=\'&quot; + cpu + \'\\\'\' +\n                &quot;, ram=\'&quot; + ram + \'\\\'\' +\n                &quot;, usbCount=&quot; + usbCount +\n                &quot;, keyboard=\'&quot; + keyboard + \'\\\'\' +\n                &quot;, display=\'&quot; + display + \'\\\'\' +\n                \'}\';\n    }\n}\n</code></pre>\n<pre><code class=\"language-java\">package top.heiping.ren.test.design.builder;\n\n/**\n * &lt;p&gt;\n * 抽象构造者类\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-27\n */\npublic abstract class ComputerBuilder {\n    public abstract void setUsbCount();\n    public abstract void setKeyboard();\n    public abstract void setDisplay();\n    public abstract Computer getComputer();\n}\n~~~\n\n```java\npackage top.heiping.ren.test.design.builder;\n\n/**\n * &lt;p&gt;\n * 实体构造者类，我们可以根据要构建的产品种类产生多种实例构造者，这里我们需要\n * 构造两种品牌的电脑， 苹果电脑和联想电脑，所以我们生成了两个实体构造者\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-27\n */\npublic class LenovoComputerBuilder extends ComputerBuilder{\n\n    private Computer computer;\n\n    public LenovoComputerBuilder(String cpu, String ram) {\n        this.computer = new Computer(cpu, ram);\n    }\n\n    @Override\n    public void setUsbCount() {\n        computer.setUsbCount(4);\n    }\n\n    @Override\n    public void setKeyboard() {\n        computer.setKeyboard(&quot;联想键盘&quot;);\n    }\n\n    @Override\n    public void setDisplay() {\n        computer.setDisplay(&quot;联想显示器&quot;);\n    }\n\n    @Override\n    public Computer getComputer() {\n        return computer;\n    }\n}\n</code></pre>\n<pre><code class=\"language-java\">package top.heiping.ren.test.design.builder;\n\n/**\n * &lt;p&gt;\n * 实体构造者类，我们可以根据要构建的产品种类产生多种实例构造者，这里我们需要\n * 构造两种品牌的电脑， 苹果电脑和联想电脑，所以我们生成了两个实体构造者\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-27\n */\npublic class MacComputerBuilder extends ComputerBuilder{\n\n    private Computer computer;\n\n    public MacComputerBuilder(String cpu, String ram) {\n        this.computer = new Computer(cpu, ram);\n    }\n\n    @Override\n    public void setUsbCount() {\n        computer.setUsbCount(2);\n    }\n\n    @Override\n    public void setKeyboard() {\n        computer.setKeyboard(&quot;苹果键盘&quot;);\n    }\n\n    @Override\n    public void setDisplay() {\n        computer.setDisplay(&quot;苹果显示器&quot;);\n    }\n\n    @Override\n    public Computer getComputer() {\n        return computer;\n    }\n}\n</code></pre>\n<pre><code class=\"language-java\">package top.heiping.ren.test.design.builder;\n\n/**\n * &lt;p&gt;\n * 指导者(Director)\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-27\n */\npublic class ComputerDirector {\n    public void makeComputer(ComputerBuilder builder){\n        builder.setUsbCount();\n        builder.setDisplay();\n        builder.setKeyboard();\n    }\n}\n</code></pre>\n<pre><code class=\"language-java\">package top.heiping.ren.test.design.builder;\n\n/**\n * &lt;p&gt;\n *  首先生成一个director (1)，然后生成一个目标builder (2)，接着使用director组装builder (3),组装完毕后使用builder创建产品实例 (4)。\n * &lt;/p&gt;\n *\n * @author: rch\n * @since: 2021-07-27\n */\npublic class TestMian {\n    public static void main(String[] args) {\n        // 1\n        ComputerDirector director=new ComputerDirector();\n        //2\n        ComputerBuilder builder=new MacComputerBuilder(&quot;I5处理器&quot;,&quot;三星125&quot;);\n        //3\n        director.makeComputer(builder);\n        //4\n        Computer macComputer=builder.getComputer();\n        System.out.println(&quot;mac computer:&quot;+macComputer.toString());\n\n        ComputerBuilder lenovoBuilder=new LenovoComputerBuilder(&quot;I7处理器&quot;,&quot;海力士222&quot;);\n        director.makeComputer(lenovoBuilder);\n        Computer lenovoComputer=lenovoBuilder.getComputer();\n        System.out.println(&quot;lenovo computer:&quot;+lenovoComputer.toString());\n    }\n}\n</code></pre>\n', 0, NULL, NULL, '#### 建造者模式\n\n##### 使用场景\n\n> 当一个类的构造函数参数个数超过4个，而且这些参数有些是可选的参数，考虑使用构造者模式\n\n\n##### 解决问题\n\n\n> 一个类的构造函数参数超过4个，而且这些参数有些是可选的时，我们通常有两种办法来构建它的对象。 例如我们现在有如下一个类计算机类Computer，其中cpu与ram是必填参数，而其他3个是可选参数，那么我们如何构造这个类的实例呢,通常有两种常用的方式：\n\n\n```java\npublic class Computer {\n    private String cpu;//必须\n    private String ram;//必须\n    private int usbCount;//可选\n    private String keyboard;//可选\n    private String display;//可选\n}\n```\n\n###### 第一种 折叠构造函数模式\n\n```java\npublic class Computer {\n     ...\n    public Computer(String cpu, String ram) {\n        this(cpu, ram, 0);\n    }\n    public Computer(String cpu, String ram, int usbCount) {\n        this(cpu, ram, usbCount, \"罗技键盘\");\n    }\n    public Computer(String cpu, String ram, int usbCount, String keyboard) {\n        this(cpu, ram, usbCount, keyboard, \"三星显示器\");\n    }\n    public Computer(String cpu, String ram, int usbCount, String keyboard, String display) {\n        this.cpu = cpu;\n        this.ram = ram;\n        this.usbCount = usbCount;\n        this.keyboard = keyboard;\n        this.display = display;\n    }\n}\n```\n\n###### 第二种 JavaBean 如下所示：\n\n```java\npublic class Computer {\n        ...\n\n    public String getCpu() {\n        return cpu;\n    }\n    public void setCpu(String cpu) {\n        this.cpu = cpu;\n    }\n    public String getRam() {\n        return ram;\n    }\n    public void setRam(String ram) {\n        this.ram = ram;\n    }\n    public int getUsbCount() {\n        return usbCount;\n    }\n...\n}\n```\n\n##### 分析\n\n###### 弊端\n\n> 第一种主要是使用及阅读不方便。你可以想象一下，当你要调用一个类的构造函数时，你首先要决定使用哪一个，然后里面又是一堆参数，如果这些参数的类型很多又都一样，你还要搞清楚这些参数的含义，很容易就传混了。。。那酸爽谁用谁知道。\n\n> 第二种方式在构建过程中对象的状态容易发生变化，造成错误。因为那个类中的属性是分步设置的，所以就容易出错。  \n> 为了解决这两个痛点，builder模式就横空出世了。\n\n\n##### 如何实现：\n\n> 1.在Computer类中创建一个只带两个必传属性的构造方法，其他属性通过set方法赋值，并提供属性的get、set方法\n>\n> 2.定义一个Computer的抽象建造者类 该类提供其他非必传构造属性的set方法(抽象的)， 同时提供一个getComputer 的方法返回Computer对象\n>\n> 3.具体的电脑实现类： eg: 苹果电脑 MacComputerBuilder 类 实现Computer的抽象建造者类，并实现其所有的方法\n>\n> ​    同时定义一个Computer 的私有对象， getComputer 则返回该对象。 同时提供一个构造方法，只包含Computer必传参数的构造方法。\n>\n>    在构造方法中new 一个Computer 赋值给定义的Computer 对象，在实现其他属性的set抽象方法的时候，直接调用Computer对象的set方法，并实现赋     值。\n>\n> 4.实现一个指导者实体类。该类有一个建造方法，使用Computer的抽象Builder建造者抽象类作为参数。一次调用建造者的set方法\n>\n> 5.测试：\n>\n> 1.创建一个建造者  \n>\n> 2.通过具体Computer的带参构造方法创建对应的Computer对象然后赋值给ComputerBuilder对象\n>\n> 3.调用建造者的建造方法，并将2中具体的Computer作为参数传入  这样就会一次调用Computer的建造方法\n>\n> 4.调用2中的ComputerBuilder 的getComputer方法得到 对应的Computer\n>\n> 5.完成\n\n##### UML 如下所示：\n![builder](http://supren.top/upload/2021/07/builder-4a959755902c44c3806c93059ce49ee1.png)\n\n\n##### 代码Demo\n\n```java\npackage top.heiping.ren.test.design.builder;\n\n/**\n * <p>\n * 电脑\n * </p>\n *\n * @author: rch\n * @since: 2021-07-27\n */\npublic class Computer {\n    /** 必须 */\n    private String cpu;\n    /** 必须 */\n    private String ram;\n    /** 可选 */\n    private int usbCount;\n    /** 可选 */\n    private String keyboard;\n    /** 可选 */\n    private String display;\n\n    public Computer(String cpu, String ram) {\n        this.cpu = cpu;\n        this.ram = ram;\n    }\n    public void setUsbCount(int usbCount) {\n        this.usbCount = usbCount;\n    }\n    public void setKeyboard(String keyboard) {\n        this.keyboard = keyboard;\n    }\n    public void setDisplay(String display) {\n        this.display = display;\n    }\n    @Override\n    public String toString() {\n        return \"Computer{\" +\n                \"cpu=\'\" + cpu + \'\\\'\' +\n                \", ram=\'\" + ram + \'\\\'\' +\n                \", usbCount=\" + usbCount +\n                \", keyboard=\'\" + keyboard + \'\\\'\' +\n                \", display=\'\" + display + \'\\\'\' +\n                \'}\';\n    }\n}\n```\n\n```java\npackage top.heiping.ren.test.design.builder;\n\n/**\n * <p>\n * 抽象构造者类\n * </p>\n *\n * @author: rch\n * @since: 2021-07-27\n */\npublic abstract class ComputerBuilder {\n    public abstract void setUsbCount();\n    public abstract void setKeyboard();\n    public abstract void setDisplay();\n    public abstract Computer getComputer();\n}\n~~~\n\n```java\npackage top.heiping.ren.test.design.builder;\n\n/**\n * <p>\n * 实体构造者类，我们可以根据要构建的产品种类产生多种实例构造者，这里我们需要\n * 构造两种品牌的电脑， 苹果电脑和联想电脑，所以我们生成了两个实体构造者\n * </p>\n *\n * @author: rch\n * @since: 2021-07-27\n */\npublic class LenovoComputerBuilder extends ComputerBuilder{\n\n    private Computer computer;\n\n    public LenovoComputerBuilder(String cpu, String ram) {\n        this.computer = new Computer(cpu, ram);\n    }\n\n    @Override\n    public void setUsbCount() {\n        computer.setUsbCount(4);\n    }\n\n    @Override\n    public void setKeyboard() {\n        computer.setKeyboard(\"联想键盘\");\n    }\n\n    @Override\n    public void setDisplay() {\n        computer.setDisplay(\"联想显示器\");\n    }\n\n    @Override\n    public Computer getComputer() {\n        return computer;\n    }\n}\n```\n\n```java\npackage top.heiping.ren.test.design.builder;\n\n/**\n * <p>\n * 实体构造者类，我们可以根据要构建的产品种类产生多种实例构造者，这里我们需要\n * 构造两种品牌的电脑， 苹果电脑和联想电脑，所以我们生成了两个实体构造者\n * </p>\n *\n * @author: rch\n * @since: 2021-07-27\n */\npublic class MacComputerBuilder extends ComputerBuilder{\n\n    private Computer computer;\n\n    public MacComputerBuilder(String cpu, String ram) {\n        this.computer = new Computer(cpu, ram);\n    }\n\n    @Override\n    public void setUsbCount() {\n        computer.setUsbCount(2);\n    }\n\n    @Override\n    public void setKeyboard() {\n        computer.setKeyboard(\"苹果键盘\");\n    }\n\n    @Override\n    public void setDisplay() {\n        computer.setDisplay(\"苹果显示器\");\n    }\n\n    @Override\n    public Computer getComputer() {\n        return computer;\n    }\n}\n```\n\n```java\npackage top.heiping.ren.test.design.builder;\n\n/**\n * <p>\n * 指导者(Director)\n * </p>\n *\n * @author: rch\n * @since: 2021-07-27\n */\npublic class ComputerDirector {\n    public void makeComputer(ComputerBuilder builder){\n        builder.setUsbCount();\n        builder.setDisplay();\n        builder.setKeyboard();\n    }\n}\n```\n\n```java\npackage top.heiping.ren.test.design.builder;\n\n/**\n * <p>\n *  首先生成一个director (1)，然后生成一个目标builder (2)，接着使用director组装builder (3),组装完毕后使用builder创建产品实例 (4)。\n * </p>\n *\n * @author: rch\n * @since: 2021-07-27\n */\npublic class TestMian {\n    public static void main(String[] args) {\n        // 1\n        ComputerDirector director=new ComputerDirector();\n        //2\n        ComputerBuilder builder=new MacComputerBuilder(\"I5处理器\",\"三星125\");\n        //3\n        director.makeComputer(builder);\n        //4\n        Computer macComputer=builder.getComputer();\n        System.out.println(\"mac computer:\"+macComputer.toString());\n\n        ComputerBuilder lenovoBuilder=new LenovoComputerBuilder(\"I7处理器\",\"海力士222\");\n        director.makeComputer(lenovoBuilder);\n        Computer lenovoComputer=lenovoBuilder.getComputer();\n        System.out.println(\"lenovo computer:\"+lenovoComputer.toString());\n    }\n}\n```\n\n', '', '建造者模式', 0, '建造者模式使用场景当一个类的构造函数参数个数超过4个，而且这些参数有些是可选的参数，考虑使用构造者模式解决问题一个类的构造函数参数超过4个，而且这些参数有些是可选的时，我们通常有两种办法来构建它的对象。 例如我们现在有如下一个类计算机类Computer，其中cpu与ram是必填参数，而其他3个是可选', '', 'http://supren.top/upload/2021/07/2-56681021634c46079bec709fe6998f5d.jpg', '建造者模式', 0, NULL, 36, 6556);
INSERT INTO `posts` VALUES (0, 12, '2021-08-03 18:19:47.333000', '2021-08-03 18:19:47.333000', b'0', '2021-08-03 18:19:47.333000', 0, '<h3 id=\"mysql面试解读\">Mysql面试解读</h3>\n<h4 id=\"1什么是mysql的主从复制\">1.什么是Mysql的主从复制</h4>\n<blockquote>\n<p>基本概念：<br />\nMySQL主从复制是指数据可以从一个MySQL数据库服务器主节点复制到另一个或者多个从节点，*** MySQL默认采用异步复制方式，这样从节点不用一直访问主节点来更新自己的数据***。数据的更新可以在远程链接上进行，从节点可以复制主数据库或者特定的数据库，或者特定的表。Mysql的主从复制是通过BingLog来实现的。</p>\n</blockquote>\n<h4 id=\"2mysql为什么需要主从复制\">2.Mysql为什么需要主从复制</h4>\n<blockquote>\n<p>Mysql的主从复制到底解决了什么问题：</p>\n</blockquote>\n<blockquote>\n<p>1.在业务复杂的系统中，有那么一个情景。有一句sql语句需要锁表，导致暂时不能使用读服务，那么就很影响运行中的业务，使用主从复制，让主库负责写，从库负责读，即使出现了主库锁表的情况，通过从库也可以保证业务的正常运作。（多库保证数据一致性）</p>\n<p>2.做数据的热备 (主备，主挂了，主备上(一般情况他不参与系统运行，当主挂了他上))</p>\n<p>3.架构的拓展，业务量越来越大，I/O访问频率过高，单机无法满足，此时多库的存储，降低磁盘的I/O访问的频率，提升单个机器的I/O性能。(单台数据库又瓶颈(千万级别)超出后，分库分表，)</p>\n</blockquote>\n<h4 id=\"3acid是靠什么来保证的\">3.ACID是靠什么来保证的</h4>\n<blockquote>\n<p>A:*** 原子性:是由undolog日志来保证的***，它记录了需要回滚的日志信息，事物回滚时撤销意境执行成功的sql</p>\n<p>​	 增删改操作时，之前已经保留好了一个历史版本数据了，并且已经保存到undolog里，当你进行回滚的时候，会找到对应的历史版本数据，进行回显，把你之前成功执行的sql语句撤销掉。</p>\n<p>C:*** 一致性: 是其他三大特性保证***，程序代码要保证业务上的一致性</p>\n<p>​    进行数据操作的最根本的追求。</p>\n<p>I:*** 隔离性 是由MVCC 保证的(多版本控制协议) ***</p>\n<p>保证事物之前相互隔离，不受打扰。</p>\n<p>D:*** 持久性由redolog 来保证的***，mysql修改数据的事后会在redolog中记录一份日志数据，就算数据没有保存成功，只要日志保存成功了，数据仍然不会丢失。</p>\n<p>​	每次在更新数据的时候，数据一定要持久化到磁盘的。每次更新的数据在磁盘里是乱序排放的，没有规律。如果想在磁盘里修改，必须找到记录。然后进行修改，这是随机读写，效率比较低。mysql  操作写入redolog. 都是顺序读写的。进行修改的时候，只要先保证日志写成功了，顺序写的，就算数据没有写成功，没有关系，我们依然可以根据redolog来进行数据的持久化操作，最终可以把数据找回来，写到磁盘里。 *** redolog 和 binglog 如何保持一致？这里通过二次提交实现***</p>\n</blockquote>\n<h4 id=\"4mysql的数据结构又哪些各自优缺点是什么\">4.Mysql的数据结构又哪些，各自优缺点是什么</h4>\n<blockquote>\n<p>索引的数据结构和具体存储引擎有关，Mysql中使用较多的索引又hash索引，B+树索引，innodb的索引实现为B+树，memory存储引擎为hash索引。</p>\n</blockquote>\n<blockquote>\n<p>B+树是一个平很的多叉树，从根节点到每个叶子节点的高度差值不超过1， 而且同层级的二节点间有指针相关联接。在B+树上的常规索引，从根节点到叶子节点的搜索效率基本相当，不会出现大幅度的波动，而且机遇索引的顺序扫描时，也可以利用双向索引快速左右移动，效率非常高。因为，B+树索引呗广泛应用于数据库，文件系统等场景。</p>\n</blockquote>\n<blockquote>\n<p>哈西索引就采用一定的哈希算法，把键值换算成新的哈希值，索引时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可立即定位到相应位置，速度非常快。（类比HashMap 查找）</p>\n</blockquote>\n<blockquote>\n<p>如果时等值查询，那么哈西索引明显又绝对的优势，因为只需要经过一次算法即可找到相应的就键值，前提是键值都是唯一的，如果键值不唯一的，那就需要先找到该键值所在的位置，然后在根据链表往后扫描，直到找到对应的数据。</p>\n</blockquote>\n<blockquote>\n<p>如果是范围查询检索，这时候哈希索引就毫无用武之地了，因为原先的有序的键值，经过哈希算法后，有可能变成不连续的，就没办法在利用哈希索引完成范围查询检索。</p>\n</blockquote>\n<blockquote>\n<p>哈希索引也没办法利用索引完成排序，以及like这样的部分模糊查询。</p>\n</blockquote>\n<blockquote>\n<p>哈西索引也不支持多列联合索引的最左匹配规则</p>\n</blockquote>\n<blockquote>\n<p>B+树索引的关键字检索效率比较平均，不想B树那样波动很大，在有大量重复键值情况下，哈西索引的效率也是极地的，因此存在哈希碰撞问题。</p>\n</blockquote>\n<h4 id=\"mvcc解决的问题是什么\">MVCC解决的问题是什么？</h4>\n<blockquote>\n<p>多版本并发控制：</p>\n<p>数据库并发场景有三种,分别为：</p>\n<p>1.读读: 不存在任何问题，也不需要并发</p>\n<p>2.读写:有线程安全问题，可能会造成事物隔离性问题，可能遇到脏读 幻读  不可重复读</p>\n<p>3.写写:有线程安全问题，可能存在更新丢失问题</p>\n<p>*** MVCC是一种用来解决读写冲突的无锁并发控制***，也就是为事物分配单项增长的时间戳，为每个修改保存一个版本，*** 版本与事物时间戳关联***，<em><strong>读操作只读该事物开始前的数据库的快照</strong></em>，所以MVCC可以为数据库解决以下问题：</p>\n<p>1.在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写性能。</p>\n<p>2.解决脏读 幻读 不可重复读等事务隔离问题，但不能解决更新丢失问题。</p>\n</blockquote>\n<h4 id=\"mvcc-实现原理是什么\">MVCC 实现原理是什么？</h4>\n<blockquote>\n<p>MVCC的实现原理主要一俩记录中的三个隐藏字段，undolog, read view来实现。</p>\n</blockquote>\n<p>*** 隐藏字段 ***</p>\n<blockquote>\n<p>每行记录除了我们自定义的字段外，还有数据库隐式定义的DB_TRX_ID, DB_ROLL_PTR, DB_ROW_ID等字段</p>\n<p>*** DB_TRX_ID ***</p>\n<p>6个字节，最近修改事务ID,记录创建这条记录或者最后一次修改该记录的事务ID.</p>\n<p>*** DB_ROLL_PTR ***</p>\n<p>7个字节，回滚指针，指向这条记录的上一个版本，用于配合undolog，指向上一个旧版本。</p>\n<p>*** DB_ROW_ID ***</p>\n<p>6字节，隐藏的主键，如果数据表没有主键，那么innodb会自动生成一个6字节的row_id</p>\n<p>记录如图所示：<br />\n<img src=\"http://supren.top/upload/2021/08/1-f28f4eed2f634d81af5ac996e84d35c5.png\" alt=\"1\" /></p>\n<p>在上图中，DB_ROW_ID是数据库默认为该记录生成的唯一隐藏式主键，DB_TRX_ID式当前操作该记录的事务ID,DB_ROLL_PRT是一个回滚指针，用于配合undo日志，指向上一个旧版本。</p>\n<p>*** undo log ***</p>\n<p>undolog被称为回滚日志，表示在进行insert delete upate操作的时候产生的方便回滚的日志。</p>\n<p>当进行insert操作的时候，产生的undolog只在事务回滚的时候需要，并在事务提交之后就可以被立刻丢弃</p>\n<p>*** 当进行update和delete操作的时候，产生的undolog不仅仅在事务回滚的时候需要，在快照读的时候也需要，所以不能随便删除，只有在快照读或事务回滚不涉及该日志时，对应的日志才会被purge线程统一清除 ***。（当数据发生了更新和删除操作的时候都只是设置一下老记录的deleted_bit, 并不是真正的将过期时的日志删除，因为为了节省磁盘空间，innodb有专门的purge线程清楚delete_bit为true的记录，如果某个记录的delete_id为true,并且DB_TRX_ID相对与purge线程的read view可见，那么这条记录一定可以呗删除。）</p>\n</blockquote>\n<p>*** 下面我们来看一下undolog生成的记录链 ***</p>\n<blockquote>\n<p>1.假如有一个事务编号为1 的事务向表中插入一条记录，那么此行数据的状态为：<br />\n<img src=\"http://supren.top/upload/2021/08/2-eb8a8f2c531342a6bf0499d2fb08b7f8.png\" alt=\"2\" /></p>\n<p>2.假设有第二个事务编号为2对该记录的name做出修改，改为lisi 在事务2修改该行记录数据时，数据库会对该行加排它锁，然后把该行数据拷贝到undolog中，最为旧记录，即在undolog中有当前行的拷贝副本。</p>\n<p>拷贝完毕后，修改该行的name为lisi,并且修改隐藏字段的事务id(DB_TRX_ID)为当前事务2的id,回滚指针指向拷贝到undolog的副本记录中</p>\n<p>事务提交后，释放锁：<br />\n<img src=\"http://supren.top/upload/2021/08/3-84726687c91046698f7a367747b2b0ce.png\" alt=\"3\" /></p>\n<p>3.假设有第三个事务编号为3对该记录的age做了修改，改为32</p>\n<p>在事务3修改该行数据的时候，数据库会对该行加排他锁</p>\n<p>然后把该行数据拷贝到undolog中，作为旧记录，发现该行记录已经有undolog了。那么最新的旧数据作为链表的表头，插在该行记录的undolog的最前面。</p>\n<p>修改该行age为32，并且修改隐藏字段的事务id为当前事务3的id,回滚指针指向刚刚拷贝到undolog的副本的记录。</p>\n<p>事务提交，释放锁：</p>\n<p><img src=\"http://supren.top/upload/2021/08/4-b9d7bc24cf624daab673b78798da7037.png\" alt=\"4\" /></p>\n<p>从上述的一系列图中，大家可以发现，不同事务或者相同事务对同一记录的修改，会导致该记录的undolog生成一条记录的版本线性表，即链表，undolog 的链首就是最新的旧记录，链尾就是最早的旧记录。</p>\n<p><em><strong>Read View</strong></em></p>\n<p>上面的流程如果看明白了，那么大家需要在深入理解下read view的概念了。</p>\n<p>Read View是事务进行快照读操作的事后产生的视图，在该事务执行快照读的那一刻，就会生成一个数据系统当前的快照，记录并维护系统当前活跃事务的id,事务的id是递增的。</p>\n<p>其实Read View的最大作用是用来做可见性判断的，也就是说当某个事务在执行快照读的时候，对该记录创建一个Read View的视图，把它当作条件去判断当前事务能够看到那个版本的数据，有可能读取到的是最新版本的数据，也有可能读取到的是当前行记录的undolog中的某个版本。</p>\n<p>Read View遵循的可见性算法主要是讲要被修改的数据的最新记录中的DB_TRX_ID(当前事务ID)  取出来，与系统当前其他活跃事务的id去对比，如果DB_TRX_ID跟Read View的属性做比较，不符合可见性，那么就通过DB_ROLL_PORT指针去去除undolog中DB_TRX_ID做比较，即遍历链表中的DB_TRX_ID,直到找到满足条件的DB_TRX_ID，这个DB_TRX_ID所在的旧记录就是当前事务能看到的最新老版本数据。</p>\n<p>Read View 的可见性规则如下：</p>\n<p>首先要回到Read View中的三个全局属性：</p>\n<p>trx_list:一个数值列表，用来维护Read View生成时刻系统正活跃的事务ID(1,2,3)</p>\n<p>up_limit_id：记录trx_list列表中事务最小的id(1)</p>\n<p>low_limit_id:Read View 生成时刻系统尚未分配的下一个事务ID(4)</p>\n<p>具体的比较规则如下：</p>\n<p>1.首先比较DB_TRX_ID &lt; up_limit_id，如果小于，则当前事务能看到DB_TRX_ID所在的记录，如果大于等于进入下一个判断。</p>\n<p>2.接下来判断DB_TRX_ID &gt;= low_limit_id，如果大于等于则代表DB_TRX_ID 所在的记录在Read View生成后才出现，那么对于当前事务肯定不可见，如果小于，则进入下一步判断</p>\n<p>3.判断DB_TRX_ID是否在活跃事务中，如果在，则代表在Read View生成时刻，这个事务还是活跃状态，还没有commit,修改的数据，当前事务也是看不到的，如果不在，则说明这个事务在Read View 生成之前就意境开始commit,那么修改的结果是能够看见的。</p>\n<p>*** MVCC 的整体处理流程***</p>\n<p>假设有四个事务同时在执行，如下图所示：</p>\n<p><img src=\"http://supren.top/upload/2021/08/5-21e06042025b49af89f24279fb88810f.png\" alt=\"5\" /></p>\n<p>从上述表格中，我们可以看到，当前事务2对某行数据执行了快照读，数据库为该行数据生成了一个Read View视图可以看到事务1和事务3还在活跃状态，事务4和事务2快照读的前一刻提交了更新，所以，在Read View中记录了系统当前活跃事务1,3 维护在一个列表中，同时可以看到up_limit_id 的值为1，而low_limit_id 值为5，如下图所示：</p>\n<p><img src=\"http://supren.top/upload/2021/08/6-e1b3cd4cecd242799d6b9e2e5ef6311c.png\" alt=\"6\" /></p>\n<p>没写2是因为自己的事务，自己肯定看到的。也就是说我自己的事务，我没提交我做的修改其实我也看的到。</p>\n<p>没出现4是因为，4意境提交了，trx_list用来维护Read View生成时刻系统正活跃的事务ID(1,2,3)</p>\n<p>在上述例子中，只有事务4修改过该记录，并在事务2进行快照读前，就提交了事务，所以该行当前数据的undolog如下图所示：</p>\n<p><img src=\"http://supren.top/upload/2021/08/7-c7f1498e90274d33bb2c024068dbf147.png\" alt=\"7\" /></p>\n<p>当事务2在快照读该行记录的是，会拿着该行记录的DB_TRX_ID去跟up_limit_id, lower_limit_id和活跃事务列表进行比较，判读事务2能看到该行记录的版本是那个。</p>\n<p>具体流程如下，先拿该行记录的事务ID(4)去跟Read View中的up_limit_id相比较，判断是否小于，通过对比发现不小于，所以不符合条件，继续判断是否大于等于low_limit_id,通过比较发现也不大于，所以不符合条件，判断事务4是否处于trx_list列表中，发现不在列表中，那么符合可见性条件，所以事务4修改后提交的最新结果对事务2的快照是课件的。因此，事务2读取到的最新数据记录是事务4所提交的版本，而事务4提交的版本也是全局角度的最新版本。如下图所示：</p>\n<p><img src=\"http://supren.top/upload/2021/08/8-14b247df73c641d792a18b5a87031192.png\" alt=\"8\" /></p>\n<p>当上述的内容都看明白了的话，那么大家就应该能够搞清楚这几个核心概念之间的关系了，下面我们讲一个不同的隔离级别下的快照读的不同。</p>\n<p><em><strong>RC RP级别下的InnoDB快照读有什么不同</strong></em></p>\n<p>RC:   读以提交</p>\n<p>RR:   可重复读</p>\n<p>比较规则都一样，不同点在于生成Read View 时机不同。</p>\n<p>因为Read View生成的时机不同，从而造成RC,RR级别快照读的结果不同。</p>\n<p>1.在RR 级别下的某个事务的对某条记录的第一次快照读会创建一个快照即Read View，将当前系统活跃的其他事务记录起来，此后在调用快照读的时候，还是使用的是同一个Read View，所以只要当前事务在其事务提交更新前使用过快照读，那么之后的快照读使用的都是同一个Read View，所以对之后的修改不可见。</p>\n<p>2.在RR级别下，快照读生成Read View时，Read View会记录此时所有其他活动和事务快照，这些事务的修改对于当前事务都是不可见的，而早于Read View创建的事务所做的修改均是可见</p>\n<p>3.在RC级别下，事务中，每次快照读都会生成一个快照和Read View 这是我们在RC级别下的事务中可以看到别的事务提交更新的原因。</p>\n</blockquote>\n<p><em><strong>总结</strong></em></p>\n<blockquote>\n<p>在RC隔离级别下，是每个快照都会生成并获取最新的Read View，而在RR隔离级别下，则是同一个事务中的第一个快照读才会创建Read View，之后的快照读获取的都是同一个Read View.</p>\n</blockquote>\n', 0, NULL, NULL, '### Mysql面试解读\n\n#### 1.什么是Mysql的主从复制\n\n> 基本概念：\n> MySQL主从复制是指数据可以从一个MySQL数据库服务器主节点复制到另一个或者多个从节点，*** MySQL默认采用异步复制方式，这样从节点不用一直访问主节点来更新自己的数据***。数据的更新可以在远程链接上进行，从节点可以复制主数据库或者特定的数据库，或者特定的表。Mysql的主从复制是通过BingLog来实现的。\n\n#### 2.Mysql为什么需要主从复制\n\n> Mysql的主从复制到底解决了什么问题：\n\n> 1.在业务复杂的系统中，有那么一个情景。有一句sql语句需要锁表，导致暂时不能使用读服务，那么就很影响运行中的业务，使用主从复制，让主库负责写，从库负责读，即使出现了主库锁表的情况，通过从库也可以保证业务的正常运作。（多库保证数据一致性）\n>\n> \n>\n> 2.做数据的热备 (主备，主挂了，主备上(一般情况他不参与系统运行，当主挂了他上))\n>\n> \n>\n> 3.架构的拓展，业务量越来越大，I/O访问频率过高，单机无法满足，此时多库的存储，降低磁盘的I/O访问的频率，提升单个机器的I/O性能。(单台数据库又瓶颈(千万级别)超出后，分库分表，)\n\n#### 3.ACID是靠什么来保证的\n\n> A:*** 原子性:是由undolog日志来保证的***，它记录了需要回滚的日志信息，事物回滚时撤销意境执行成功的sql\n>\n> ​	 增删改操作时，之前已经保留好了一个历史版本数据了，并且已经保存到undolog里，当你进行回滚的时候，会找到对应的历史版本数据，进行回显，把你之前成功执行的sql语句撤销掉。\n>\n> \n>\n> C:*** 一致性: 是其他三大特性保证***，程序代码要保证业务上的一致性\n>\n> ​    进行数据操作的最根本的追求。\n>\n> \n>\n> I:*** 隔离性 是由MVCC 保证的(多版本控制协议) ***\n>\n>    保证事物之前相互隔离，不受打扰。\n>\n> \n>\n> D:*** 持久性由redolog 来保证的***，mysql修改数据的事后会在redolog中记录一份日志数据，就算数据没有保存成功，只要日志保存成功了，数据仍然不会丢失。\n>\n> ​	每次在更新数据的时候，数据一定要持久化到磁盘的。每次更新的数据在磁盘里是乱序排放的，没有规律。如果想在磁盘里修改，必须找到记录。然后进行修改，这是随机读写，效率比较低。mysql  操作写入redolog. 都是顺序读写的。进行修改的时候，只要先保证日志写成功了，顺序写的，就算数据没有写成功，没有关系，我们依然可以根据redolog来进行数据的持久化操作，最终可以把数据找回来，写到磁盘里。 *** redolog 和 binglog 如何保持一致？这里通过二次提交实现***\n\n#### 4.Mysql的数据结构又哪些，各自优缺点是什么\n\n> 索引的数据结构和具体存储引擎有关，Mysql中使用较多的索引又hash索引，B+树索引，innodb的索引实现为B+树，memory存储引擎为hash索引。\n\n> B+树是一个平很的多叉树，从根节点到每个叶子节点的高度差值不超过1， 而且同层级的二节点间有指针相关联接。在B+树上的常规索引，从根节点到叶子节点的搜索效率基本相当，不会出现大幅度的波动，而且机遇索引的顺序扫描时，也可以利用双向索引快速左右移动，效率非常高。因为，B+树索引呗广泛应用于数据库，文件系统等场景。\n\n> 哈西索引就采用一定的哈希算法，把键值换算成新的哈希值，索引时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可立即定位到相应位置，速度非常快。（类比HashMap 查找）\n\n> 如果时等值查询，那么哈西索引明显又绝对的优势，因为只需要经过一次算法即可找到相应的就键值，前提是键值都是唯一的，如果键值不唯一的，那就需要先找到该键值所在的位置，然后在根据链表往后扫描，直到找到对应的数据。\n\n> 如果是范围查询检索，这时候哈希索引就毫无用武之地了，因为原先的有序的键值，经过哈希算法后，有可能变成不连续的，就没办法在利用哈希索引完成范围查询检索。\n\n> 哈希索引也没办法利用索引完成排序，以及like这样的部分模糊查询。\n\n> 哈西索引也不支持多列联合索引的最左匹配规则\n\n> B+树索引的关键字检索效率比较平均，不想B树那样波动很大，在有大量重复键值情况下，哈西索引的效率也是极地的，因此存在哈希碰撞问题。\n\n#### MVCC解决的问题是什么？\n\n> 多版本并发控制：\n>\n> 数据库并发场景有三种,分别为：\n>\n> 1.读读: 不存在任何问题，也不需要并发\n>\n> \n>\n> 2.读写:有线程安全问题，可能会造成事物隔离性问题，可能遇到脏读 幻读  不可重复读\n>\n> \n>\n> 3.写写:有线程安全问题，可能存在更新丢失问题\n>\n> *** MVCC是一种用来解决读写冲突的无锁并发控制***，也就是为事物分配单项增长的时间戳，为每个修改保存一个版本，*** 版本与事物时间戳关联***，***读操作只读该事物开始前的数据库的快照***，所以MVCC可以为数据库解决以下问题：\n>\n> 1.在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写性能。\n>\n> 2.解决脏读 幻读 不可重复读等事务隔离问题，但不能解决更新丢失问题。\n\n#### MVCC 实现原理是什么？\n\n> MVCC的实现原理主要一俩记录中的三个隐藏字段，undolog, read view来实现。\n\n*** 隐藏字段 ***\n\n> 每行记录除了我们自定义的字段外，还有数据库隐式定义的DB_TRX_ID, DB_ROLL_PTR, DB_ROW_ID等字段\n>\n> *** DB_TRX_ID ***\n>\n> 6个字节，最近修改事务ID,记录创建这条记录或者最后一次修改该记录的事务ID.\n>\n> *** DB_ROLL_PTR ***\n>\n> 7个字节，回滚指针，指向这条记录的上一个版本，用于配合undolog，指向上一个旧版本。\n>\n> *** DB_ROW_ID ***\n>\n> 6字节，隐藏的主键，如果数据表没有主键，那么innodb会自动生成一个6字节的row_id\n>\n> 记录如图所示：\n>![1](http://supren.top/upload/2021/08/1-f28f4eed2f634d81af5ac996e84d35c5.png)\n> \n>\n> 在上图中，DB_ROW_ID是数据库默认为该记录生成的唯一隐藏式主键，DB_TRX_ID式当前操作该记录的事务ID,DB_ROLL_PRT是一个回滚指针，用于配合undo日志，指向上一个旧版本。\n>\n> *** undo log ***\n>\n> undolog被称为回滚日志，表示在进行insert delete upate操作的时候产生的方便回滚的日志。\n>\n> 当进行insert操作的时候，产生的undolog只在事务回滚的时候需要，并在事务提交之后就可以被立刻丢弃\n>\n> *** 当进行update和delete操作的时候，产生的undolog不仅仅在事务回滚的时候需要，在快照读的时候也需要，所以不能随便删除，只有在快照读或事务回滚不涉及该日志时，对应的日志才会被purge线程统一清除 ***。（当数据发生了更新和删除操作的时候都只是设置一下老记录的deleted_bit, 并不是真正的将过期时的日志删除，因为为了节省磁盘空间，innodb有专门的purge线程清楚delete_bit为true的记录，如果某个记录的delete_id为true,并且DB_TRX_ID相对与purge线程的read view可见，那么这条记录一定可以呗删除。）\n\n*** 下面我们来看一下undolog生成的记录链 ***\n\n> 1.假如有一个事务编号为1 的事务向表中插入一条记录，那么此行数据的状态为：\n>![2](http://supren.top/upload/2021/08/2-eb8a8f2c531342a6bf0499d2fb08b7f8.png)\n> \n>\n> 2.假设有第二个事务编号为2对该记录的name做出修改，改为lisi 在事务2修改该行记录数据时，数据库会对该行加排它锁，然后把该行数据拷贝到undolog中，最为旧记录，即在undolog中有当前行的拷贝副本。\n>\n> 拷贝完毕后，修改该行的name为lisi,并且修改隐藏字段的事务id(DB_TRX_ID)为当前事务2的id,回滚指针指向拷贝到undolog的副本记录中\n>\n> 事务提交后，释放锁：\n>![3](http://supren.top/upload/2021/08/3-84726687c91046698f7a367747b2b0ce.png)\n> \n>\n> 3.假设有第三个事务编号为3对该记录的age做了修改，改为32\n>\n> 在事务3修改该行数据的时候，数据库会对该行加排他锁\n>\n> 然后把该行数据拷贝到undolog中，作为旧记录，发现该行记录已经有undolog了。那么最新的旧数据作为链表的表头，插在该行记录的undolog的最前面。\n>\n> 修改该行age为32，并且修改隐藏字段的事务id为当前事务3的id,回滚指针指向刚刚拷贝到undolog的副本的记录。\n>\n> 事务提交，释放锁：\n>\n> ![4](http://supren.top/upload/2021/08/4-b9d7bc24cf624daab673b78798da7037.png)\n>\n> 从上述的一系列图中，大家可以发现，不同事务或者相同事务对同一记录的修改，会导致该记录的undolog生成一条记录的版本线性表，即链表，undolog 的链首就是最新的旧记录，链尾就是最早的旧记录。\n>\n> ***Read View***\n>\n> 上面的流程如果看明白了，那么大家需要在深入理解下read view的概念了。\n>\n> Read View是事务进行快照读操作的事后产生的视图，在该事务执行快照读的那一刻，就会生成一个数据系统当前的快照，记录并维护系统当前活跃事务的id,事务的id是递增的。\n>\n> 其实Read View的最大作用是用来做可见性判断的，也就是说当某个事务在执行快照读的时候，对该记录创建一个Read View的视图，把它当作条件去判断当前事务能够看到那个版本的数据，有可能读取到的是最新版本的数据，也有可能读取到的是当前行记录的undolog中的某个版本。\n>\n> Read View遵循的可见性算法主要是讲要被修改的数据的最新记录中的DB_TRX_ID(当前事务ID)  取出来，与系统当前其他活跃事务的id去对比，如果DB_TRX_ID跟Read View的属性做比较，不符合可见性，那么就通过DB_ROLL_PORT指针去去除undolog中DB_TRX_ID做比较，即遍历链表中的DB_TRX_ID,直到找到满足条件的DB_TRX_ID，这个DB_TRX_ID所在的旧记录就是当前事务能看到的最新老版本数据。\n>\n> Read View 的可见性规则如下：\n>\n> 首先要回到Read View中的三个全局属性：\n>\n> trx_list:一个数值列表，用来维护Read View生成时刻系统正活跃的事务ID(1,2,3)\n>\n> up_limit_id：记录trx_list列表中事务最小的id(1)\n>\n> low_limit_id:Read View 生成时刻系统尚未分配的下一个事务ID(4)\n>\n> 具体的比较规则如下：\n>\n> 1.首先比较DB_TRX_ID < up_limit_id，如果小于，则当前事务能看到DB_TRX_ID所在的记录，如果大于等于进入下一个判断。\n>\n> 2.接下来判断DB_TRX_ID >= low_limit_id，如果大于等于则代表DB_TRX_ID 所在的记录在Read View生成后才出现，那么对于当前事务肯定不可见，如果小于，则进入下一步判断\n>\n> 3.判断DB_TRX_ID是否在活跃事务中，如果在，则代表在Read View生成时刻，这个事务还是活跃状态，还没有commit,修改的数据，当前事务也是看不到的，如果不在，则说明这个事务在Read View 生成之前就意境开始commit,那么修改的结果是能够看见的。\n>\n> *** MVCC 的整体处理流程***\n>\n> 假设有四个事务同时在执行，如下图所示：\n>\n> ![5](http://supren.top/upload/2021/08/5-21e06042025b49af89f24279fb88810f.png)\n>\n> 从上述表格中，我们可以看到，当前事务2对某行数据执行了快照读，数据库为该行数据生成了一个Read View视图可以看到事务1和事务3还在活跃状态，事务4和事务2快照读的前一刻提交了更新，所以，在Read View中记录了系统当前活跃事务1,3 维护在一个列表中，同时可以看到up_limit_id 的值为1，而low_limit_id 值为5，如下图所示：\n>\n> ![6](http://supren.top/upload/2021/08/6-e1b3cd4cecd242799d6b9e2e5ef6311c.png)\n>\n> 没写2是因为自己的事务，自己肯定看到的。也就是说我自己的事务，我没提交我做的修改其实我也看的到。\n>\n> 没出现4是因为，4意境提交了，trx_list用来维护Read View生成时刻系统正活跃的事务ID(1,2,3)\n>\n> 在上述例子中，只有事务4修改过该记录，并在事务2进行快照读前，就提交了事务，所以该行当前数据的undolog如下图所示：\n>\n> ![7](http://supren.top/upload/2021/08/7-c7f1498e90274d33bb2c024068dbf147.png)\n>\n> 当事务2在快照读该行记录的是，会拿着该行记录的DB_TRX_ID去跟up_limit_id, lower_limit_id和活跃事务列表进行比较，判读事务2能看到该行记录的版本是那个。\n>\n> 具体流程如下，先拿该行记录的事务ID(4)去跟Read View中的up_limit_id相比较，判断是否小于，通过对比发现不小于，所以不符合条件，继续判断是否大于等于low_limit_id,通过比较发现也不大于，所以不符合条件，判断事务4是否处于trx_list列表中，发现不在列表中，那么符合可见性条件，所以事务4修改后提交的最新结果对事务2的快照是课件的。因此，事务2读取到的最新数据记录是事务4所提交的版本，而事务4提交的版本也是全局角度的最新版本。如下图所示：\n>\n> ![8](http://supren.top/upload/2021/08/8-14b247df73c641d792a18b5a87031192.png)\n>\n> 当上述的内容都看明白了的话，那么大家就应该能够搞清楚这几个核心概念之间的关系了，下面我们讲一个不同的隔离级别下的快照读的不同。\n>\n> ***RC RP级别下的InnoDB快照读有什么不同***\n>\n> RC:   读以提交\n>\n> RR:   可重复读\n>\n> 比较规则都一样，不同点在于生成Read View 时机不同。\n>\n> \n>\n> 因为Read View生成的时机不同，从而造成RC,RR级别快照读的结果不同。\n>\n> 1.在RR 级别下的某个事务的对某条记录的第一次快照读会创建一个快照即Read View，将当前系统活跃的其他事务记录起来，此后在调用快照读的时候，还是使用的是同一个Read View，所以只要当前事务在其事务提交更新前使用过快照读，那么之后的快照读使用的都是同一个Read View，所以对之后的修改不可见。\n>\n> 2.在RR级别下，快照读生成Read View时，Read View会记录此时所有其他活动和事务快照，这些事务的修改对于当前事务都是不可见的，而早于Read View创建的事务所做的修改均是可见\n>\n> 3.在RC级别下，事务中，每次快照读都会生成一个快照和Read View 这是我们在RC级别下的事务中可以看到别的事务提交更新的原因。\n\n***总结***\n\n> 在RC隔离级别下，是每个快照都会生成并获取最新的Read View，而在RR隔离级别下，则是同一个事务中的第一个快照读才会创建Read View，之后的快照读获取的都是同一个Read View.\n\n', '', 'mysql-mian-shi-jie-du-bi-ji', 0, '', '', 'http://supren.top/upload/2021/08/11-f51bff67cef14cb0a8a29b025fc4156d.webp', 'Mysql面试解读笔记', 0, NULL, 27, 6857);
INSERT INTO `posts` VALUES (0, 13, '2021-08-04 10:22:51.491000', '2021-08-04 10:22:51.491000', b'0', '2021-08-04 10:22:51.491000', 0, '<p><a href=\"https://www.cnblogs.com/caoshousong/p/10845396.html\">https://www.cnblogs.com/caoshousong/p/10845396.html</a></p>\n<p>Mysql查看连接数（连接总数、活跃数、最大并发数）<br />\n1<br />\n2<br />\nshow variables like\'%max_connection%\'; 查看最大连接数<br />\nset global max_connections=1000;        重新设置最大连接数<br />\nmysql&gt; show status like \'Threads%\';<br />\n+-------------------+-------+<br />\n| Variable_name     | Value |<br />\n+-------------------+-------+<br />\n| Threads_cached    | 32    |<br />\n| Threads_connected | 10    |<br />\n| Threads_created   | 50    |<br />\n| Threads_rejected  | 0     |<br />\n| Threads_running   | 1     |<br />\n+-------------------+-------+<br />\n5 rowsin set (0.00 sec)<br />\nThreads_connected ：这个数值指的是打开的连接数.</p>\n<p>Threads_running ：这个数值指的是激活的连接数，这个数值一般远低于connected数值.</p>\n<p>Threads_connected 跟show processlist结果相同，表示当前连接数。准确的来说，Threads_running是代表当前并发数</p>\n<p>查询数据库当前设置的最大连接数<br />\nmysql&gt; show variables like\'%max_connection%\';<br />\n+-----------------------+-------+<br />\n| Variable_name         | Value |<br />\n+-----------------------+-------+<br />\n| extra_max_connections |       |<br />\n| max_connections       | 2512  |<br />\n+-----------------------+-------+<br />\n2 rowsin set (0.00 sec)</p>\n<p>在/etc/my.cnf里面设置数据库的最大连接数<br />\n[mysqld]<br />\nmax_connections = 1000</p>\n<p>MySQL服务器的线程数需要在一个合理的范围之内，这样才能保证MySQL服务器健康平稳地运行。Threads_created表示创建过的线程数，通过查看Threads_created就可以查看MySQL服务器的进程状态。<br />\nmysql&gt; show global status like\'Thread%\';<br />\n+-------------------------+-------+<br />\n| Variable_name           | Value |<br />\n+-------------------------+-------+<br />\n| Threadpool_idle_threads | 0     |<br />\n| Threadpool_threads      | 0     |<br />\n| Threads_cached          | 29    |<br />\n| Threads_connected       | 13    |<br />\n| Threads_created         | 50    |<br />\n| Threads_rejected        | 0     |<br />\n| Threads_running         | 1     |<br />\n+-------------------------+-------+<br />\n7 rowsin set (0.00 sec)<br />\n如果我们在MySQL服务器配置文件中设置了thread_cache_size，当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁(前提是缓存数未达上限)。</p>\n<p>Threads_created表示创建过的线程数，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中thread_cache_size值，查询服务器thread_cache_size的值：<br />\nmysql&gt; show variables like\'thread_cache_size\';<br />\n+-------------------+-------+<br />\n| Variable_name     | Value |<br />\n+-------------------+-------+<br />\n| thread_cache_size | 100   |<br />\n+-------------------+-------+<br />\n1 rowin set (0.00 sec)<br />\n命令：show processlist;<br />\n如果是root帐号，你能看到所有用户的当前连接。如果是其它普通帐号，只能看到自己占用的连接。<br />\nshow processlist命令只列出前100条，如果想全列出请使用show full processlist;<br />\nmysql&gt; show processlist;</p>\n<p>命令：show status;</p>\n<p>mysql&gt;show status like \'%变量名%\';</p>\n<p>变量名如下：<br />\nAborted_clients 由于客户没有正确关闭连接已经死掉，已经放弃的连接数量。<br />\nAborted_connects 尝试已经失败的MySQL服务器的连接的次数。<br />\nConnections 试图连接MySQL服务器的次数。<br />\nCreated_tmp_tables 当执行语句时，已经被创造了的隐含临时表的数量。<br />\nDelayed_insert_threads 正在使用的延迟插入处理器线程的数量。<br />\nDelayed_writes 用INSERT DELAYED写入的行数。<br />\nDelayed_errors 用INSERT DELAYED写入的发生某些错误(可能重复键值)的行数。<br />\nFlush_commands 执行FLUSH命令的次数。<br />\nHandler_delete 请求从一张表中删除行的次数。<br />\nHandler_read_first 请求读入表中第一行的次数。<br />\nHandler_read_key 请求数字基于键读行。<br />\nHandler_read_next 请求读入基于一个键的一行的次数。<br />\nHandler_read_rnd 请求读入基于一个固定位置的一行的次数。<br />\nHandler_update 请求更新表中一行的次数。<br />\nHandler_write 请求向表中插入一行的次数。<br />\nKey_blocks_used 用于关键字缓存的块的数量。<br />\nKey_read_requests 请求从缓存读入一个键值的次数。<br />\nKey_reads 从磁盘物理读入一个键值的次数。<br />\nKey_write_requests 请求将一个关键字块写入缓存次数。<br />\nKey_writes 将一个键值块物理写入磁盘的次数。<br />\nMax_used_connections 同时使用的连接的最大数目。<br />\nNot_flushed_key_blocks 在键缓存中已经改变但是还没被清空到磁盘上的键块。<br />\nNot_flushed_delayed_rows 在INSERT DELAY队列中等待写入的行的数量。<br />\nOpen_tables 打开表的数量。<br />\nOpen_files 打开文件的数量。<br />\nOpen_streams 打开流的数量(主要用于日志记载）<br />\nOpened_tables 已经打开的表的数量。<br />\nQuestions 发往服务器的查询的数量。<br />\nSlow_queries 要花超过long_query_time时间的查询数量。<br />\nThreads_connected 当前打开的连接的数量。<br />\nThreads_running 不在睡眠的线程数量。<br />\nUptime 服务器工作了多长时间，单位秒。　</p>\n', 0, NULL, NULL, 'https://www.cnblogs.com/caoshousong/p/10845396.html\n\nMysql查看连接数（连接总数、活跃数、最大并发数）\n1\n2\nshow variables like\'%max_connection%\'; 查看最大连接数\nset global max_connections=1000;        重新设置最大连接数\nmysql> show status like \'Threads%\';\n+-------------------+-------+\n| Variable_name     | Value |\n+-------------------+-------+\n| Threads_cached    | 32    |\n| Threads_connected | 10    |\n| Threads_created   | 50    |\n| Threads_rejected  | 0     |\n| Threads_running   | 1     |\n+-------------------+-------+\n5 rowsin set (0.00 sec)\nThreads_connected ：这个数值指的是打开的连接数.\n\nThreads_running ：这个数值指的是激活的连接数，这个数值一般远低于connected数值.\n\nThreads_connected 跟show processlist结果相同，表示当前连接数。准确的来说，Threads_running是代表当前并发数\n\n查询数据库当前设置的最大连接数\nmysql> show variables like\'%max_connection%\';\n+-----------------------+-------+\n| Variable_name         | Value |\n+-----------------------+-------+\n| extra_max_connections |       |\n| max_connections       | 2512  |\n+-----------------------+-------+\n2 rowsin set (0.00 sec)\n \n在/etc/my.cnf里面设置数据库的最大连接数\n[mysqld]\nmax_connections = 1000\n \nMySQL服务器的线程数需要在一个合理的范围之内，这样才能保证MySQL服务器健康平稳地运行。Threads_created表示创建过的线程数，通过查看Threads_created就可以查看MySQL服务器的进程状态。\nmysql> show global status like\'Thread%\';\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| Threadpool_idle_threads | 0     |\n| Threadpool_threads      | 0     |\n| Threads_cached          | 29    |\n| Threads_connected       | 13    |\n| Threads_created         | 50    |\n| Threads_rejected        | 0     |\n| Threads_running         | 1     |\n+-------------------------+-------+\n7 rowsin set (0.00 sec)\n如果我们在MySQL服务器配置文件中设置了thread_cache_size，当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁(前提是缓存数未达上限)。\n\nThreads_created表示创建过的线程数，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中thread_cache_size值，查询服务器thread_cache_size的值：\nmysql> show variables like\'thread_cache_size\';\n+-------------------+-------+\n| Variable_name     | Value |\n+-------------------+-------+\n| thread_cache_size | 100   |\n+-------------------+-------+\n1 rowin set (0.00 sec)\n命令：show processlist;\n如果是root帐号，你能看到所有用户的当前连接。如果是其它普通帐号，只能看到自己占用的连接。\nshow processlist命令只列出前100条，如果想全列出请使用show full processlist;\nmysql> show processlist;\n\n命令：show status;\n\nmysql>show status like \'%变量名%\';\n\n变量名如下：\nAborted_clients 由于客户没有正确关闭连接已经死掉，已经放弃的连接数量。\nAborted_connects 尝试已经失败的MySQL服务器的连接的次数。\nConnections 试图连接MySQL服务器的次数。\nCreated_tmp_tables 当执行语句时，已经被创造了的隐含临时表的数量。\nDelayed_insert_threads 正在使用的延迟插入处理器线程的数量。\nDelayed_writes 用INSERT DELAYED写入的行数。\nDelayed_errors 用INSERT DELAYED写入的发生某些错误(可能重复键值)的行数。\nFlush_commands 执行FLUSH命令的次数。\nHandler_delete 请求从一张表中删除行的次数。\nHandler_read_first 请求读入表中第一行的次数。\nHandler_read_key 请求数字基于键读行。\nHandler_read_next 请求读入基于一个键的一行的次数。\nHandler_read_rnd 请求读入基于一个固定位置的一行的次数。\nHandler_update 请求更新表中一行的次数。\nHandler_write 请求向表中插入一行的次数。\nKey_blocks_used 用于关键字缓存的块的数量。\nKey_read_requests 请求从缓存读入一个键值的次数。\nKey_reads 从磁盘物理读入一个键值的次数。\nKey_write_requests 请求将一个关键字块写入缓存次数。\nKey_writes 将一个键值块物理写入磁盘的次数。\nMax_used_connections 同时使用的连接的最大数目。\nNot_flushed_key_blocks 在键缓存中已经改变但是还没被清空到磁盘上的键块。\nNot_flushed_delayed_rows 在INSERT DELAY队列中等待写入的行的数量。\nOpen_tables 打开表的数量。\nOpen_files 打开文件的数量。\nOpen_streams 打开流的数量(主要用于日志记载）\nOpened_tables 已经打开的表的数量。\nQuestions 发往服务器的查询的数量。\nSlow_queries 要花超过long_query_time时间的查询数量。\nThreads_connected 当前打开的连接的数量。\nThreads_running 不在睡眠的线程数量。\nUptime 服务器工作了多长时间，单位秒。　', '', 'mysql-lian-jie-shu-cha-kan', 0, '', '', 'http://supren.top/upload/2021/07/3-87c562f40d3d46829c1d5261ffc365bf.jpg', 'Mysql链接数查看', 0, NULL, 26, 3322);

-- ----------------------------
-- Table structure for tags
-- ----------------------------
DROP TABLE IF EXISTS `tags`;
CREATE TABLE `tags`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `slug` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `slug_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `thumbnail` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `UK_sn0d91hxu700qcw0n4pebp5vc`(`slug`) USING BTREE,
  INDEX `tags_name`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 16 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tags
-- ----------------------------
INSERT INTO `tags` VALUES (1, '2021-07-15 16:00:32.351000', '2021-07-15 16:00:32.351000', 'Mysql', 'mysql', NULL, 'http://supren.top/upload/2021/07/Mysql-dc32d268c2ed4b7d889952d728e32afd.jpg');
INSERT INTO `tags` VALUES (2, '2021-07-15 16:03:31.320000', '2021-07-15 16:03:31.320000', 'Spring', 'spring', NULL, 'http://supren.top/upload/2021/07/spring-aecaa0c1b72d4933903d2f701ce13ad4.jpg');
INSERT INTO `tags` VALUES (3, '2021-07-15 16:03:58.184000', '2021-07-15 16:03:58.184000', 'Spring Cloud', 'springcloud', NULL, 'http://supren.top/upload/2021/07/springCloud-4efab36f82e54168b2888913392a3a42.jpg');
INSERT INTO `tags` VALUES (4, '2021-07-15 16:04:11.968000', '2021-07-15 16:04:11.968000', 'Spring Boot', 'springboot', NULL, 'http://supren.top/upload/2021/07/springBoot-3a65ef63fda14d8f8012ce0463eb117e.jpg');
INSERT INTO `tags` VALUES (5, '2021-07-15 16:04:25.668000', '2021-07-15 16:04:25.668000', 'Nginx', 'nginx', NULL, 'http://supren.top/upload/2021/07/nginx-9066434aaf9b49b3a145046f629fcb30.jpg');
INSERT INTO `tags` VALUES (6, '2021-07-15 16:04:35.943000', '2021-07-15 16:04:35.943000', 'Java', 'java', NULL, 'http://supren.top/upload/2021/07/java-1f2896102e6442cfb99251d934549f1d.jpg');
INSERT INTO `tags` VALUES (7, '2021-07-15 16:05:01.669000', '2021-07-15 16:05:01.669000', '设计模式', 'design', NULL, 'http://supren.top/upload/2021/07/0baef6d9880511ebb6edd017c2d2eca2-76a13b2fe0624568950b668f1866095f.png');
INSERT INTO `tags` VALUES (8, '2021-07-15 16:06:21.342000', '2021-07-15 16:06:21.342000', '读书', 'redbook', NULL, 'http://supren.top/upload/2021/07/book-5676a0551f0346ba88e913f70056e1eb.jpg');
INSERT INTO `tags` VALUES (9, '2021-07-15 16:07:50.588000', '2021-07-15 16:07:50.588000', '随想', 'think', NULL, 'http://supren.top/upload/2021/07/think-04141e3bf2cd4c46ad8e841acab4d5e2.jpg');
INSERT INTO `tags` VALUES (10, '2021-07-15 16:10:13.026000', '2021-07-15 16:10:13.026000', '分布式微服务架构', 'distribution', NULL, 'http://supren.top/upload/2021/07/%E5%88%86%E5%B8%83%E5%BC%8F-eec3406c6d3f4665852b53b3073ee1a3.jpg');
INSERT INTO `tags` VALUES (11, '2021-07-15 16:12:12.835000', '2021-07-15 16:12:12.835000', 'Redis', 'redis', NULL, 'http://supren.top/upload/2021/07/redis-4543abe43a284f36844d7398b09bfd8d.jpg');
INSERT INTO `tags` VALUES (12, '2021-07-15 16:12:25.425000', '2021-07-15 16:12:25.425000', 'Mongodb', 'mongodb', NULL, 'http://supren.top/upload/2021/07/mongodb-bf55564b2ac143e497c30556a003cf22.jpg');
INSERT INTO `tags` VALUES (13, '2021-07-15 16:12:40.564000', '2021-07-15 16:12:40.564000', 'ELK', 'elk', NULL, 'http://supren.top/upload/2021/07/elk-70f7f08255d54718a6ab330b78bee8cd.jpg');
INSERT INTO `tags` VALUES (14, '2021-07-15 16:14:35.031000', '2021-07-15 16:14:35.031000', '网络', 'network', NULL, 'http://supren.top/upload/2021/07/network-d947f3deeb894422b99f786479c763a1.jpg');
INSERT INTO `tags` VALUES (15, '2021-07-15 16:16:13.736000', '2021-07-15 16:16:13.736000', 'JVM', 'jvm', NULL, 'http://supren.top/upload/2021/07/jvm-a140ee38d28b44b2b1165c911cc7a973.jpg');
INSERT INTO `tags` VALUES (16, '2021-07-15 16:17:13.884000', '2021-07-15 16:17:13.884000', '算法', 'algorithm', NULL, 'http://supren.top/upload/2021/07/algorithm-c8d6d2987a624ad697c522281b58206f.jpg');

-- ----------------------------
-- Table structure for theme_settings
-- ----------------------------
DROP TABLE IF EXISTS `theme_settings`;
CREATE TABLE `theme_settings`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `setting_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `theme_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `setting_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `theme_settings_setting_key`(`setting_key`) USING BTREE,
  INDEX `theme_settings_theme_id`(`theme_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 278 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of theme_settings
-- ----------------------------
INSERT INTO `theme_settings` VALUES (1, '2021-07-10 17:15:37.500000', '2021-07-15 14:56:45.097000', 'focus_height', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (2, '2021-07-10 17:15:37.547000', '2021-07-10 17:30:41.019000', 'feature_title', 'louie_senpai_siren', '常用链接');
INSERT INTO `theme_settings` VALUES (3, '2021-07-10 17:15:37.591000', '2021-07-15 14:55:57.945000', 'focus_infos', 'louie_senpai_siren', 'false');
INSERT INTO `theme_settings` VALUES (4, '2021-07-10 17:15:37.641000', '2021-07-10 17:30:41.047000', 'feature2_link', 'louie_senpai_siren', 'https://search.chongbuluo.com/#');
INSERT INTO `theme_settings` VALUES (5, '2021-07-10 17:15:37.683000', '2021-07-10 17:15:37.683000', 'pagenav_style', 'louie_senpai_siren', 'ajax');
INSERT INTO `theme_settings` VALUES (6, '2021-07-10 17:15:37.725000', '2021-07-10 17:15:37.725000', 'post_nepre', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (7, '2021-07-10 17:15:37.769000', '2021-07-15 14:55:19.964000', 'patternimg', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (8, '2021-07-10 17:15:37.808000', '2021-07-10 17:19:34.686000', 'theme_skin', 'louie_senpai_siren', '#2a3dc9');
INSERT INTO `theme_settings` VALUES (9, '2021-07-10 17:15:37.846000', '2021-07-14 11:40:16.573000', 'focus_img_filter', 'louie_senpai_siren', 'filter-nothing');
INSERT INTO `theme_settings` VALUES (10, '2021-07-10 17:15:37.887000', '2021-07-10 17:26:05.898000', 'focus_img_1', 'louie_senpai_siren', 'http://120.77.145.59:8090/upload/2021/07/bbc58c3d998d4f389fdae649334873f7-a17b4af7bb0e4e619704cff886003012.jpg');
INSERT INTO `theme_settings` VALUES (11, '2021-07-10 17:15:37.923000', '2021-07-10 17:15:37.923000', 'top_feature', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (12, '2021-07-10 17:15:38.007000', '2021-07-10 17:30:41.150000', 'feature1_link', 'louie_senpai_siren', 'https://tophub.today/');
INSERT INTO `theme_settings` VALUES (13, '2021-07-10 17:15:38.042000', '2021-07-10 17:30:41.177000', 'feature2_title', 'louie_senpai_siren', '虫部落快搜');
INSERT INTO `theme_settings` VALUES (14, '2021-07-10 17:15:38.070000', '2021-07-10 17:15:38.070000', 'post_list_style', 'louie_senpai_siren', 'standard');
INSERT INTO `theme_settings` VALUES (15, '2021-07-10 17:15:38.104000', '2021-07-10 17:15:38.104000', 'code_pretty', 'louie_senpai_siren', 'Default');
INSERT INTO `theme_settings` VALUES (16, '2021-07-10 17:15:38.136000', '2021-07-10 17:15:38.136000', 'post_share', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (17, '2021-07-10 17:15:38.166000', '2021-07-10 17:31:22.201000', 'head_notice', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (18, '2021-07-10 17:15:38.203000', '2021-07-10 17:30:41.240000', 'feature3_link', 'louie_senpai_siren', 'https://xxoo.link/');
INSERT INTO `theme_settings` VALUES (19, '2021-07-10 17:15:38.234000', '2021-07-10 17:15:38.234000', 'list_type', 'louie_senpai_siren', 'round');
INSERT INTO `theme_settings` VALUES (20, '2021-07-10 17:15:38.264000', '2021-07-10 17:15:38.264000', 'top_search', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (21, '2021-07-10 17:15:38.294000', '2021-07-10 17:36:09.503000', 'poi_pjax', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (22, '2021-07-10 17:15:38.324000', '2021-07-10 17:15:38.324000', 'author_profile', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (23, '2021-07-10 17:15:38.355000', '2021-07-10 17:30:41.338000', 'feature1_title', 'louie_senpai_siren', '今日热榜');
INSERT INTO `theme_settings` VALUES (24, '2021-07-10 17:15:38.380000', '2021-07-10 17:30:41.355000', 'feature3_title', 'louie_senpai_siren', '信息资源');
INSERT INTO `theme_settings` VALUES (25, '2021-07-10 17:15:38.415000', '2021-07-15 14:56:17.610000', 'head_focus', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (26, '2021-07-10 17:15:38.447000', '2021-07-10 17:15:38.447000', 'shownav', 'louie_senpai_siren', 'true');
INSERT INTO `theme_settings` VALUES (27, '2021-07-10 17:15:38.476000', '2021-07-10 17:24:03.147000', 'archives_patternimg', 'louie_senpai_siren', 'http://supren.top/upload/2021/07/0769f35296304ad99da32d89d50802fa-d1fb6bbff64e486eaeca21e7061639de.jpg');
INSERT INTO `theme_settings` VALUES (28, '2021-07-10 17:16:31.902000', '2021-07-10 17:35:04.650000', 'links_patternimg', 'louie_senpai_siren', 'http://supren.top/upload/2021/07/8332cc10912c4e61b067900beaed5944-ab01b457ecf14a2196236b8f14e1cd25.jpg');
INSERT INTO `theme_settings` VALUES (29, '2021-07-10 17:16:31.932000', '2021-07-10 17:35:04.564000', 'searh_patternimg', 'louie_senpai_siren', 'http://supren.top/upload/2021/07/389c0d6bb2fa419b8bd55edb29bf2f07-e8896c955a27443ba3d7ab9735261f29.jpg');
INSERT INTO `theme_settings` VALUES (30, '2021-07-10 17:16:32.033000', '2021-07-10 17:24:03.072000', 'tag_patternimg', 'louie_senpai_siren', 'http://supren.top/upload/2021/07/0769f35296304ad99da32d89d50802fa-d1fb6bbff64e486eaeca21e7061639de.jpg');
INSERT INTO `theme_settings` VALUES (31, '2021-07-10 17:16:32.083000', '2021-07-10 17:16:32.083000', 'category_patternimg', 'louie_senpai_siren', 'http://supren.top/upload/2021/07/158d36c5fca94fcbabb8e615cac3b577-357ace85595443199acfb9fdd461e311.jpg');
INSERT INTO `theme_settings` VALUES (44, '2021-07-10 17:30:41.622000', '2021-07-10 17:30:41.622000', 'feature1_img', 'louie_senpai_siren', 'http://supren.top/upload/2021/07/9a9c447af8294a8d834fd648f5873c1b-dde407a595bc4824996c77265f055de4.jpg');
INSERT INTO `theme_settings` VALUES (45, '2021-07-10 17:30:41.647000', '2021-07-10 17:30:41.647000', 'feature2_img', 'louie_senpai_siren', 'http://supren.top/upload/2021/07/9a9c447af8294a8d834fd648f5873c1b-dde407a595bc4824996c77265f055de4.jpg');
INSERT INTO `theme_settings` VALUES (46, '2021-07-10 17:30:41.665000', '2021-07-10 17:30:41.665000', 'feature3_img', 'louie_senpai_siren', 'http://120.77.145.59:8090/upload/2021/07/158d36c5fca94fcbabb8e615cac3b577-357ace85595443199acfb9fdd461e311.jpg');
INSERT INTO `theme_settings` VALUES (47, '2021-07-10 17:31:22.525000', '2021-07-10 17:34:06.803000', 'notice_title', 'louie_senpai_siren', '诫子书译文：有道德修养的人，依靠内心安静来修养身心，以俭朴节约财物来培养自己高尚的品德。不恬静寡欲无法明确志向，不排除外来干扰无法达到远大目标。学习必须静心专一，而才干来自勤奋学习。如果不学习就无法增长自己的才干，不明确志向就不能在学习上获得成就。纵欲放荡、消极怠慢就不能勉励心志使精神振作，冒险草率、急躁不安就不能修养性情。年华随时光而飞驰，意志随岁月逐渐消逝。最终枯败零落，大多不接触世事、不为社会所用，只能悲哀地困守在自己穷困的破舍里，到时悔恨又怎么来得及？');
INSERT INTO `theme_settings` VALUES (48, '2021-07-15 14:51:20.205000', '2021-07-15 14:51:20.205000', 'card_hover_summary', 'bao', 'false');
INSERT INTO `theme_settings` VALUES (49, '2021-07-15 14:51:20.232000', '2021-07-15 14:51:20.232000', 'tag_patternimg', 'bao', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` VALUES (50, '2021-07-15 14:51:20.260000', '2021-07-15 14:51:20.260000', 'pjax_enabled', 'bao', 'false');
INSERT INTO `theme_settings` VALUES (51, '2021-07-15 14:51:20.312000', '2021-07-15 14:51:20.312000', 'visit_statistics', 'bao', 'false');
INSERT INTO `theme_settings` VALUES (52, '2021-07-15 14:51:20.385000', '2021-07-15 14:51:20.385000', 'links_placeholder', 'bao', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` VALUES (53, '2021-07-15 14:51:20.414000', '2021-07-15 14:51:20.414000', 'posts_style', 'bao', 'false');
INSERT INTO `theme_settings` VALUES (54, '2021-07-15 14:51:20.441000', '2021-07-15 14:51:20.441000', 'list_show_date', 'bao', 'true');
INSERT INTO `theme_settings` VALUES (55, '2021-07-15 14:51:20.474000', '2021-07-15 14:51:20.474000', 'archives_patternimg', 'bao', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` VALUES (56, '2021-07-15 14:51:20.506000', '2021-07-15 14:51:20.506000', 'post_nepre', 'bao', 'true');
INSERT INTO `theme_settings` VALUES (57, '2021-07-15 14:51:20.574000', '2021-07-15 14:51:20.574000', 'post_toc', 'bao', 'true');
INSERT INTO `theme_settings` VALUES (58, '2021-07-15 14:51:20.601000', '2021-07-15 14:51:20.601000', 'open_night_mode', 'bao', 'true');
INSERT INTO `theme_settings` VALUES (59, '2021-07-15 14:51:20.634000', '2021-07-15 14:51:20.634000', 'default_hide_menu', 'bao', 'false');
INSERT INTO `theme_settings` VALUES (60, '2021-07-15 14:51:20.664000', '2021-07-15 14:51:20.664000', 'journals_patternimg', 'bao', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` VALUES (61, '2021-07-15 14:51:20.692000', '2021-07-15 14:51:20.692000', 'right_corner_circle', 'bao', 'true');
INSERT INTO `theme_settings` VALUES (62, '2021-07-15 14:51:20.719000', '2021-07-15 14:51:20.719000', 'rss', 'bao', 'true');
INSERT INTO `theme_settings` VALUES (63, '2021-07-15 14:51:20.750000', '2021-07-15 14:51:20.750000', 'more_lang_code', 'bao', 'false');
INSERT INTO `theme_settings` VALUES (64, '2021-07-15 14:51:20.775000', '2021-07-15 14:51:20.775000', 'xiang_ying_xiong_zhi_jing', 'bao', 'false');
INSERT INTO `theme_settings` VALUES (65, '2021-07-15 14:51:20.800000', '2021-07-15 14:51:20.800000', 'enable_code_highlight', 'bao', 'false');
INSERT INTO `theme_settings` VALUES (66, '2021-07-15 14:51:20.827000', '2021-07-15 14:51:20.827000', 'tags_title', 'bao', '标签列表');
INSERT INTO `theme_settings` VALUES (67, '2021-07-15 14:51:20.852000', '2021-07-15 14:51:20.852000', 'code_style', 'bao', 'tomorrow-night-bright');
INSERT INTO `theme_settings` VALUES (68, '2021-07-15 14:51:20.879000', '2021-07-15 14:51:20.879000', 'achieve_title', 'bao', '归档');
INSERT INTO `theme_settings` VALUES (69, '2021-07-15 14:51:20.915000', '2021-07-15 14:51:20.915000', 'enabled_index_cover_height', 'bao', 'true');
INSERT INTO `theme_settings` VALUES (70, '2021-07-15 14:51:20.947000', '2021-07-15 14:51:20.947000', 'enable_photo', 'bao', 'false');
INSERT INTO `theme_settings` VALUES (71, '2021-07-15 14:51:20.977000', '2021-07-15 14:51:20.977000', 'photos_patternimg', 'bao', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` VALUES (72, '2021-07-15 14:51:21.009000', '2021-07-15 14:51:21.009000', 'auto_night_mode', 'bao', 'true');
INSERT INTO `theme_settings` VALUES (73, '2021-07-15 14:51:21.034000', '2021-07-15 14:51:21.034000', 'search_patternimg', 'bao', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` VALUES (74, '2021-07-15 14:51:21.059000', '2021-07-15 14:51:21.059000', 'collpaseCode', 'bao', 'false');
INSERT INTO `theme_settings` VALUES (75, '2021-07-15 14:51:21.087000', '2021-07-15 14:51:21.087000', 'photos_title', 'bao', '相册');
INSERT INTO `theme_settings` VALUES (76, '2021-07-15 14:51:21.116000', '2021-07-15 14:51:21.116000', 'idea_code_style', 'bao', 'false');
INSERT INTO `theme_settings` VALUES (77, '2021-07-15 14:51:21.141000', '2021-07-15 14:51:21.141000', 'show_popular', 'bao', 'true');
INSERT INTO `theme_settings` VALUES (78, '2021-07-15 14:51:21.162000', '2021-07-15 14:51:21.162000', 'jounarls_title', 'bao', '日志');
INSERT INTO `theme_settings` VALUES (79, '2021-07-15 14:51:21.191000', '2021-07-15 14:51:21.191000', 'home_cover', 'bao', 'http://120.77.145.59:8090/upload/2021/07/0769f35296304ad99da32d89d50802fa-d1fb6bbff64e486eaeca21e7061639de.jpg');
INSERT INTO `theme_settings` VALUES (80, '2021-07-15 14:51:21.221000', '2021-07-15 14:51:21.221000', 'categories_title', 'bao', '分类列表');
INSERT INTO `theme_settings` VALUES (81, '2021-07-15 14:51:21.249000', '2021-07-15 14:51:21.249000', 'categories_patternimg', 'bao', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` VALUES (82, '2021-07-15 14:51:21.283000', '2021-07-15 14:51:21.283000', 'links_title', 'bao', '友链');
INSERT INTO `theme_settings` VALUES (83, '2021-07-15 14:51:21.316000', '2021-07-15 14:51:21.316000', 'enable_code_lineNumber', 'bao', 'false');
INSERT INTO `theme_settings` VALUES (84, '2021-07-15 14:51:21.346000', '2021-07-15 14:51:21.346000', 'links_patternimg', 'bao', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` VALUES (85, '2021-07-15 14:51:21.364000', '2021-07-15 14:51:21.364000', 'enable_image_view', 'bao', 'false');
INSERT INTO `theme_settings` VALUES (86, '2021-07-15 14:51:21.382000', '2021-07-15 14:51:21.382000', 'enabled_mathjax', 'bao', 'true');
INSERT INTO `theme_settings` VALUES (87, '2021-07-15 14:51:21.416000', '2021-07-15 14:51:21.416000', 'home_title', 'bao', '小学生');
INSERT INTO `theme_settings` VALUES (88, '2021-07-15 14:51:21.438000', '2021-07-15 14:51:21.438000', 'home_description', 'bao', '做个有用的人');
INSERT INTO `theme_settings` VALUES (89, '2021-07-15 15:22:30.549000', '2021-07-15 15:22:30.549000', 'focus_height', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (90, '2021-07-15 15:22:30.575000', '2021-07-15 15:22:30.575000', 'live2d_showF12Status', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (91, '2021-07-15 15:22:30.598000', '2021-07-15 15:22:30.598000', 'live2d_showWelcomeMessage', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (92, '2021-07-15 15:22:30.657000', '2021-07-15 15:22:30.657000', 'photos_gutter', 'LIlGG_Sakura', '10');
INSERT INTO `theme_settings` VALUES (93, '2021-07-15 15:22:30.682000', '2021-07-15 16:29:25.424000', 'feature2_link', 'LIlGG_Sakura', 'https://search.chongbuluo.com/#');
INSERT INTO `theme_settings` VALUES (94, '2021-07-15 15:22:30.703000', '2021-07-15 15:22:30.703000', 'live2d_canCloseLive2d', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (95, '2021-07-15 15:22:30.731000', '2021-07-15 15:22:30.731000', 'copy_monitor', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (96, '2021-07-15 15:22:30.752000', '2021-07-15 15:22:30.752000', 'live2d_takagiToolLine', 'LIlGG_Sakura', '20px');
INSERT INTO `theme_settings` VALUES (97, '2021-07-15 15:22:30.773000', '2021-07-15 15:22:30.773000', 'post_toc', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (98, '2021-07-15 15:22:30.794000', '2021-07-15 15:22:30.794000', 'patternimg', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (99, '2021-07-15 15:22:30.815000', '2021-07-15 15:29:35.061000', 'aplayer_float', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (100, '2021-07-15 15:22:30.836000', '2021-07-15 15:22:30.836000', 'dark_widget_tmd', 'LIlGG_Sakura', '0.7');
INSERT INTO `theme_settings` VALUES (101, '2021-07-15 15:22:30.857000', '2021-07-15 15:22:30.857000', 'aplayer_autoplay', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (102, '2021-07-15 15:22:30.878000', '2021-07-15 15:22:30.878000', 'copyright_notice', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (103, '2021-07-15 15:22:30.899000', '2021-07-15 15:22:30.899000', 'tag_randomColorMin', 'LIlGG_Sakura', '0.999');
INSERT INTO `theme_settings` VALUES (104, '2021-07-15 15:22:30.919000', '2021-07-15 15:22:30.919000', 'toast_width', 'LIlGG_Sakura', '260');
INSERT INTO `theme_settings` VALUES (105, '2021-07-15 15:22:30.941000', '2021-07-15 16:29:25.664000', 'feature1_link', 'LIlGG_Sakura', 'https://xxoo.link/');
INSERT INTO `theme_settings` VALUES (106, '2021-07-15 15:22:30.962000', '2021-07-15 15:29:35.196000', 'journal_color_bg_2', 'LIlGG_Sakura', '#f0ffff');
INSERT INTO `theme_settings` VALUES (107, '2021-07-15 15:22:30.983000', '2021-07-15 15:29:35.214000', 'journal_color_bg_1', 'LIlGG_Sakura', '#e6e6fa');
INSERT INTO `theme_settings` VALUES (108, '2021-07-15 15:22:31.019000', '2021-07-15 15:22:31.019000', 'live2d_takagiEdgeSide', 'LIlGG_Sakura', 'left:0');
INSERT INTO `theme_settings` VALUES (109, '2021-07-15 15:22:31.048000', '2021-07-15 15:22:31.048000', 'bg_icon_7', 'LIlGG_Sakura', 'fa fa-moon-o');
INSERT INTO `theme_settings` VALUES (110, '2021-07-15 15:22:31.083000', '2021-07-15 15:22:31.083000', 'bg_icon_6', 'LIlGG_Sakura', 'iconfont icon-bing');
INSERT INTO `theme_settings` VALUES (111, '2021-07-15 15:22:31.109000', '2021-07-15 15:22:31.109000', 'bg_icon_5', 'LIlGG_Sakura', 'iconfont icon-pixiv');
INSERT INTO `theme_settings` VALUES (112, '2021-07-15 15:22:31.143000', '2021-07-15 15:22:31.143000', 'bg_icon_4', 'LIlGG_Sakura', 'fa fa-optin-monster');
INSERT INTO `theme_settings` VALUES (113, '2021-07-15 15:22:31.176000', '2021-07-15 15:22:31.176000', 'bg_icon_3', 'LIlGG_Sakura', 'iconfont icon-dots');
INSERT INTO `theme_settings` VALUES (114, '2021-07-15 15:22:31.211000', '2021-07-15 15:22:31.211000', 'bg_icon_2', 'LIlGG_Sakura', 'fa fa-slack');
INSERT INTO `theme_settings` VALUES (115, '2021-07-15 15:22:31.245000', '2021-07-15 15:22:31.245000', 'bg_icon_1', 'LIlGG_Sakura', 'iconfont icon-sakura');
INSERT INTO `theme_settings` VALUES (116, '2021-07-15 15:22:31.276000', '2021-07-15 15:22:31.276000', 'head_notice', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (117, '2021-07-15 15:22:31.313000', '2021-07-15 15:22:31.313000', 'tag_randomColorMax', 'LIlGG_Sakura', '1');
INSERT INTO `theme_settings` VALUES (118, '2021-07-15 15:22:31.350000', '2021-07-15 15:22:31.350000', 'bg_icon_0', 'LIlGG_Sakura', 'fa fa-television');
INSERT INTO `theme_settings` VALUES (119, '2021-07-15 15:22:31.385000', '2021-07-15 15:22:31.385000', 'live2d_modelTexturesRandMode', 'LIlGG_Sakura', 'rand');
INSERT INTO `theme_settings` VALUES (120, '2021-07-15 15:22:31.419000', '2021-07-15 15:22:31.419000', 'cdn', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (121, '2021-07-15 15:22:31.459000', '2021-07-15 15:22:31.459000', 'i18n', 'LIlGG_Sakura', 'auto');
INSERT INTO `theme_settings` VALUES (122, '2021-07-15 15:22:31.482000', '2021-07-15 15:22:31.482000', 'feature_icon', 'LIlGG_Sakura', 'fa fa-anchor');
INSERT INTO `theme_settings` VALUES (123, '2021-07-15 15:22:31.511000', '2021-07-15 15:22:31.511000', 'live2d_modelAPI', 'LIlGG_Sakura', '//live2d.fghrsh.net/api/');
INSERT INTO `theme_settings` VALUES (124, '2021-07-15 15:22:31.563000', '2021-07-15 15:22:31.563000', 'list_type', 'LIlGG_Sakura', 'round');
INSERT INTO `theme_settings` VALUES (125, '2021-07-15 15:22:31.583000', '2021-07-15 15:22:31.583000', 'live2d_modelRandMode', 'LIlGG_Sakura', 'rand');
INSERT INTO `theme_settings` VALUES (126, '2021-07-15 15:22:31.604000', '2021-07-15 15:22:31.604000', 'top_search', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (127, '2021-07-15 15:22:31.625000', '2021-07-15 15:22:31.625000', 'live2d_showToolMenu', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (128, '2021-07-15 15:22:31.645000', '2021-07-15 15:22:31.645000', 'live2d_takagiTipsSize', 'LIlGG_Sakura', '250x70');
INSERT INTO `theme_settings` VALUES (129, '2021-07-15 15:22:31.678000', '2021-07-16 14:48:29.579000', 'author_profile', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (130, '2021-07-15 15:22:31.699000', '2021-07-15 15:22:31.699000', 'rimage_url', 'LIlGG_Sakura', 'https://api.lixingyong.com/api/images');
INSERT INTO `theme_settings` VALUES (131, '2021-07-15 15:22:31.720000', '2021-07-15 15:22:31.720000', 'mathjax', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (132, '2021-07-15 15:22:31.742000', '2021-07-15 15:22:31.742000', 'live2d_takagiToolTop', 'LIlGG_Sakura', '0px');
INSERT INTO `theme_settings` VALUES (133, '2021-07-15 15:22:31.763000', '2021-07-15 15:22:31.763000', 'shownav', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (134, '2021-07-15 15:22:31.784000', '2021-07-15 15:22:31.784000', 'is_thumbnail', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (135, '2021-07-15 15:22:31.805000', '2021-07-15 15:22:31.805000', 'photos_style', 'LIlGG_Sakura', 'justify');
INSERT INTO `theme_settings` VALUES (136, '2021-07-15 15:22:31.829000', '2021-07-15 15:22:31.829000', 'live2d_takagiMinWidth', 'LIlGG_Sakura', '768px');
INSERT INTO `theme_settings` VALUES (137, '2021-07-15 15:22:31.850000', '2021-07-15 15:22:31.850000', 'live2d_modelStorage', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (138, '2021-07-15 15:22:31.870000', '2021-07-15 15:22:31.870000', 'theme_change', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (139, '2021-07-15 15:22:31.891000', '2021-07-15 15:22:31.891000', 'live2d_modelTexturesId', 'LIlGG_Sakura', '1');
INSERT INTO `theme_settings` VALUES (140, '2021-07-15 15:22:31.915000', '2021-07-15 15:22:31.915000', 'live2d_takagiDraggableRevert', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (141, '2021-07-15 15:22:31.940000', '2021-07-15 15:22:31.940000', 'rimage_cover_back_num', 'LIlGG_Sakura', '5');
INSERT INTO `theme_settings` VALUES (142, '2021-07-15 15:22:31.961000', '2021-07-15 15:22:31.961000', 'aplayer_type', 'LIlGG_Sakura', 'playlist');
INSERT INTO `theme_settings` VALUES (143, '2021-07-15 15:22:31.980000', '2021-07-15 15:22:31.980000', 'live2d_takagiFontSize', 'LIlGG_Sakura', '12px');
INSERT INTO `theme_settings` VALUES (144, '2021-07-15 15:22:32.006000', '2021-07-15 15:22:32.006000', 'bgvideo_server', 'LIlGG_Sakura', 'bilibili');
INSERT INTO `theme_settings` VALUES (145, '2021-07-15 15:22:32.026000', '2021-07-15 15:22:32.026000', 'post_list_style', 'LIlGG_Sakura', 'imageflow');
INSERT INTO `theme_settings` VALUES (146, '2021-07-15 15:22:32.047000', '2021-07-15 15:22:32.047000', 'live2d_canTurnToHomePage', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (147, '2021-07-15 15:22:32.068000', '2021-07-15 15:22:32.068000', 'journal_color_font_1', 'LIlGG_Sakura', '#000000');
INSERT INTO `theme_settings` VALUES (148, '2021-07-15 15:22:32.090000', '2021-07-15 15:22:32.090000', 'post_share', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (149, '2021-07-15 15:22:32.114000', '2021-07-15 15:23:34.805000', 'focus_tou', 'LIlGG_Sakura', 'avatar');
INSERT INTO `theme_settings` VALUES (150, '2021-07-15 15:22:32.135000', '2021-07-15 15:22:32.135000', 'journal_color_font_2', 'LIlGG_Sakura', '#000000');
INSERT INTO `theme_settings` VALUES (151, '2021-07-15 15:22:32.156000', '2021-07-15 15:22:32.156000', 'live2d_takagiDraggable', 'LIlGG_Sakura', 'disable');
INSERT INTO `theme_settings` VALUES (152, '2021-07-15 15:22:32.176000', '2021-07-15 15:22:32.176000', 'bg_url_1', 'LIlGG_Sakura', 'https://view.lixingyong.com/images/2020/07/23/695cc3a80b21ee7f18bd731824ab9638.png');
INSERT INTO `theme_settings` VALUES (153, '2021-07-15 15:22:32.203000', '2021-07-15 15:22:32.203000', 'live2d_showF12OpenMsg', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (154, '2021-07-15 15:22:32.224000', '2021-07-15 15:22:32.224000', 'live2d_modelId', 'LIlGG_Sakura', '1');
INSERT INTO `theme_settings` VALUES (155, '2021-07-15 15:22:32.245000', '2021-07-15 15:22:32.245000', 'live2d_switch', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (156, '2021-07-15 15:22:32.278000', '2021-07-15 15:22:32.278000', 'live2d_showHitokoto', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (157, '2021-07-15 15:22:32.308000', '2021-07-15 15:22:32.308000', 'poi_pjax', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (158, '2021-07-15 15:22:32.329000', '2021-07-15 15:29:36.103000', 'toc_depth', 'LIlGG_Sakura', '5');
INSERT INTO `theme_settings` VALUES (159, '2021-07-15 15:22:32.369000', '2021-07-15 15:22:32.369000', 'bg_url_6', 'LIlGG_Sakura', 'https://api.shino.cc/bing/');
INSERT INTO `theme_settings` VALUES (160, '2021-07-15 15:22:32.403000', '2021-07-15 15:22:32.403000', 'live2d_canSwitchTextures', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (161, '2021-07-15 15:22:32.426000', '2021-07-15 15:22:32.426000', 'bg_url_5', 'LIlGG_Sakura', 'https://view.lixingyong.com/images/2020/07/23/star02.png');
INSERT INTO `theme_settings` VALUES (162, '2021-07-15 15:22:32.448000', '2021-07-15 15:22:32.448000', 'bg_url_4', 'LIlGG_Sakura', 'https://view.lixingyong.com/images/2020/07/23/little-monster.png');
INSERT INTO `theme_settings` VALUES (163, '2021-07-15 15:22:32.468000', '2021-07-15 15:22:32.468000', 'bg_url_3', 'LIlGG_Sakura', 'https://view.lixingyong.com/images/2020/07/23/kyotoanimation.png');
INSERT INTO `theme_settings` VALUES (164, '2021-07-15 15:22:32.489000', '2021-07-15 15:22:32.489000', 'bg_url_2', 'LIlGG_Sakura', 'https://view.lixingyong.com/images/2020/07/23/defc1b6783cd16774900517d3b38ded7.jpg');
INSERT INTO `theme_settings` VALUES (165, '2021-07-15 15:22:32.509000', '2021-07-15 15:22:32.509000', 'category_radar', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (166, '2021-07-15 15:22:32.530000', '2021-07-15 15:22:32.530000', 'aplayer_order', 'LIlGG_Sakura', 'random');
INSERT INTO `theme_settings` VALUES (167, '2021-07-15 15:22:32.551000', '2021-07-15 15:22:32.551000', 'rimage_cover_itype', 'LIlGG_Sakura', 'image');
INSERT INTO `theme_settings` VALUES (168, '2021-07-15 15:22:32.571000', '2021-07-15 15:22:32.571000', 'live2d_showCopyMessage', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (169, '2021-07-15 15:22:32.598000', '2021-07-15 15:23:35.236000', 'focus_infos', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (170, '2021-07-15 15:22:32.618000', '2021-07-15 15:22:32.618000', 'rimage_cover_lqip', 'LIlGG_Sakura', 'loading');
INSERT INTO `theme_settings` VALUES (171, '2021-07-15 15:22:32.665000', '2021-07-15 15:22:32.665000', 'top_back_img', 'LIlGG_Sakura', 'https://cdn.jsdelivr.net/gh/LIlGG/cdn@1.0.8/img/Sakura/images/scroll.png');
INSERT INTO `theme_settings` VALUES (172, '2021-07-15 15:22:32.692000', '2021-07-15 15:29:36.333000', 'is_aplayer', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (173, '2021-07-15 15:22:32.713000', '2021-07-15 15:22:32.713000', 'post_nepre', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (174, '2021-07-15 15:22:32.734000', '2021-07-15 15:22:32.734000', 'theme_skin', 'LIlGG_Sakura', '#fe9600');
INSERT INTO `theme_settings` VALUES (175, '2021-07-15 15:22:32.755000', '2021-07-15 15:22:32.755000', 'toast_top', 'LIlGG_Sakura', 'top');
INSERT INTO `theme_settings` VALUES (176, '2021-07-15 15:22:32.777000', '2021-07-15 15:22:32.777000', 'focus_godown', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (177, '2021-07-15 15:22:32.797000', '2021-07-15 15:22:32.797000', 'top_feature', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (178, '2021-07-15 15:22:32.818000', '2021-07-15 15:22:32.818000', 'bg_desc_1', 'LIlGG_Sakura', '樱花飞舞~');
INSERT INTO `theme_settings` VALUES (179, '2021-07-15 15:22:32.838000', '2021-07-15 15:29:36.435000', 'theme_dark', 'LIlGG_Sakura', '#fe9600');
INSERT INTO `theme_settings` VALUES (180, '2021-07-15 15:22:32.858000', '2021-07-15 15:22:32.858000', 'bg_desc_0', 'LIlGG_Sakura', '默认是纯洁的白色~');
INSERT INTO `theme_settings` VALUES (181, '2021-07-15 15:22:32.891000', '2021-07-15 15:22:32.891000', 'bg_desc_3', 'LIlGG_Sakura', '小点点~');
INSERT INTO `theme_settings` VALUES (182, '2021-07-15 15:22:32.912000', '2021-07-15 15:22:32.912000', 'bg_desc_2', 'LIlGG_Sakura', '格子控！');
INSERT INTO `theme_settings` VALUES (183, '2021-07-15 15:22:32.937000', '2021-07-15 15:22:32.937000', 'masonry_column', 'LIlGG_Sakura', '3');
INSERT INTO `theme_settings` VALUES (184, '2021-07-15 15:22:32.961000', '2021-07-15 15:22:32.961000', 'cursor_skin', 'LIlGG_Sakura', 'sakura');
INSERT INTO `theme_settings` VALUES (185, '2021-07-15 15:22:33.007000', '2021-07-15 15:22:33.007000', 'aplayer_preload', 'LIlGG_Sakura', 'none');
INSERT INTO `theme_settings` VALUES (186, '2021-07-15 15:22:33.039000', '2021-07-15 15:22:33.039000', 'bilibili_video_qn', 'LIlGG_Sakura', '6');
INSERT INTO `theme_settings` VALUES (187, '2021-07-15 15:22:33.079000', '2021-07-15 15:22:33.079000', 'live2d_canSwitchHitokoto', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (188, '2021-07-15 15:22:33.108000', '2021-07-15 15:22:33.108000', 'live2d_canTurnToAboutPage', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (189, '2021-07-15 15:22:33.136000', '2021-07-15 15:22:33.136000', 'footer_logo', 'LIlGG_Sakura', 'https://cdn.jsdelivr.net/gh/LIlGG/cdn@1.0.8/img/Sakura/images/sakura.svg');
INSERT INTO `theme_settings` VALUES (190, '2021-07-15 15:22:33.175000', '2021-07-15 15:22:33.175000', 'head_focus', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (191, '2021-07-15 15:22:33.209000', '2021-07-15 15:22:33.209000', 'live2d_takagiToolFont', 'LIlGG_Sakura', '14px');
INSERT INTO `theme_settings` VALUES (192, '2021-07-15 15:22:33.243000', '2021-07-15 15:22:33.243000', 'bg_name_4', 'LIlGG_Sakura', 'totem');
INSERT INTO `theme_settings` VALUES (193, '2021-07-15 15:22:33.274000', '2021-07-15 15:22:33.274000', 'rimage_cover_back_open', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (194, '2021-07-15 15:22:33.297000', '2021-07-15 15:22:33.297000', 'bg_name_5', 'LIlGG_Sakura', 'pixiv');
INSERT INTO `theme_settings` VALUES (195, '2021-07-15 15:22:33.321000', '2021-07-15 15:22:33.321000', 'bg_name_2', 'LIlGG_Sakura', 'gribs');
INSERT INTO `theme_settings` VALUES (196, '2021-07-15 15:22:33.343000', '2021-07-15 15:22:33.343000', 'bg_name_3', 'LIlGG_Sakura', 'KAdots');
INSERT INTO `theme_settings` VALUES (197, '2021-07-15 15:22:33.363000', '2021-07-15 15:22:33.363000', 'bgvideo', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (198, '2021-07-15 15:22:33.384000', '2021-07-15 15:22:33.384000', 'aplayer_server', 'LIlGG_Sakura', 'netease');
INSERT INTO `theme_settings` VALUES (199, '2021-07-15 15:22:33.405000', '2021-07-15 15:22:33.405000', 'pagenav_style', 'LIlGG_Sakura', 'ajax');
INSERT INTO `theme_settings` VALUES (200, '2021-07-15 15:22:33.425000', '2021-07-15 15:22:33.425000', 'masonry_changer_max', 'LIlGG_Sakura', '5');
INSERT INTO `theme_settings` VALUES (201, '2021-07-15 15:22:33.446000', '2021-07-15 15:22:33.446000', 'bg_name_6', 'LIlGG_Sakura', 'bing');
INSERT INTO `theme_settings` VALUES (202, '2021-07-15 15:22:33.466000', '2021-07-15 15:22:33.466000', 'live2d_hitokotoAPI', 'LIlGG_Sakura', 'hitokoto.cn');
INSERT INTO `theme_settings` VALUES (203, '2021-07-15 15:22:33.492000', '2021-07-15 15:22:33.492000', 'aplayer_id', 'LIlGG_Sakura', '2345868969');
INSERT INTO `theme_settings` VALUES (204, '2021-07-15 15:22:33.512000', '2021-07-15 15:22:33.512000', 'rimage_cover_back_itype', 'LIlGG_Sakura', 'image');
INSERT INTO `theme_settings` VALUES (205, '2021-07-15 15:22:33.533000', '2021-07-15 15:22:33.533000', 'bg_name_7', 'LIlGG_Sakura', 'dark');
INSERT INTO `theme_settings` VALUES (206, '2021-07-15 15:22:33.553000', '2021-07-15 15:22:33.553000', 'code_line', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (207, '2021-07-15 15:22:33.574000', '2021-07-15 15:22:33.574000', 'default_theme', 'LIlGG_Sakura', 'bg_0');
INSERT INTO `theme_settings` VALUES (208, '2021-07-15 15:22:33.599000', '2021-07-15 15:22:33.599000', 'bg_name_0', 'LIlGG_Sakura', 'white');
INSERT INTO `theme_settings` VALUES (209, '2021-07-15 15:22:33.619000', '2021-07-15 15:22:33.619000', 'live2d_showF12Message', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (210, '2021-07-15 15:22:33.648000', '2021-07-15 15:22:33.648000', 'bg_name_1', 'LIlGG_Sakura', 'sakura');
INSERT INTO `theme_settings` VALUES (211, '2021-07-15 15:22:33.670000', '2021-07-15 15:22:33.670000', 'open_toast', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (212, '2021-07-15 15:22:33.708000', '2021-07-15 15:22:33.708000', 'journal_bg_blur', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (213, '2021-07-15 15:22:33.742000', '2021-07-15 15:22:33.742000', 'live2d_canSwitchModel', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (214, '2021-07-15 15:22:33.775000', '2021-07-15 15:22:33.775000', 'bg_img_strategy_7', 'LIlGG_Sakura', 'cover');
INSERT INTO `theme_settings` VALUES (215, '2021-07-15 15:22:33.819000', '2021-07-15 15:22:33.819000', 'bg_img_strategy_6', 'LIlGG_Sakura', 'cover');
INSERT INTO `theme_settings` VALUES (216, '2021-07-15 15:22:33.847000', '2021-07-15 15:22:33.847000', 'dark_imgbri', 'LIlGG_Sakura', '0.7');
INSERT INTO `theme_settings` VALUES (217, '2021-07-15 15:22:33.875000', '2021-07-15 15:24:36.529000', 'focus_img_filter', 'LIlGG_Sakura', 'filter-nothing');
INSERT INTO `theme_settings` VALUES (218, '2021-07-15 15:22:33.897000', '2021-07-15 15:22:33.897000', 'toast_height', 'LIlGG_Sakura', '60');
INSERT INTO `theme_settings` VALUES (219, '2021-07-15 15:22:33.922000', '2021-07-15 15:22:33.922000', 'top_back_mode', 'LIlGG_Sakura', 'lanyard');
INSERT INTO `theme_settings` VALUES (220, '2021-07-15 15:22:33.947000', '2021-07-15 15:22:33.947000', 'rimage_cover_sheet_open', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (221, '2021-07-15 15:22:33.967000', '2021-07-15 15:22:33.967000', 'reply_mail_img', 'LIlGG_Sakura', 'https://cdn.jsdelivr.net/gh/LIlGG/cdn@1.0.8/img/other/head_2.jpg');
INSERT INTO `theme_settings` VALUES (222, '2021-07-15 15:22:33.990000', '2021-07-15 15:22:33.990000', 'keep_record_mode', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (223, '2021-07-15 15:22:34.012000', '2021-07-15 15:29:37.111000', 'aplayer_theme', 'LIlGG_Sakura', '#ffa500');
INSERT INTO `theme_settings` VALUES (224, '2021-07-15 15:22:34.033000', '2021-07-15 15:22:34.033000', 'bg_night_0', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (225, '2021-07-15 15:22:34.054000', '2021-07-15 15:22:34.054000', 'bg_desc_5', 'LIlGG_Sakura', 'pixiv主题~');
INSERT INTO `theme_settings` VALUES (226, '2021-07-15 15:22:34.075000', '2021-07-15 15:22:34.075000', 'bg_desc_4', 'LIlGG_Sakura', '充满力量的橙色');
INSERT INTO `theme_settings` VALUES (227, '2021-07-15 15:22:34.096000', '2021-07-15 15:22:34.096000', 'bg_desc_7', 'LIlGG_Sakura', '关灯！');
INSERT INTO `theme_settings` VALUES (228, '2021-07-15 15:22:34.117000', '2021-07-15 15:22:34.117000', 'bg_desc_6', 'LIlGG_Sakura', '必应图片');
INSERT INTO `theme_settings` VALUES (229, '2021-07-15 15:22:34.138000', '2021-07-15 15:22:34.138000', 'code_pretty', 'LIlGG_Sakura', 'Dracula');
INSERT INTO `theme_settings` VALUES (230, '2021-07-15 15:22:34.158000', '2021-07-15 15:22:34.158000', 'tag_cloud', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (231, '2021-07-15 15:22:34.179000', '2021-07-15 15:22:34.179000', 'comment_mode', 'LIlGG_Sakura', 'https://cdn.jsdelivr.net/gh/LIlGG/halo-comment-sakura/dist/halo-comment.min.js');
INSERT INTO `theme_settings` VALUES (232, '2021-07-15 15:22:34.200000', '2021-07-15 15:22:34.200000', 'bg_img_strategy_1', 'LIlGG_Sakura', 'none');
INSERT INTO `theme_settings` VALUES (233, '2021-07-15 15:22:34.220000', '2021-07-15 15:22:34.220000', 'bilibili_video_vtype', 'LIlGG_Sakura', '0');
INSERT INTO `theme_settings` VALUES (234, '2021-07-15 15:22:34.246000', '2021-07-15 15:22:34.246000', 'bg_img_strategy_0', 'LIlGG_Sakura', 'none');
INSERT INTO `theme_settings` VALUES (235, '2021-07-15 15:22:34.267000', '2021-07-15 16:29:28.179000', 'feature3_link', 'LIlGG_Sakura', 'http://snailclimb.gitee.io/');
INSERT INTO `theme_settings` VALUES (236, '2021-07-15 15:22:34.288000', '2021-07-15 15:22:34.288000', 'rimage_cover_open', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (237, '2021-07-15 15:22:34.308000', '2021-07-15 15:22:34.308000', 'bg_img_strategy_3', 'LIlGG_Sakura', 'none');
INSERT INTO `theme_settings` VALUES (238, '2021-07-15 15:22:34.328000', '2021-07-15 15:22:34.328000', 'bg_img_strategy_2', 'LIlGG_Sakura', 'none');
INSERT INTO `theme_settings` VALUES (239, '2021-07-15 15:22:34.349000', '2021-07-15 15:22:34.349000', 'bg_img_strategy_5', 'LIlGG_Sakura', 'none');
INSERT INTO `theme_settings` VALUES (240, '2021-07-15 15:22:34.369000', '2021-07-15 15:22:34.369000', 'bg_img_strategy_4', 'LIlGG_Sakura', 'none');
INSERT INTO `theme_settings` VALUES (241, '2021-07-15 15:22:34.389000', '2021-07-15 15:29:37.436000', 'toast_color', 'LIlGG_Sakura', '#ffffff');
INSERT INTO `theme_settings` VALUES (242, '2021-07-15 15:22:34.408000', '2021-07-15 15:22:34.408000', 'live2d_screenshotCaptureName', 'LIlGG_Sakura', 'live2d.png');
INSERT INTO `theme_settings` VALUES (243, '2021-07-15 15:22:34.429000', '2021-07-15 15:22:34.429000', 'masonry_changer_min', 'LIlGG_Sakura', '3');
INSERT INTO `theme_settings` VALUES (244, '2021-07-15 15:22:34.449000', '2021-07-15 15:22:34.449000', 'live2d_canTakeScreenshot', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (245, '2021-07-15 15:22:34.469000', '2021-07-15 15:22:34.469000', 'bg_night_5', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (246, '2021-07-15 15:22:34.489000', '2021-07-15 15:22:34.489000', 'bg_night_6', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (247, '2021-07-15 15:22:34.509000', '2021-07-15 15:22:34.509000', 'bg_night_7', 'LIlGG_Sakura', 'true');
INSERT INTO `theme_settings` VALUES (248, '2021-07-15 15:22:34.530000', '2021-07-15 15:22:34.530000', 'live2d_takagiSize', 'LIlGG_Sakura', '280x250');
INSERT INTO `theme_settings` VALUES (249, '2021-07-15 15:22:34.554000', '2021-07-15 15:22:34.554000', 'toast_font_size', 'LIlGG_Sakura', '14');
INSERT INTO `theme_settings` VALUES (250, '2021-07-15 15:22:34.580000', '2021-07-15 15:23:36.658000', 'glitch_text', 'LIlGG_Sakura', 'Let\'s Go');
INSERT INTO `theme_settings` VALUES (251, '2021-07-15 15:22:34.600000', '2021-07-15 15:22:34.600000', 'bg_night_1', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (252, '2021-07-15 15:22:34.620000', '2021-07-15 15:22:34.620000', 'bg_night_2', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (253, '2021-07-15 15:22:34.652000', '2021-07-15 15:22:34.652000', 'bg_night_3', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (254, '2021-07-15 15:22:34.685000', '2021-07-15 15:22:34.685000', 'bg_night_4', 'LIlGG_Sakura', 'false');
INSERT INTO `theme_settings` VALUES (255, '2021-07-15 15:22:34.720000', '2021-07-15 15:22:34.720000', 'archives_patternimg', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/bbc58c3d998d4f389fdae649334873f7-a17b4af7bb0e4e619704cff886003012.jpg');
INSERT INTO `theme_settings` VALUES (256, '2021-07-15 15:22:34.741000', '2021-07-15 15:22:34.741000', 'photos_patternimg', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/9278fb72880e11ebb6edd017c2d2eca2-13fb15f48f0a4cc983a966294b1fdeb0.jpg');
INSERT INTO `theme_settings` VALUES (257, '2021-07-15 15:22:34.762000', '2021-07-15 15:22:34.762000', 'journals_patternimg', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/b67b9cdf160d44cda3ff56d838b71a09-03164d0ce4ef4bfdac4f77c2ca0f5ef8.jpg');
INSERT INTO `theme_settings` VALUES (258, '2021-07-15 15:22:34.782000', '2021-07-15 15:22:34.782000', 'links_patternimg', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/533732a35f3e4629a88652c86f27ae69-fd7c29e27947451f88586851aaa063b8.jpg');
INSERT INTO `theme_settings` VALUES (259, '2021-07-15 15:22:34.802000', '2021-07-15 15:22:34.802000', 'searh_patternimg', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/b0fced9bf8864e88bb35b437b72f0c14-0ac2f3339ccf47849cfe34960859c7a5.jpg');
INSERT INTO `theme_settings` VALUES (260, '2021-07-15 15:22:34.834000', '2021-07-15 15:22:34.834000', 'tag_patternimg', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/0769f35296304ad99da32d89d50802fa-d1fb6bbff64e486eaeca21e7061639de.jpg');
INSERT INTO `theme_settings` VALUES (261, '2021-07-15 15:22:34.854000', '2021-07-15 15:22:34.854000', 'category_patternimg', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/5268d877a2a04864b36b4961ab793f4f-56aaefa743f049ae9fdcabe97c69f2f7.jpg');
INSERT INTO `theme_settings` VALUES (262, '2021-07-15 15:23:36.862000', '2021-07-15 15:24:00.467000', 'focus_img_1', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/bbc58c3d998d4f389fdae649334873f7-a17b4af7bb0e4e619704cff886003012.jpg');
INSERT INTO `theme_settings` VALUES (263, '2021-07-15 15:27:35.263000', '2021-07-15 15:27:35.263000', 'wechat', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210715152541-a5767c56743c43de9c451a74bbe9f7a1.jpg');
INSERT INTO `theme_settings` VALUES (264, '2021-07-15 15:27:35.288000', '2021-07-15 15:27:35.288000', 'qq', 'LIlGG_Sakura', '819389547');
INSERT INTO `theme_settings` VALUES (265, '2021-07-15 15:27:35.307000', '2021-07-15 15:27:35.307000', 'wangyiyun', 'LIlGG_Sakura', '我不管该昵称已被占用');
INSERT INTO `theme_settings` VALUES (266, '2021-07-15 15:27:35.332000', '2021-07-15 15:27:35.332000', 'email', 'LIlGG_Sakura', '819389547@qq.com');
INSERT INTO `theme_settings` VALUES (267, '2021-07-15 16:29:28.517000', '2021-07-15 16:29:28.517000', 'feature1_img', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/158d36c5fca94fcbabb8e615cac3b577-357ace85595443199acfb9fdd461e311.jpg');
INSERT INTO `theme_settings` VALUES (268, '2021-07-15 16:29:28.537000', '2021-07-15 16:29:28.537000', 'feature1_desc', 'LIlGG_Sakura', '常用网站链接');
INSERT INTO `theme_settings` VALUES (269, '2021-07-15 16:29:28.569000', '2021-07-15 16:29:28.569000', 'feature1_title', 'LIlGG_Sakura', '链接');
INSERT INTO `theme_settings` VALUES (270, '2021-07-15 16:29:28.600000', '2021-07-15 16:29:28.600000', 'feature2_img', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/0c7c95c93e45457abc68c3dbdbca2076-ab653f2afc2748feaf06cf074d3b6bc9.jpg');
INSERT INTO `theme_settings` VALUES (271, '2021-07-15 16:29:28.621000', '2021-07-15 16:29:28.621000', 'feature2_title', 'LIlGG_Sakura', '虫部落');
INSERT INTO `theme_settings` VALUES (272, '2021-07-15 16:29:28.642000', '2021-07-15 16:29:28.642000', 'feature2_desc', 'LIlGG_Sakura', '虫部落链接');
INSERT INTO `theme_settings` VALUES (273, '2021-07-15 16:29:28.663000', '2021-07-15 16:29:28.663000', 'feature3_img', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/389c0d6bb2fa419b8bd55edb29bf2f07-e8896c955a27443ba3d7ab9735261f29.jpg');
INSERT INTO `theme_settings` VALUES (274, '2021-07-15 16:29:28.684000', '2021-07-15 16:29:28.684000', 'feature3_title', 'LIlGG_Sakura', 'JavaGuide');
INSERT INTO `theme_settings` VALUES (275, '2021-07-15 16:29:28.712000', '2021-07-15 16:29:28.712000', 'feature3_desc', 'LIlGG_Sakura', 'java面试知识点');
INSERT INTO `theme_settings` VALUES (276, '2021-07-15 16:30:15.078000', '2021-07-15 16:30:15.078000', 'feature_title', 'LIlGG_Sakura', '比较频繁使用的链接汇总');
INSERT INTO `theme_settings` VALUES (277, '2021-07-15 16:33:56.454000', '2021-07-15 16:33:56.454000', 'alipay_code', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/zfb-36a87f89460c4a358916c0455096af16.jpg');
INSERT INTO `theme_settings` VALUES (278, '2021-07-15 16:33:56.477000', '2021-07-15 16:33:56.477000', 'wechat_code', 'LIlGG_Sakura', 'http://supren.top/upload/2021/07/wx-3823066061164580a921b2b580b0490b.jpg');

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `avatar` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `description` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `email` varchar(127) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `expire_time` datetime(6) NULL DEFAULT NULL,
  `mfa_key` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `mfa_type` int(0) NOT NULL DEFAULT 0,
  `nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES (1, '2021-07-10 17:12:16.528000', '2021-07-16 14:44:05.250000', 'http://supren.top/upload/2021/07/9a9c447af8294a8d834fd648f5873c1b-dde407a595bc4824996c77265f055de4.jpg', '尽己力，听天命。无愧于心，不惑于情。顺势而为，随遇而安。知错就改，迷途知返。', '819389547@qq.com', '2021-07-10 17:12:16.528000', NULL, 0, '做个有用的人', '$2a$10$JbysevCQunTS8XCF1i/yVeKlWc80u/XUVy11XIZLebxmCkqV/fYL.', 'admin');

SET FOREIGN_KEY_CHECKS = 1;
